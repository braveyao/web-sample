function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _classCallCheck(a, n) {
  if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}
function _defineProperties(e, r) {
  for (var t = 0; t < r.length; t++) {
    var o = r[t];
    o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);
  }
}
function _createClass(e, r, t) {
  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
    writable: !1
  }), e;
}
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e  ) {
      t && (r = t);
      var n = 0,
        F = function () {};
      return {
        s: F,
        n: function () {
          return n >= r.length ? {
            done: !0
          } : {
            done: !1,
            value: r[n++]
          };
        },
        e: function (r) {
          throw r;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o,
    a = !0,
    u = !1;
  return {
    s: function () {
      t = t.call(r);
    },
    n: function () {
      var r = t.next();
      return a = r.done, r;
    },
    e: function (r) {
      u = !0, o = r;
    },
    f: function () {
      try {
        a || null == t.return || t.return();
      } finally {
        if (u) throw o;
      }
    }
  };
}
function _defineProperty(e, r, t) {
  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
function _getPrototypeOf(t) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, _getPrototypeOf(t);
}
function _inherits(t, e) {
  if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");
  t.prototype = Object.create(e && e.prototype, {
    constructor: {
      value: t,
      writable: !0,
      configurable: !0
    }
  }), Object.defineProperty(t, "prototype", {
    writable: !1
  }), e && _setPrototypeOf(t, e);
}
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (_isNativeReflectConstruct = function () {
    return !!t;
  })();
}
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(t, e) {
  if (e && ("object" == typeof e || "function" == typeof e)) return e;
  if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t);
}
function _regenerator() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */
  var e,
    t,
    r = "function" == typeof Symbol ? Symbol : {},
    n = r.iterator || "@@iterator",
    o = r.toStringTag || "@@toStringTag";
  function i(r, n, o, i) {
    var c = n && n.prototype instanceof Generator ? n : Generator,
      u = Object.create(c.prototype);
    return _regeneratorDefine(u, "_invoke", function (r, n, o) {
      var i,
        c,
        u,
        f = 0,
        p = o || [],
        y = !1,
        G = {
          p: 0,
          n: 0,
          v: e,
          a: d,
          f: d.bind(e, 4),
          d: function (t, r) {
            return i = t, c = 0, u = e, G.n = r, a;
          }
        };
      function d(r, n) {
        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
          var o,
            i = p[t],
            d = G.p,
            l = i[2];
          r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0));
        }
        if (o || r > 1) return a;
        throw y = !0, n;
      }
      return function (o, p, l) {
        if (f > 1) throw TypeError("Generator is already running");
        for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) {
          i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u);
          try {
            if (f = 2, i) {
              if (c || (o = "next"), t = i[o]) {
                if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object");
                if (!t.done) return t;
                u = t.value, c < 2 && (c = 0);
              } else 1 === c && (t = i.return) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1);
              i = e;
            } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break;
          } catch (t) {
            i = e, c = 1, u = t;
          } finally {
            f = 1;
          }
        }
        return {
          value: t,
          done: y
        };
      };
    }(r, o, i), !0), u;
  }
  var a = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  t = Object.getPrototypeOf;
  var c = [][n] ? t(t([][n]())) : (_regeneratorDefine(t = {}, n, function () {
      return this;
    }), t),
    u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c);
  function f(e) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e;
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine(u), _regeneratorDefine(u, o, "Generator"), _regeneratorDefine(u, n, function () {
    return this;
  }), _regeneratorDefine(u, "toString", function () {
    return "[object Generator]";
  }), (_regenerator = function () {
    return {
      w: i,
      m: f
    };
  })();
}
function _regeneratorDefine(e, r, n, t) {
  var i = Object.defineProperty;
  try {
    i({}, "", {});
  } catch (e) {
    i = 0;
  }
  _regeneratorDefine = function (e, r, n, t) {
    if (r) i ? i(e, r, {
      value: n,
      enumerable: !t,
      configurable: !t,
      writable: !t
    }) : e[r] = n;else {
      function o(r, n) {
        _regeneratorDefine(e, r, function (e) {
          return this._invoke(r, n, e);
        });
      }
      o("next", 0), o("throw", 1), o("return", 2);
    }
  }, _regeneratorDefine(e, r, n, t);
}
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, _setPrototypeOf(t, e);
}
function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}
function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r );
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (String )(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return _wrapNativeSuper = function (t) {
    if (null === t || !_isNativeFunction(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return _construct(t, arguments, _getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), _setPrototypeOf(Wrapper, t);
  }, _wrapNativeSuper(t);
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var loglevel = {exports: {}};

(function (module) {
  (function (root, definition) {

    if (module.exports) {
      module.exports = definition();
    } else {
      root.log = definition();
    }
  })(commonjsGlobal, function () {

    // Slightly dubious tricks to cut down minimized file size
    var noop = function noop() {};
    var undefinedType = "undefined";
    var isIE = (typeof window === "undefined" ? "undefined" : _typeof(window)) !== undefinedType && _typeof(window.navigator) !== undefinedType && /Trident\/|MSIE /.test(window.navigator.userAgent);
    var logMethods = ["trace", "debug", "info", "warn", "error"];
    var _loggersByName = {};
    var defaultLogger = null;

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
      var method = obj[methodName];
      if (typeof method.bind === 'function') {
        return method.bind(obj);
      } else {
        try {
          return Function.prototype.bind.call(method, obj);
        } catch (e) {
          // Missing bind shim or IE8 + Modernizr, fallback to wrapping
          return function () {
            return Function.prototype.apply.apply(method, [obj, arguments]);
          };
        }
      }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
      if (console.log) {
        if (console.log.apply) {
          console.log.apply(console, arguments);
        } else {
          // In old IE, native console methods themselves don't have apply().
          Function.prototype.apply.apply(console.log, [console, arguments]);
        }
      }
      if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
      if (methodName === 'debug') {
        methodName = 'log';
      }
      if ((typeof console === "undefined" ? "undefined" : _typeof(console)) === undefinedType) {
        return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
      } else if (methodName === 'trace' && isIE) {
        return traceForIE;
      } else if (console[methodName] !== undefined) {
        return bindMethod(console, methodName);
      } else if (console.log !== undefined) {
        return bindMethod(console, 'log');
      } else {
        return noop;
      }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods() {
      /*jshint validthis:true */
      var level = this.getLevel();

      // Replace the actual methods.
      for (var i = 0; i < logMethods.length; i++) {
        var methodName = logMethods[i];
        this[methodName] = i < level ? noop : this.methodFactory(methodName, level, this.name);
      }

      // Define log.log as an alias for log.debug
      this.log = this.debug;

      // Return any important warnings.
      if ((typeof console === "undefined" ? "undefined" : _typeof(console)) === undefinedType && level < this.levels.SILENT) {
        return "No console available for logging";
      }
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName) {
      return function () {
        if ((typeof console === "undefined" ? "undefined" : _typeof(console)) !== undefinedType) {
          replaceLoggingMethods.call(this);
          this[methodName].apply(this, arguments);
        }
      };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, _level, _loggerName) {
      /*jshint validthis:true */
      return realMethod(methodName) || enableLoggingWhenConsoleArrives.apply(this, arguments);
    }
    function Logger(name, factory) {
      // Private instance variables.
      var self = this;
      /**
       * The level inherited from a parent logger (or a global default). We
       * cache this here rather than delegating to the parent so that it stays
       * in sync with the actual logging methods that we have installed (the
       * parent could change levels but we might not have rebuilt the loggers
       * in this child yet).
       * @type {number}
       */
      var inheritedLevel;
      /**
       * The default level for this logger, if any. If set, this overrides
       * `inheritedLevel`.
       * @type {number|null}
       */
      var defaultLevel;
      /**
       * A user-specific level for this logger. If set, this overrides
       * `defaultLevel`.
       * @type {number|null}
       */
      var userLevel;
      var storageKey = "loglevel";
      if (typeof name === "string") {
        storageKey += ":" + name;
      } else if (_typeof(name) === "symbol") {
        storageKey = undefined;
      }
      function persistLevelIfPossible(levelNum) {
        var levelName = (logMethods[levelNum] || 'silent').toUpperCase();
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === undefinedType || !storageKey) return;

        // Use localStorage if available
        try {
          window.localStorage[storageKey] = levelName;
          return;
        } catch (ignore) {}

        // Use session cookie as fallback
        try {
          window.document.cookie = encodeURIComponent(storageKey) + "=" + levelName + ";";
        } catch (ignore) {}
      }
      function getPersistedLevel() {
        var storedLevel;
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === undefinedType || !storageKey) return;
        try {
          storedLevel = window.localStorage[storageKey];
        } catch (ignore) {}

        // Fallback to cookies if local storage gives us nothing
        if (_typeof(storedLevel) === undefinedType) {
          try {
            var cookie = window.document.cookie;
            var cookieName = encodeURIComponent(storageKey);
            var location = cookie.indexOf(cookieName + "=");
            if (location !== -1) {
              storedLevel = /^([^;]+)/.exec(cookie.slice(location + cookieName.length + 1))[1];
            }
          } catch (ignore) {}
        }

        // If the stored level is not valid, treat it as if nothing was stored.
        if (self.levels[storedLevel] === undefined) {
          storedLevel = undefined;
        }
        return storedLevel;
      }
      function clearPersistedLevel() {
        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === undefinedType || !storageKey) return;

        // Use localStorage if available
        try {
          window.localStorage.removeItem(storageKey);
        } catch (ignore) {}

        // Use session cookie as fallback
        try {
          window.document.cookie = encodeURIComponent(storageKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
        } catch (ignore) {}
      }
      function normalizeLevel(input) {
        var level = input;
        if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
          level = self.levels[level.toUpperCase()];
        }
        if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
          return level;
        } else {
          throw new TypeError("log.setLevel() called with invalid level: " + input);
        }
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;
      self.levels = {
        "TRACE": 0,
        "DEBUG": 1,
        "INFO": 2,
        "WARN": 3,
        "ERROR": 4,
        "SILENT": 5
      };
      self.methodFactory = factory || defaultMethodFactory;
      self.getLevel = function () {
        if (userLevel != null) {
          return userLevel;
        } else if (defaultLevel != null) {
          return defaultLevel;
        } else {
          return inheritedLevel;
        }
      };
      self.setLevel = function (level, persist) {
        userLevel = normalizeLevel(level);
        if (persist !== false) {
          // defaults to true
          persistLevelIfPossible(userLevel);
        }

        // NOTE: in v2, this should call rebuild(), which updates children.
        return replaceLoggingMethods.call(self);
      };
      self.setDefaultLevel = function (level) {
        defaultLevel = normalizeLevel(level);
        if (!getPersistedLevel()) {
          self.setLevel(level, false);
        }
      };
      self.resetLevel = function () {
        userLevel = null;
        clearPersistedLevel();
        replaceLoggingMethods.call(self);
      };
      self.enableAll = function (persist) {
        self.setLevel(self.levels.TRACE, persist);
      };
      self.disableAll = function (persist) {
        self.setLevel(self.levels.SILENT, persist);
      };
      self.rebuild = function () {
        if (defaultLogger !== self) {
          inheritedLevel = normalizeLevel(defaultLogger.getLevel());
        }
        replaceLoggingMethods.call(self);
        if (defaultLogger === self) {
          for (var childName in _loggersByName) {
            _loggersByName[childName].rebuild();
          }
        }
      };

      // Initialize all the internal levels.
      inheritedLevel = normalizeLevel(defaultLogger ? defaultLogger.getLevel() : "WARN");
      var initialLevel = getPersistedLevel();
      if (initialLevel != null) {
        userLevel = normalizeLevel(initialLevel);
      }
      replaceLoggingMethods.call(self);
    }

    /*
     *
     * Top-level API
     *
     */

    defaultLogger = new Logger();
    defaultLogger.getLogger = function getLogger(name) {
      if (_typeof(name) !== "symbol" && typeof name !== "string" || name === "") {
        throw new TypeError("You must supply a name when creating a logger.");
      }
      var logger = _loggersByName[name];
      if (!logger) {
        logger = _loggersByName[name] = new Logger(name, defaultLogger.methodFactory);
      }
      return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window === "undefined" ? "undefined" : _typeof(window)) !== undefinedType ? window.log : undefined;
    defaultLogger.noConflict = function () {
      if ((typeof window === "undefined" ? "undefined" : _typeof(window)) !== undefinedType && window.log === defaultLogger) {
        window.log = _log;
      }
      return defaultLogger;
    };
    defaultLogger.getLoggers = function getLoggers() {
      return _loggersByName;
    };

    // ES6 default export, for compatibility
    defaultLogger['default'] = defaultLogger;
    return defaultLogger;
  });
})(loglevel);
var loglevelExports = loglevel.exports;

var LogLevel;
(function (LogLevel) {
  LogLevel[LogLevel["trace"] = 0] = "trace";
  LogLevel[LogLevel["debug"] = 1] = "debug";
  LogLevel[LogLevel["info"] = 2] = "info";
  LogLevel[LogLevel["warn"] = 3] = "warn";
  LogLevel[LogLevel["error"] = 4] = "error";
  LogLevel[LogLevel["silent"] = 5] = "silent";
})(LogLevel || (LogLevel = {}));
var LoggerNames;
(function (LoggerNames) {
  LoggerNames["Default"] = "livekit";
  LoggerNames["Room"] = "livekit-room";
  LoggerNames["Participant"] = "livekit-participant";
  LoggerNames["Track"] = "livekit-track";
  LoggerNames["Publication"] = "livekit-track-publication";
  LoggerNames["Engine"] = "livekit-engine";
  LoggerNames["Signal"] = "livekit-signal";
  LoggerNames["PCManager"] = "livekit-pc-manager";
  LoggerNames["PCTransport"] = "livekit-pc-transport";
  LoggerNames["E2EE"] = "lk-e2ee";
})(LoggerNames || (LoggerNames = {}));
var livekitLogger = loglevelExports.getLogger('livekit');
Object.values(LoggerNames).map(function (name) {
  return loglevelExports.getLogger(name);
});
livekitLogger.setDefaultLevel(LogLevel.info);
/**
 * @internal
 */
function getLogger(name) {
  var logger = loglevelExports.getLogger(name);
  logger.setDefaultLevel(livekitLogger.getLevel());
  return logger;
}
var workerLogger = loglevelExports.getLogger('lk-e2ee');

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Assert that condition is truthy or throw error (with message)
 */
function assert(condition, msg) {
  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions -- we want the implicit conversion to boolean
  if (!condition) {
    throw new Error(msg);
  }
}
var FLOAT32_MAX = 3.4028234663852886e38,
  FLOAT32_MIN = -3.4028234663852886e38,
  UINT32_MAX = 0xffffffff,
  INT32_MAX = 0x7fffffff,
  INT32_MIN = -0x80000000;
/**
 * Assert a valid signed protobuf 32-bit integer.
 */
function assertInt32(arg) {
  if (typeof arg !== "number") throw new Error("invalid int 32: " + _typeof(arg));
  if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error("invalid int 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
/**
 * Assert a valid unsigned protobuf 32-bit integer.
 */
function assertUInt32(arg) {
  if (typeof arg !== "number") throw new Error("invalid uint 32: " + _typeof(arg));
  if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error("invalid uint 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}
/**
 * Assert a valid protobuf float value.
 */
function assertFloat32(arg) {
  if (typeof arg !== "number") throw new Error("invalid float 32: " + _typeof(arg));
  if (!Number.isFinite(arg)) return;
  if (arg > FLOAT32_MAX || arg < FLOAT32_MIN) throw new Error("invalid float 32: " + arg); // eslint-disable-line @typescript-eslint/restrict-plus-operands -- we want the implicit conversion to string
}

var enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
/**
 * Get reflection information from a generated enum.
 * If this function is called on something other than a generated
 * enum, it raises an error.
 */
function getEnumType(enumObject) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-explicit-any
  var t = enumObject[enumTypeSymbol];
  assert(t, "missing enum type on enum object");
  return t; // eslint-disable-line @typescript-eslint/no-unsafe-return
}
/**
 * Sets reflection information on a generated enum.
 */
function setEnumType(enumObject, typeName, values, opt) {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any
  enumObject[enumTypeSymbol] = makeEnumType(typeName, values.map(function (v) {
    return {
      no: v.no,
      name: v.name,
      localName: enumObject[v.no]
    };
  }));
}
/**
 * Create a new EnumType with the given values.
 */
function makeEnumType(typeName, values,
// eslint-disable-next-line @typescript-eslint/no-unused-vars
_opt) {
  var names = Object.create(null);
  var numbers = Object.create(null);
  var normalValues = [];
  var _iterator = _createForOfIteratorHelper(values),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var value = _step.value;
      // We do not surface options at this time
      // const value: EnumValueInfo = {...v, options: v.options ?? emptyReadonlyObject};
      var n = normalizeEnumValue(value);
      normalValues.push(n);
      names[value.name] = n;
      numbers[value.no] = n;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return {
    typeName: typeName,
    values: normalValues,
    // We do not surface options at this time
    // options: opt?.options ?? Object.create(null),
    findName: function findName(name) {
      return names[name];
    },
    findNumber: function findNumber(no) {
      return numbers[no];
    }
  };
}
/**
 * Create a new enum object with the given values.
 * Sets reflection information.
 */
function makeEnum(typeName, values, opt) {
  var enumObject = {};
  var _iterator2 = _createForOfIteratorHelper(values),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var value = _step2.value;
      var n = normalizeEnumValue(value);
      enumObject[n.localName] = n.no;
      enumObject[n.no] = n.localName;
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  setEnumType(enumObject, typeName, values);
  return enumObject;
}
function normalizeEnumValue(value) {
  if ("localName" in value) {
    return value;
  }
  return Object.assign(Object.assign({}, value), {
    localName: value.name
  });
}

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Message is the base class of every message, generated, or created at
 * runtime.
 *
 * It is _not_ safe to extend this class. If you want to create a message at
 * run time, use proto3.makeMessageType().
 */
var Message = /*#__PURE__*/function () {
  function Message() {
    _classCallCheck(this, Message);
  }
  return _createClass(Message, [{
    key: "equals",
    value:
    /**
     * Compare with a message of the same type.
     * Note that this function disregards extensions and unknown fields.
     */
    function equals(other) {
      return this.getType().runtime.util.equals(this.getType(), this, other);
    }
    /**
     * Create a deep copy.
     */
  }, {
    key: "clone",
    value: function clone() {
      return this.getType().runtime.util.clone(this);
    }
    /**
     * Parse from binary data, merging fields.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
  }, {
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      var type = this.getType(),
        format = type.runtime.bin,
        opt = format.makeReadOptions(options);
      format.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);
      return this;
    }
    /**
     * Parse a message from a JSON value.
     */
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      var type = this.getType(),
        format = type.runtime.json,
        opt = format.makeReadOptions(options);
      format.readMessage(type, jsonValue, opt, this);
      return this;
    }
    /**
     * Parse a message from a JSON string.
     */
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      var json;
      try {
        json = JSON.parse(jsonString);
      } catch (e) {
        throw new Error("cannot decode ".concat(this.getType().typeName, " from JSON: ").concat(e instanceof Error ? e.message : String(e)));
      }
      return this.fromJson(json, options);
    }
    /**
     * Serialize the message to binary data.
     */
  }, {
    key: "toBinary",
    value: function toBinary(options) {
      var type = this.getType(),
        bin = type.runtime.bin,
        opt = bin.makeWriteOptions(options),
        writer = opt.writerFactory();
      bin.writeMessage(this, writer, opt);
      return writer.finish();
    }
    /**
     * Serialize the message to a JSON value, a JavaScript value that can be
     * passed to JSON.stringify().
     */
  }, {
    key: "toJson",
    value: function toJson(options) {
      var type = this.getType(),
        json = type.runtime.json,
        opt = json.makeWriteOptions(options);
      return json.writeMessage(this, opt);
    }
    /**
     * Serialize the message to a JSON string.
     */
  }, {
    key: "toJsonString",
    value: function toJsonString(options) {
      var _a;
      var value = this.toJson(options);
      return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);
    }
    /**
     * Override for serialization behavior. This will be invoked when calling
     * JSON.stringify on this message (i.e. JSON.stringify(msg)).
     *
     * Note that this will not serialize google.protobuf.Any with a packed
     * message because the protobuf JSON format specifies that it needs to be
     * unpacked, and this is only possible with a type registry to look up the
     * message type.  As a result, attempting to serialize a message with this
     * type will throw an Error.
     *
     * This method is protected because you should not need to invoke it
     * directly -- instead use JSON.stringify or toJsonString for
     * stringified JSON.  Alternatively, if actual JSON is desired, you should
     * use toJson.
     */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toJson({
        emitDefaultValues: true
      });
    }
    /**
     * Retrieve the MessageType of this message - a singleton that represents
     * the protobuf message declaration and provides metadata for reflection-
     * based operations.
     */
  }, {
    key: "getType",
    value: function getType() {
      // Any class that extends Message _must_ provide a complete static
      // implementation of MessageType.
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return
      return Object.getPrototypeOf(this).constructor;
    }
  }]);
}();

/**
 * Create a new message type using the given runtime.
 */
function makeMessageType(runtime, typeName, fields, opt) {
  var _a;
  var localName = (_a = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a !== void 0 ? _a : typeName.substring(typeName.lastIndexOf(".") + 1);
  var type = _defineProperty({}, localName, function (data) {
    runtime.util.initFields(this);
    runtime.util.initPartial(data, this);
  })[localName];
  Object.setPrototypeOf(type.prototype, new Message());
  Object.assign(type, {
    runtime: runtime,
    typeName: typeName,
    fields: runtime.util.newFieldList(fields),
    fromBinary: function fromBinary(bytes, options) {
      return new type().fromBinary(bytes, options);
    },
    fromJson: function fromJson(jsonValue, options) {
      return new type().fromJson(jsonValue, options);
    },
    fromJsonString: function fromJsonString(jsonString, options) {
      return new type().fromJsonString(jsonString, options);
    },
    equals: function equals(a, b) {
      return runtime.util.equals(type, a, b);
    }
  });
  return type;
}

// Copyright 2008 Google Inc.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
// * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Code generated by the Protocol Buffer compiler is owned by the owner
// of the input file used when generating it.  This code is not
// standalone and requires a support library to be linked with it.  This
// support library is itself covered by the above license.
/* eslint-disable prefer-const,@typescript-eslint/restrict-plus-operands */
/**
 * Read a 64 bit varint as two JS numbers.
 *
 * Returns tuple:
 * [0]: low bits
 * [1]: high bits
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175
 */
function varint64read() {
  var lowBits = 0;
  var highBits = 0;
  for (var shift = 0; shift < 28; shift += 7) {
    var b = this.buf[this.pos++];
    lowBits |= (b & 0x7f) << shift;
    if ((b & 0x80) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
  }
  var middleByte = this.buf[this.pos++];
  // last four bits of the first 32 bit number
  lowBits |= (middleByte & 0x0f) << 28;
  // 3 upper bits are part of the next 32 bit number
  highBits = (middleByte & 0x70) >> 4;
  if ((middleByte & 0x80) == 0) {
    this.assertBounds();
    return [lowBits, highBits];
  }
  for (var _shift = 3; _shift <= 31; _shift += 7) {
    var _b = this.buf[this.pos++];
    highBits |= (_b & 0x7f) << _shift;
    if ((_b & 0x80) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
  }
  throw new Error("invalid varint");
}
/**
 * Write a 64 bit varint, given as two JS numbers, to the given bytes array.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344
 */
function varint64write(lo, hi, bytes) {
  for (var i = 0; i < 28; i = i + 7) {
    var shift = lo >>> i;
    var hasNext = !(shift >>> 7 == 0 && hi == 0);
    var _byte = (hasNext ? shift | 0x80 : shift) & 0xff;
    bytes.push(_byte);
    if (!hasNext) {
      return;
    }
  }
  var splitBits = lo >>> 28 & 0x0f | (hi & 0x07) << 4;
  var hasMoreBits = !(hi >> 3 == 0);
  bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xff);
  if (!hasMoreBits) {
    return;
  }
  for (var _i = 3; _i < 31; _i = _i + 7) {
    var _shift2 = hi >>> _i;
    var _hasNext = !(_shift2 >>> 7 == 0);
    var _byte2 = (_hasNext ? _shift2 | 0x80 : _shift2) & 0xff;
    bytes.push(_byte2);
    if (!_hasNext) {
      return;
    }
  }
  bytes.push(hi >>> 31 & 0x01);
}
// constants for binary math
var TWO_PWR_32_DBL = 0x100000000;
/**
 * Parse decimal string of 64 bit integer value as two JS numbers.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64FromString(dec) {
  // Check for minus sign.
  var minus = dec[0] === "-";
  if (minus) {
    dec = dec.slice(1);
  }
  // Work 6 decimal digits at a time, acting like we're converting base 1e6
  // digits to binary. This is safe to do with floating point math because
  // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.
  var base = 1e6;
  var lowBits = 0;
  var highBits = 0;
  function add1e6digit(begin, end) {
    // Note: Number('') is 0.
    var digit1e6 = Number(dec.slice(begin, end));
    highBits *= base;
    lowBits = lowBits * base + digit1e6;
    // Carry bits from lowBits to
    if (lowBits >= TWO_PWR_32_DBL) {
      highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
      lowBits = lowBits % TWO_PWR_32_DBL;
    }
  }
  add1e6digit(-24, -18);
  add1e6digit(-18, -12);
  add1e6digit(-12, -6);
  add1e6digit(-6);
  return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
}
/**
 * Losslessly converts a 64-bit signed integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function int64ToString(lo, hi) {
  var bits = newBits(lo, hi);
  // If we're treating the input as a signed value and the high bit is set, do
  // a manual two's complement conversion before the decimal conversion.
  var negative = bits.hi & 0x80000000;
  if (negative) {
    bits = negate(bits.lo, bits.hi);
  }
  var result = uInt64ToString(bits.lo, bits.hi);
  return negative ? "-" + result : result;
}
/**
 * Losslessly converts a 64-bit unsigned integer in 32:32 split representation
 * into a decimal string.
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf-javascript/blob/a428c58273abad07c66071d9753bc4d1289de426/experimental/runtime/int64.js#L10
 */
function uInt64ToString(lo, hi) {
  // Skip the expensive conversion if the number is small enough to use the
  // built-in conversions.
  // Number.MAX_SAFE_INTEGER = 0x001FFFFF FFFFFFFF, thus any number with
  // highBits <= 0x1FFFFF can be safely expressed with a double and retain
  // integer precision.
  // Proven by: Number.isSafeInteger(0x1FFFFF * 2**32 + 0xFFFFFFFF) == true.
  var _toUnsigned = toUnsigned(lo, hi);
  lo = _toUnsigned.lo;
  hi = _toUnsigned.hi;
  if (hi <= 0x1FFFFF) {
    return String(TWO_PWR_32_DBL * hi + lo);
  }
  // What this code is doing is essentially converting the input number from
  // base-2 to base-1e7, which allows us to represent the 64-bit range with
  // only 3 (very large) digits. Those digits are then trivial to convert to
  // a base-10 string.
  // The magic numbers used here are -
  // 2^24 = 16777216 = (1,6777216) in base-1e7.
  // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.
  // Split 32:32 representation into 16:24:24 representation so our
  // intermediate digits don't overflow.
  var low = lo & 0xFFFFFF;
  var mid = (lo >>> 24 | hi << 8) & 0xFFFFFF;
  var high = hi >> 16 & 0xFFFF;
  // Assemble our three base-1e7 digits, ignoring carries. The maximum
  // value in a digit at this step is representable as a 48-bit integer, which
  // can be stored in a 64-bit floating point number.
  var digitA = low + mid * 6777216 + high * 6710656;
  var digitB = mid + high * 8147497;
  var digitC = high * 2;
  // Apply carries from A to B and from B to C.
  var base = 10000000;
  if (digitA >= base) {
    digitB += Math.floor(digitA / base);
    digitA %= base;
  }
  if (digitB >= base) {
    digitC += Math.floor(digitB / base);
    digitB %= base;
  }
  // If digitC is 0, then we should have returned in the trivial code path
  // at the top for non-safe integers. Given this, we can assume both digitB
  // and digitA need leading zeros.
  return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
}
function toUnsigned(lo, hi) {
  return {
    lo: lo >>> 0,
    hi: hi >>> 0
  };
}
function newBits(lo, hi) {
  return {
    lo: lo | 0,
    hi: hi | 0
  };
}
/**
 * Returns two's compliment negation of input.
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers
 */
function negate(lowBits, highBits) {
  highBits = ~highBits;
  if (lowBits) {
    lowBits = ~lowBits + 1;
  } else {
    // If lowBits is 0, then bitwise-not is 0xFFFFFFFF,
    // adding 1 to that, results in 0x100000000, which leaves
    // the low bits 0x0 and simply adds one to the high bits.
    highBits += 1;
  }
  return newBits(lowBits, highBits);
}
/**
 * Returns decimal representation of digit1e7 with leading zeros.
 */
var decimalFrom1e7WithLeadingZeros = function decimalFrom1e7WithLeadingZeros(digit1e7) {
  var partial = String(digit1e7);
  return "0000000".slice(partial.length) + partial;
};
/**
 * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`
 *
 * Copyright 2008 Google Inc.  All rights reserved.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144
 */
function varint32write(value, bytes) {
  if (value >= 0) {
    // write value as varint 32
    while (value > 0x7f) {
      bytes.push(value & 0x7f | 0x80);
      value = value >>> 7;
    }
    bytes.push(value);
  } else {
    for (var i = 0; i < 9; i++) {
      bytes.push(value & 127 | 128);
      value = value >> 7;
    }
    bytes.push(1);
  }
}
/**
 * Read an unsigned 32 bit varint.
 *
 * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220
 */
function varint32read() {
  var b = this.buf[this.pos++];
  var result = b & 0x7f;
  if ((b & 0x80) == 0) {
    this.assertBounds();
    return result;
  }
  b = this.buf[this.pos++];
  result |= (b & 0x7f) << 7;
  if ((b & 0x80) == 0) {
    this.assertBounds();
    return result;
  }
  b = this.buf[this.pos++];
  result |= (b & 0x7f) << 14;
  if ((b & 0x80) == 0) {
    this.assertBounds();
    return result;
  }
  b = this.buf[this.pos++];
  result |= (b & 0x7f) << 21;
  if ((b & 0x80) == 0) {
    this.assertBounds();
    return result;
  }
  // Extract only last 4 bits
  b = this.buf[this.pos++];
  result |= (b & 0x0f) << 28;
  for (var readBytes = 5; (b & 0x80) !== 0 && readBytes < 10; readBytes++) b = this.buf[this.pos++];
  if ((b & 0x80) != 0) throw new Error("invalid varint");
  this.assertBounds();
  // Result can have 32 bits, convert it to unsigned
  return result >>> 0;
}

function makeInt64Support() {
  var dv = new DataView(new ArrayBuffer(8));
  // note that Safari 14 implements BigInt, but not the DataView methods
  var ok = typeof BigInt === "function" && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && ((typeof process === "undefined" ? "undefined" : _typeof(process)) != "object" || _typeof(process.env) != "object" || process.env.BUF_BIGINT_DISABLE !== "1");
  if (ok) {
    var MIN = BigInt("-9223372036854775808"),
      MAX = BigInt("9223372036854775807"),
      UMIN = BigInt("0"),
      UMAX = BigInt("18446744073709551615");
    return {
      zero: BigInt(0),
      supported: true,
      parse: function parse(value) {
        var bi = typeof value == "bigint" ? value : BigInt(value);
        if (bi > MAX || bi < MIN) {
          throw new Error("int64 invalid: ".concat(value));
        }
        return bi;
      },
      uParse: function uParse(value) {
        var bi = typeof value == "bigint" ? value : BigInt(value);
        if (bi > UMAX || bi < UMIN) {
          throw new Error("uint64 invalid: ".concat(value));
        }
        return bi;
      },
      enc: function enc(value) {
        dv.setBigInt64(0, this.parse(value), true);
        return {
          lo: dv.getInt32(0, true),
          hi: dv.getInt32(4, true)
        };
      },
      uEnc: function uEnc(value) {
        dv.setBigInt64(0, this.uParse(value), true);
        return {
          lo: dv.getInt32(0, true),
          hi: dv.getInt32(4, true)
        };
      },
      dec: function dec(lo, hi) {
        dv.setInt32(0, lo, true);
        dv.setInt32(4, hi, true);
        return dv.getBigInt64(0, true);
      },
      uDec: function uDec(lo, hi) {
        dv.setInt32(0, lo, true);
        dv.setInt32(4, hi, true);
        return dv.getBigUint64(0, true);
      }
    };
  }
  var assertInt64String = function assertInt64String(value) {
    return assert(/^-?[0-9]+$/.test(value), "int64 invalid: ".concat(value));
  };
  var assertUInt64String = function assertUInt64String(value) {
    return assert(/^[0-9]+$/.test(value), "uint64 invalid: ".concat(value));
  };
  return {
    zero: "0",
    supported: false,
    parse: function parse(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertInt64String(value);
      return value;
    },
    uParse: function uParse(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertUInt64String(value);
      return value;
    },
    enc: function enc(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertInt64String(value);
      return int64FromString(value);
    },
    uEnc: function uEnc(value) {
      if (typeof value != "string") {
        value = value.toString();
      }
      assertUInt64String(value);
      return int64FromString(value);
    },
    dec: function dec(lo, hi) {
      return int64ToString(lo, hi);
    },
    uDec: function uDec(lo, hi) {
      return uInt64ToString(lo, hi);
    }
  };
}
var protoInt64 = makeInt64Support();

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Scalar value types. This is a subset of field types declared by protobuf
 * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE
 * are omitted, but the numerical values are identical.
 */
var ScalarType;
(function (ScalarType) {
  // 0 is reserved for errors.
  // Order is weird for historical reasons.
  ScalarType[ScalarType["DOUBLE"] = 1] = "DOUBLE";
  ScalarType[ScalarType["FLOAT"] = 2] = "FLOAT";
  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
  // negative values are likely.
  ScalarType[ScalarType["INT64"] = 3] = "INT64";
  ScalarType[ScalarType["UINT64"] = 4] = "UINT64";
  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
  // negative values are likely.
  ScalarType[ScalarType["INT32"] = 5] = "INT32";
  ScalarType[ScalarType["FIXED64"] = 6] = "FIXED64";
  ScalarType[ScalarType["FIXED32"] = 7] = "FIXED32";
  ScalarType[ScalarType["BOOL"] = 8] = "BOOL";
  ScalarType[ScalarType["STRING"] = 9] = "STRING";
  // Tag-delimited aggregate.
  // Group type is deprecated and not supported in proto3. However, Proto3
  // implementations should still be able to parse the group wire format and
  // treat group fields as unknown fields.
  // TYPE_GROUP = 10,
  // TYPE_MESSAGE = 11,  // Length-delimited aggregate.
  // New in version 2.
  ScalarType[ScalarType["BYTES"] = 12] = "BYTES";
  ScalarType[ScalarType["UINT32"] = 13] = "UINT32";
  // TYPE_ENUM = 14,
  ScalarType[ScalarType["SFIXED32"] = 15] = "SFIXED32";
  ScalarType[ScalarType["SFIXED64"] = 16] = "SFIXED64";
  ScalarType[ScalarType["SINT32"] = 17] = "SINT32";
  ScalarType[ScalarType["SINT64"] = 18] = "SINT64";
})(ScalarType || (ScalarType = {}));
/**
 * JavaScript representation of fields with 64 bit integral types (int64, uint64,
 * sint64, fixed64, sfixed64).
 *
 * This is a subset of google.protobuf.FieldOptions.JSType, which defines JS_NORMAL,
 * JS_STRING, and JS_NUMBER. Protobuf-ES uses BigInt by default, but will use
 * String if `[jstype = JS_STRING]` is specified.
 *
 * ```protobuf
 * uint64 field_a = 1; // BigInt
 * uint64 field_b = 2 [jstype = JS_NORMAL]; // BigInt
 * uint64 field_b = 2 [jstype = JS_NUMBER]; // BigInt
 * uint64 field_b = 2 [jstype = JS_STRING]; // String
 * ```
 */
var LongType;
(function (LongType) {
  /**
   * Use JavaScript BigInt.
   */
  LongType[LongType["BIGINT"] = 0] = "BIGINT";
  /**
   * Use JavaScript String.
   *
   * Field option `[jstype = JS_STRING]`.
   */
  LongType[LongType["STRING"] = 1] = "STRING";
})(LongType || (LongType = {}));

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Returns true if both scalar values are equal.
 */
function scalarEquals(type, a, b) {
  if (a === b) {
    // This correctly matches equal values except BYTES and (possibly) 64-bit integers.
    return true;
  }
  // Special case BYTES - we need to compare each byte individually
  if (type == ScalarType.BYTES) {
    if (!(a instanceof Uint8Array) || !(b instanceof Uint8Array)) {
      return false;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }
    return true;
  }
  // Special case 64-bit integers - we support number, string and bigint representation.
  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
  switch (type) {
    case ScalarType.UINT64:
    case ScalarType.FIXED64:
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      // Loose comparison will match between 0n, 0 and "0".
      return a == b;
  }
  // Anything that hasn't been caught by strict comparison or special cased
  // BYTES and 64-bit integers is not equal.
  return false;
}
/**
 * Returns the zero value for the given scalar type.
 */
function scalarZeroValue(type, longType) {
  switch (type) {
    case ScalarType.BOOL:
      return false;
    case ScalarType.UINT64:
    case ScalarType.FIXED64:
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests
      return longType == 0 ? protoInt64.zero : "0";
    case ScalarType.DOUBLE:
    case ScalarType.FLOAT:
      return 0.0;
    case ScalarType.BYTES:
      return new Uint8Array(0);
    case ScalarType.STRING:
      return "";
    default:
      // Handles INT32, UINT32, SINT32, FIXED32, SFIXED32.
      // We do not use individual cases to save a few bytes code size.
      return 0;
  }
}
/**
 * Returns true for a zero-value. For example, an integer has the zero-value `0`,
 * a boolean is `false`, a string is `""`, and bytes is an empty Uint8Array.
 *
 * In proto3, zero-values are not written to the wire, unless the field is
 * optional or repeated.
 */
function isScalarZeroValue(type, value) {
  switch (type) {
    case ScalarType.BOOL:
      return value === false;
    case ScalarType.STRING:
      return value === "";
    case ScalarType.BYTES:
      return value instanceof Uint8Array && !value.byteLength;
    default:
      return value == 0;
    // Loose comparison matches 0n, 0 and "0"
  }
}

/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/restrict-plus-operands */
/**
 * Protobuf binary format wire types.
 *
 * A wire type provides just enough information to find the length of the
 * following value.
 *
 * See https://developers.google.com/protocol-buffers/docs/encoding#structure
 */
var WireType;
(function (WireType) {
  /**
   * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum
   */
  WireType[WireType["Varint"] = 0] = "Varint";
  /**
   * Used for fixed64, sfixed64, double.
   * Always 8 bytes with little-endian byte order.
   */
  WireType[WireType["Bit64"] = 1] = "Bit64";
  /**
   * Used for string, bytes, embedded messages, packed repeated fields
   *
   * Only repeated numeric types (types which use the varint, 32-bit,
   * or 64-bit wire types) can be packed. In proto3, such fields are
   * packed by default.
   */
  WireType[WireType["LengthDelimited"] = 2] = "LengthDelimited";
  /**
   * Start of a tag-delimited aggregate, such as a proto2 group, or a message
   * in editions with message_encoding = DELIMITED.
   */
  WireType[WireType["StartGroup"] = 3] = "StartGroup";
  /**
   * End of a tag-delimited aggregate.
   */
  WireType[WireType["EndGroup"] = 4] = "EndGroup";
  /**
   * Used for fixed32, sfixed32, float.
   * Always 4 bytes with little-endian byte order.
   */
  WireType[WireType["Bit32"] = 5] = "Bit32";
})(WireType || (WireType = {}));
var BinaryWriter = /*#__PURE__*/function () {
  function BinaryWriter(textEncoder) {
    _classCallCheck(this, BinaryWriter);
    /**
     * Previous fork states.
     */
    this.stack = [];
    this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
    this.chunks = [];
    this.buf = [];
  }
  /**
   * Return all bytes written and reset this writer.
   */
  return _createClass(BinaryWriter, [{
    key: "finish",
    value: function finish() {
      this.chunks.push(new Uint8Array(this.buf)); // flush the buffer
      var len = 0;
      for (var i = 0; i < this.chunks.length; i++) len += this.chunks[i].length;
      var bytes = new Uint8Array(len);
      var offset = 0;
      for (var _i = 0; _i < this.chunks.length; _i++) {
        bytes.set(this.chunks[_i], offset);
        offset += this.chunks[_i].length;
      }
      this.chunks = [];
      return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
  }, {
    key: "fork",
    value: function fork() {
      this.stack.push({
        chunks: this.chunks,
        buf: this.buf
      });
      this.chunks = [];
      this.buf = [];
      return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
  }, {
    key: "join",
    value: function join() {
      // get chunk of fork
      var chunk = this.finish();
      // restore previous state
      var prev = this.stack.pop();
      if (!prev) throw new Error("invalid state, fork stack empty");
      this.chunks = prev.chunks;
      this.buf = prev.buf;
      // write length of chunk as varint
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
  }, {
    key: "tag",
    value: function tag(fieldNo, type) {
      return this.uint32((fieldNo << 3 | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
  }, {
    key: "raw",
    value: function raw(chunk) {
      if (this.buf.length) {
        this.chunks.push(new Uint8Array(this.buf));
        this.buf = [];
      }
      this.chunks.push(chunk);
      return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
  }, {
    key: "uint32",
    value: function uint32(value) {
      assertUInt32(value);
      // write value as varint 32, inlined for speed
      while (value > 0x7f) {
        this.buf.push(value & 0x7f | 0x80);
        value = value >>> 7;
      }
      this.buf.push(value);
      return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
  }, {
    key: "int32",
    value: function int32(value) {
      assertInt32(value);
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
  }, {
    key: "bool",
    value: function bool(value) {
      this.buf.push(value ? 1 : 0);
      return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
  }, {
    key: "bytes",
    value: function bytes(value) {
      this.uint32(value.byteLength); // write length of chunk as varint
      return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
  }, {
    key: "string",
    value: function string(value) {
      var chunk = this.textEncoder.encode(value);
      this.uint32(chunk.byteLength); // write length of chunk as varint
      return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
  }, {
    key: "float",
    value: function _float(value) {
      assertFloat32(value);
      var chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setFloat32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
  }, {
    key: "double",
    value: function _double(value) {
      var chunk = new Uint8Array(8);
      new DataView(chunk.buffer).setFloat64(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
  }, {
    key: "fixed32",
    value: function fixed32(value) {
      assertUInt32(value);
      var chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setUint32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
  }, {
    key: "sfixed32",
    value: function sfixed32(value) {
      assertInt32(value);
      var chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setInt32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
  }, {
    key: "sint32",
    value: function sint32(value) {
      assertInt32(value);
      // zigzag encode
      value = (value << 1 ^ value >> 31) >>> 0;
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
  }, {
    key: "sfixed64",
    value: function sfixed64(value) {
      var chunk = new Uint8Array(8),
        view = new DataView(chunk.buffer),
        tc = protoInt64.enc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
  }, {
    key: "fixed64",
    value: function fixed64(value) {
      var chunk = new Uint8Array(8),
        view = new DataView(chunk.buffer),
        tc = protoInt64.uEnc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
  }, {
    key: "int64",
    value: function int64(value) {
      var tc = protoInt64.enc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
  }, {
    key: "sint64",
    value: function sint64(value) {
      var tc = protoInt64.enc(value),
        // zigzag encode
        sign = tc.hi >> 31,
        lo = tc.lo << 1 ^ sign,
        hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
      varint64write(lo, hi, this.buf);
      return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
  }, {
    key: "uint64",
    value: function uint64(value) {
      var tc = protoInt64.uEnc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
  }]);
}();
var BinaryReader = /*#__PURE__*/function () {
  function BinaryReader(buf, textDecoder) {
    _classCallCheck(this, BinaryReader);
    this.varint64 = varint64read; // dirty cast for `this`
    /**
     * Read a `uint32` field, an unsigned 32 bit varint.
     */
    this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`
    this.buf = buf;
    this.len = buf.length;
    this.pos = 0;
    this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
    this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();
  }
  /**
   * Reads a tag - field number and wire type.
   */
  return _createClass(BinaryReader, [{
    key: "tag",
    value: function tag() {
      var tag = this.uint32(),
        fieldNo = tag >>> 3,
        wireType = tag & 7;
      if (fieldNo <= 0 || wireType < 0 || wireType > 5) throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
      return [fieldNo, wireType];
    }
    /**
     * Skip one element and return the skipped data.
     *
     * When skipping StartGroup, provide the tags field number to check for
     * matching field number in the EndGroup tag.
     */
  }, {
    key: "skip",
    value: function skip(wireType, fieldNo) {
      var start = this.pos;
      switch (wireType) {
        case WireType.Varint:
          while (this.buf[this.pos++] & 0x80) {
            // ignore
          }
          break;
        // eslint-disable-next-line
        // @ts-ignore TS7029: Fallthrough case in switch
        case WireType.Bit64:
          this.pos += 4;
        // eslint-disable-next-line
        // @ts-ignore TS7029: Fallthrough case in switch
        case WireType.Bit32:
          this.pos += 4;
          break;
        case WireType.LengthDelimited:
          var len = this.uint32();
          this.pos += len;
          break;
        case WireType.StartGroup:
          for (;;) {
            var _this$tag = this.tag(),
              _this$tag2 = _slicedToArray(_this$tag, 2),
              fn = _this$tag2[0],
              wt = _this$tag2[1];
            if (wt === WireType.EndGroup) {
              if (fieldNo !== undefined && fn !== fieldNo) {
                throw new Error("invalid end group tag");
              }
              break;
            }
            this.skip(wt, fn);
          }
          break;
        default:
          throw new Error("cant skip wire type " + wireType);
      }
      this.assertBounds();
      return this.buf.subarray(start, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
  }, {
    key: "assertBounds",
    value: function assertBounds() {
      if (this.pos > this.len) throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
  }, {
    key: "int32",
    value: function int32() {
      return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
  }, {
    key: "sint32",
    value: function sint32() {
      var zze = this.uint32();
      // decode zigzag
      return zze >>> 1 ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
  }, {
    key: "int64",
    value: function int64() {
      return protoInt64.dec.apply(protoInt64, _toConsumableArray(this.varint64()));
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
  }, {
    key: "uint64",
    value: function uint64() {
      return protoInt64.uDec.apply(protoInt64, _toConsumableArray(this.varint64()));
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
  }, {
    key: "sint64",
    value: function sint64() {
      var _this$varint = this.varint64(),
        _this$varint2 = _slicedToArray(_this$varint, 2),
        lo = _this$varint2[0],
        hi = _this$varint2[1];
      // decode zig zag
      var s = -(lo & 1);
      lo = (lo >>> 1 | (hi & 1) << 31) ^ s;
      hi = hi >>> 1 ^ s;
      return protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
  }, {
    key: "bool",
    value: function bool() {
      var _this$varint3 = this.varint64(),
        _this$varint4 = _slicedToArray(_this$varint3, 2),
        lo = _this$varint4[0],
        hi = _this$varint4[1];
      return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
  }, {
    key: "fixed32",
    value: function fixed32() {
      return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
  }, {
    key: "sfixed32",
    value: function sfixed32() {
      return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
  }, {
    key: "fixed64",
    value: function fixed64() {
      return protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
  }, {
    key: "sfixed64",
    value: function sfixed64() {
      return protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
  }, {
    key: "float",
    value: function _float2() {
      return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
  }, {
    key: "double",
    value: function _double2() {
      return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
  }, {
    key: "bytes",
    value: function bytes() {
      var len = this.uint32(),
        start = this.pos;
      this.pos += len;
      this.assertBounds();
      return this.buf.subarray(start, start + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
  }, {
    key: "string",
    value: function string() {
      return this.textDecoder.decode(this.bytes());
    }
  }]);
}();

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Create a new extension using the given runtime.
 */
function makeExtension(runtime, typeName, extendee, field) {
  var fi;
  return {
    typeName: typeName,
    extendee: extendee,
    get field() {
      if (!fi) {
        var i = typeof field == "function" ? field() : field;
        i.name = typeName.split(".").pop();
        i.jsonName = "[".concat(typeName, "]");
        fi = runtime.util.newFieldList([i]).list()[0];
      }
      return fi;
    },
    runtime: runtime
  };
}
/**
 * Create a container that allows us to read extension fields into it with the
 * same logic as regular fields.
 */
function createExtensionContainer(extension) {
  var localName = extension.field.localName;
  var container = Object.create(null);
  container[localName] = initExtensionField(extension);
  return [container, function () {
    return container[localName];
  }];
}
function initExtensionField(ext) {
  var field = ext.field;
  if (field.repeated) {
    return [];
  }
  if (field["default"] !== undefined) {
    return field["default"];
  }
  switch (field.kind) {
    case "enum":
      return field.T.values[0].no;
    case "scalar":
      return scalarZeroValue(field.T, field.L);
    case "message":
      // eslint-disable-next-line no-case-declarations
      var T = field.T,
        value = new T();
      return T.fieldWrapper ? T.fieldWrapper.unwrapField(value) : value;
    case "map":
      throw "map fields are not allowed to be extensions";
  }
}
/**
 * Helper to filter unknown fields, optimized based on field type.
 */
function filterUnknownFields(unknownFields, field) {
  if (!field.repeated && (field.kind == "enum" || field.kind == "scalar")) {
    // singular scalar fields do not merge, we pick the last
    for (var i = unknownFields.length - 1; i >= 0; --i) {
      if (unknownFields[i].no == field.no) {
        return [unknownFields[i]];
      }
    }
    return [];
  }
  return unknownFields.filter(function (uf) {
    return uf.no === field.no;
  });
}

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/* eslint-disable @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unnecessary-condition, prefer-const */
// lookup table from base64 character to byte
var encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
// lookup table from base64 character *code* to byte because lookup by number is fast
var decTable = [];
for (var i = 0; i < encTable.length; i++) decTable[encTable[i].charCodeAt(0)] = i;
// support base64url variants
decTable["-".charCodeAt(0)] = encTable.indexOf("+");
decTable["_".charCodeAt(0)] = encTable.indexOf("/");
var protoBase64 = {
  /**
   * Decodes a base64 string to a byte array.
   *
   * - ignores white-space, including line breaks and tabs
   * - allows inner padding (can decode concatenated base64 strings)
   * - does not require padding
   * - understands base64url encoding:
   *   "-" instead of "+",
   *   "_" instead of "/",
   *   no padding
   */
  dec: function dec(base64Str) {
    // estimate byte size, not accounting for inner padding and whitespace
    var es = base64Str.length * 3 / 4;
    if (base64Str[base64Str.length - 2] == "=") es -= 2;else if (base64Str[base64Str.length - 1] == "=") es -= 1;
    var bytes = new Uint8Array(es),
      bytePos = 0,
      // position in byte array
      groupPos = 0,
      // position in base64 group
      b,
      // current byte
      p = 0; // previous byte
    for (var _i = 0; _i < base64Str.length; _i++) {
      b = decTable[base64Str.charCodeAt(_i)];
      if (b === undefined) {
        switch (base64Str[_i]) {
          // @ts-ignore TS7029: Fallthrough case in switch
          case "=":
            groupPos = 0;
          // reset state when padding found
          // @ts-ignore TS7029: Fallthrough case in switch
          case "\n":
          case "\r":
          case "\t":
          case " ":
            continue;
          // skip white-space, and padding
          default:
            throw Error("invalid base64 string.");
        }
      }
      switch (groupPos) {
        case 0:
          p = b;
          groupPos = 1;
          break;
        case 1:
          bytes[bytePos++] = p << 2 | (b & 48) >> 4;
          p = b;
          groupPos = 2;
          break;
        case 2:
          bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;
          p = b;
          groupPos = 3;
          break;
        case 3:
          bytes[bytePos++] = (p & 3) << 6 | b;
          groupPos = 0;
          break;
      }
    }
    if (groupPos == 1) throw Error("invalid base64 string.");
    return bytes.subarray(0, bytePos);
  },
  /**
   * Encode a byte array to a base64 string.
   */
  enc: function enc(bytes) {
    var base64 = "",
      groupPos = 0,
      // position in base64 group
      b,
      // current byte
      p = 0; // carry over from previous byte
    for (var _i2 = 0; _i2 < bytes.length; _i2++) {
      b = bytes[_i2];
      switch (groupPos) {
        case 0:
          base64 += encTable[b >> 2];
          p = (b & 3) << 4;
          groupPos = 1;
          break;
        case 1:
          base64 += encTable[p | b >> 4];
          p = (b & 15) << 2;
          groupPos = 2;
          break;
        case 2:
          base64 += encTable[p | b >> 6];
          base64 += encTable[b & 63];
          groupPos = 0;
          break;
      }
    }
    // add output padding
    if (groupPos) {
      base64 += encTable[p];
      base64 += "=";
      if (groupPos == 1) base64 += "=";
    }
    return base64;
  }
};

/**
 * Retrieve an extension value from a message.
 *
 * The function never returns undefined. Use hasExtension() to check whether an
 * extension is set. If the extension is not set, this function returns the
 * default value (if one was specified in the protobuf source), or the zero value
 * (for example `0` for numeric types, `[]` for repeated extension fields, and
 * an empty message instance for message fields).
 *
 * Extensions are stored as unknown fields on a message. To mutate an extension
 * value, make sure to store the new value with setExtension() after mutating.
 *
 * If the extension does not extend the given message, an error is raised.
 */
function getExtension(message, extension, options) {
  assertExtendee(extension, message);
  var opt = extension.runtime.bin.makeReadOptions(options);
  var ufs = filterUnknownFields(message.getType().runtime.bin.listUnknownFields(message), extension.field);
  var _createExtensionConta = createExtensionContainer(extension),
    _createExtensionConta2 = _slicedToArray(_createExtensionConta, 2),
    container = _createExtensionConta2[0],
    get = _createExtensionConta2[1];
  var _iterator = _createForOfIteratorHelper(ufs),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var uf = _step.value;
      extension.runtime.bin.readField(container, opt.readerFactory(uf.data), extension.field, uf.wireType, opt);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return get();
}
/**
 * Set an extension value on a message. If the message already has a value for
 * this extension, the value is replaced.
 *
 * If the extension does not extend the given message, an error is raised.
 */
function setExtension(message, extension, value, options) {
  assertExtendee(extension, message);
  var readOpt = extension.runtime.bin.makeReadOptions(options);
  var writeOpt = extension.runtime.bin.makeWriteOptions(options);
  if (hasExtension(message, extension)) {
    var ufs = message.getType().runtime.bin.listUnknownFields(message).filter(function (uf) {
      return uf.no != extension.field.no;
    });
    message.getType().runtime.bin.discardUnknownFields(message);
    var _iterator2 = _createForOfIteratorHelper(ufs),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var uf = _step2.value;
        message.getType().runtime.bin.onUnknownField(message, uf.no, uf.wireType, uf.data);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  var writer = writeOpt.writerFactory();
  var f = extension.field;
  // Implicit presence does not apply to extensions, see https://github.com/protocolbuffers/protobuf/issues/8234
  // We patch the field info to use explicit presence:
  if (!f.opt && !f.repeated && (f.kind == "enum" || f.kind == "scalar")) {
    f = Object.assign(Object.assign({}, extension.field), {
      opt: true
    });
  }
  extension.runtime.bin.writeField(f, value, writer, writeOpt);
  var reader = readOpt.readerFactory(writer.finish());
  while (reader.pos < reader.len) {
    var _reader$tag = reader.tag(),
      _reader$tag2 = _slicedToArray(_reader$tag, 2),
      no = _reader$tag2[0],
      wireType = _reader$tag2[1];
    var data = reader.skip(wireType, no);
    message.getType().runtime.bin.onUnknownField(message, no, wireType, data);
  }
}
/**
 * Check whether an extension is set on a message.
 */
function hasExtension(message, extension) {
  var messageType = message.getType();
  return extension.extendee.typeName === messageType.typeName && !!messageType.runtime.bin.listUnknownFields(message).find(function (uf) {
    return uf.no == extension.field.no;
  });
}
function assertExtendee(extension, message) {
  assert(extension.extendee.typeName == message.getType().typeName, "extension ".concat(extension.typeName, " can only be applied to message ").concat(extension.extendee.typeName));
}

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Returns true if the field is set.
 */
function isFieldSet(field, target) {
  var localName = field.localName;
  if (field.repeated) {
    return target[localName].length > 0;
  }
  if (field.oneof) {
    return target[field.oneof.localName]["case"] === localName; // eslint-disable-line @typescript-eslint/no-unsafe-member-access
  }
  switch (field.kind) {
    case "enum":
    case "scalar":
      if (field.opt || field.req) {
        // explicit presence
        return target[localName] !== undefined;
      }
      // implicit presence
      if (field.kind == "enum") {
        return target[localName] !== field.T.values[0].no;
      }
      return !isScalarZeroValue(field.T, target[localName]);
    case "message":
      return target[localName] !== undefined;
    case "map":
      return Object.keys(target[localName]).length > 0;
    // eslint-disable-line @typescript-eslint/no-unsafe-argument
  }
}
/**
 * Resets the field, so that isFieldSet() will return false.
 */
function clearField(field, target) {
  var localName = field.localName;
  var implicitPresence = !field.opt && !field.req;
  if (field.repeated) {
    target[localName] = [];
  } else if (field.oneof) {
    target[field.oneof.localName] = {
      "case": undefined
    };
  } else {
    switch (field.kind) {
      case "map":
        target[localName] = {};
        break;
      case "enum":
        target[localName] = implicitPresence ? field.T.values[0].no : undefined;
        break;
      case "scalar":
        target[localName] = implicitPresence ? scalarZeroValue(field.T, field.L) : undefined;
        break;
      case "message":
        target[localName] = undefined;
        break;
    }
  }
}

/**
 * Check whether the given object is any subtype of Message or is a specific
 * Message by passing the type.
 *
 * Just like `instanceof`, `isMessage` narrows the type. The advantage of
 * `isMessage` is that it compares identity by the message type name, not by
 * class identity. This makes it robust against the dual package hazard and
 * similar situations, where the same message is duplicated.
 *
 * This function is _mostly_ equivalent to the `instanceof` operator. For
 * example, `isMessage(foo, MyMessage)` is the same as `foo instanceof MyMessage`,
 * and `isMessage(foo)` is the same as `foo instanceof Message`. In most cases,
 * `isMessage` should be preferred over `instanceof`.
 *
 * However, due to the fact that `isMessage` does not use class identity, there
 * are subtle differences between this function and `instanceof`. Notably,
 * calling `isMessage` on an explicit type of Message will return false.
 */
function isMessage(arg, type) {
  if (arg === null || _typeof(arg) != "object") {
    return false;
  }
  if (!Object.getOwnPropertyNames(Message.prototype).every(function (m) {
    return m in arg && typeof arg[m] == "function";
  })) {
    return false;
  }
  var actualType = arg.getType();
  if (actualType === null || typeof actualType != "function" || !("typeName" in actualType) || typeof actualType.typeName != "string") {
    return false;
  }
  return type === undefined ? true : actualType.typeName == type.typeName;
}

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * Wrap a primitive message field value in its corresponding wrapper
 * message. This function is idempotent.
 */
function wrapField(type, value) {
  if (isMessage(value) || !type.fieldWrapper) {
    return value;
  }
  return type.fieldWrapper.wrapField(value);
}
({
  "google.protobuf.DoubleValue": ScalarType.DOUBLE,
  "google.protobuf.FloatValue": ScalarType.FLOAT,
  "google.protobuf.Int64Value": ScalarType.INT64,
  "google.protobuf.UInt64Value": ScalarType.UINT64,
  "google.protobuf.Int32Value": ScalarType.INT32,
  "google.protobuf.UInt32Value": ScalarType.UINT32,
  "google.protobuf.BoolValue": ScalarType.BOOL,
  "google.protobuf.StringValue": ScalarType.STRING,
  "google.protobuf.BytesValue": ScalarType.BYTES
});

/* eslint-disable no-case-declarations,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call */
// Default options for parsing JSON.
var jsonReadDefaults = {
  ignoreUnknownFields: false
};
// Default options for serializing to JSON.
var jsonWriteDefaults = {
  emitDefaultValues: false,
  enumAsInteger: false,
  useProtoFieldName: false,
  prettySpaces: 0
};
function makeReadOptions$1(options) {
  return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;
}
function makeWriteOptions$1(options) {
  return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;
}
var tokenNull = Symbol();
var tokenIgnoredUnknownEnum = Symbol();
function makeJsonFormat() {
  return {
    makeReadOptions: makeReadOptions$1,
    makeWriteOptions: makeWriteOptions$1,
    readMessage: function readMessage(type, json, options, message) {
      if (json == null || Array.isArray(json) || _typeof(json) != "object") {
        throw new Error("cannot decode message ".concat(type.typeName, " from JSON: ").concat(debugJsonValue(json)));
      }
      message = message !== null && message !== void 0 ? message : new type();
      var oneofSeen = new Map();
      var registry = options.typeRegistry;
      for (var _i = 0, _Object$entries = Object.entries(json); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          jsonKey = _Object$entries$_i[0],
          jsonValue = _Object$entries$_i[1];
        var field = type.fields.findJsonName(jsonKey);
        if (field) {
          if (field.oneof) {
            if (jsonValue === null && field.kind == "scalar") {
              // see conformance test Required.Proto3.JsonInput.OneofFieldNull{First,Second}
              continue;
            }
            var seen = oneofSeen.get(field.oneof);
            if (seen !== undefined) {
              throw new Error("cannot decode message ".concat(type.typeName, " from JSON: multiple keys for oneof \"").concat(field.oneof.name, "\" present: \"").concat(seen, "\", \"").concat(jsonKey, "\""));
            }
            oneofSeen.set(field.oneof, jsonKey);
          }
          readField$1(message, jsonValue, field, options, type);
        } else {
          var found = false;
          if ((registry === null || registry === void 0 ? void 0 : registry.findExtension) && jsonKey.startsWith("[") && jsonKey.endsWith("]")) {
            var ext = registry.findExtension(jsonKey.substring(1, jsonKey.length - 1));
            if (ext && ext.extendee.typeName == type.typeName) {
              found = true;
              var _createExtensionConta = createExtensionContainer(ext),
                _createExtensionConta2 = _slicedToArray(_createExtensionConta, 2),
                container = _createExtensionConta2[0],
                get = _createExtensionConta2[1];
              readField$1(container, jsonValue, ext.field, options, ext);
              // We pass on the options as BinaryReadOptions/BinaryWriteOptions,
              // so that users can bring their own binary reader and writer factories
              // if necessary.
              setExtension(message, ext, get(), options);
            }
          }
          if (!found && !options.ignoreUnknownFields) {
            throw new Error("cannot decode message ".concat(type.typeName, " from JSON: key \"").concat(jsonKey, "\" is unknown"));
          }
        }
      }
      return message;
    },
    writeMessage: function writeMessage(message, options) {
      var type = message.getType();
      var json = {};
      var field;
      try {
        var _iterator = _createForOfIteratorHelper(type.fields.byNumber()),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            field = _step.value;
            if (!isFieldSet(field, message)) {
              // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
              if (field.req) {
                throw "required field not set";
              }
              if (!options.emitDefaultValues) {
                continue;
              }
              if (!canEmitFieldDefaultValue(field)) {
                continue;
              }
            }
            var _value = field.oneof ? message[field.oneof.localName].value : message[field.localName];
            var _jsonValue = writeField(field, _value, options);
            if (_jsonValue !== undefined) {
              json[options.useProtoFieldName ? field.name : field.jsonName] = _jsonValue;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        var registry = options.typeRegistry;
        if (registry === null || registry === void 0 ? void 0 : registry.findExtensionFor) {
          var _iterator2 = _createForOfIteratorHelper(type.runtime.bin.listUnknownFields(message)),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var uf = _step2.value;
              var ext = registry.findExtensionFor(type.typeName, uf.no);
              if (ext && hasExtension(message, ext)) {
                // We pass on the options as BinaryReadOptions, so that users can bring their own
                // binary reader factory if necessary.
                var value = getExtension(message, ext, options);
                var jsonValue = writeField(ext.field, value, options);
                if (jsonValue !== undefined) {
                  json[ext.field.jsonName] = jsonValue;
                }
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (e) {
        var m = field ? "cannot encode field ".concat(type.typeName, ".").concat(field.name, " to JSON") : "cannot encode message ".concat(type.typeName, " to JSON");
        var r = e instanceof Error ? e.message : String(e);
        throw new Error(m + (r.length > 0 ? ": ".concat(r) : ""));
      }
      return json;
    },
    readScalar: function readScalar(type, json, longType) {
      // The signature of our internal function has changed. For backwards-
      // compatibility, we support the old form that is part of the public API
      // through the interface JsonFormat.
      return _readScalar(type, json, longType !== null && longType !== void 0 ? longType : LongType.BIGINT, true);
    },
    writeScalar: function writeScalar(type, value, emitDefaultValues) {
      // The signature of our internal function has changed. For backwards-
      // compatibility, we support the old form that is part of the public API
      // through the interface JsonFormat.
      if (value === undefined) {
        return undefined;
      }
      if (emitDefaultValues || isScalarZeroValue(type, value)) {
        return _writeScalar(type, value);
      }
      return undefined;
    },
    debug: debugJsonValue
  };
}
function debugJsonValue(json) {
  if (json === null) {
    return "null";
  }
  switch (_typeof(json)) {
    case "object":
      return Array.isArray(json) ? "array" : "object";
    case "string":
      return json.length > 100 ? "string" : "\"".concat(json.split('"').join('\\"'), "\"");
    default:
      return String(json);
  }
}
// Read a JSON value for a field.
// The "parentType" argument is only used to provide context in errors.
function readField$1(target, jsonValue, field, options, parentType) {
  var localName = field.localName;
  if (field.repeated) {
    assert(field.kind != "map");
    if (jsonValue === null) {
      return;
    }
    if (!Array.isArray(jsonValue)) {
      throw new Error("cannot decode field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: ").concat(debugJsonValue(jsonValue)));
    }
    var targetArray = target[localName];
    var _iterator3 = _createForOfIteratorHelper(jsonValue),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var jsonItem = _step3.value;
        if (jsonItem === null) {
          throw new Error("cannot decode field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: ").concat(debugJsonValue(jsonItem)));
        }
        switch (field.kind) {
          case "message":
            targetArray.push(field.T.fromJson(jsonItem, options));
            break;
          case "enum":
            var enumValue = readEnum(field.T, jsonItem, options.ignoreUnknownFields, true);
            if (enumValue !== tokenIgnoredUnknownEnum) {
              targetArray.push(enumValue);
            }
            break;
          case "scalar":
            try {
              targetArray.push(_readScalar(field.T, jsonItem, field.L, true));
            } catch (e) {
              var m = "cannot decode field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: ").concat(debugJsonValue(jsonItem));
              if (e instanceof Error && e.message.length > 0) {
                m += ": ".concat(e.message);
              }
              throw new Error(m);
            }
            break;
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  } else if (field.kind == "map") {
    if (jsonValue === null) {
      return;
    }
    if (_typeof(jsonValue) != "object" || Array.isArray(jsonValue)) {
      throw new Error("cannot decode field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: ").concat(debugJsonValue(jsonValue)));
    }
    var targetMap = target[localName];
    for (var _i2 = 0, _Object$entries2 = Object.entries(jsonValue); _i2 < _Object$entries2.length; _i2++) {
      var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),
        jsonMapKey = _Object$entries2$_i[0],
        jsonMapValue = _Object$entries2$_i[1];
      if (jsonMapValue === null) {
        throw new Error("cannot decode field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: map value null"));
      }
      var key = void 0;
      try {
        key = readMapKey(field.K, jsonMapKey);
      } catch (e) {
        var _m = "cannot decode map key for field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: ").concat(debugJsonValue(jsonValue));
        if (e instanceof Error && e.message.length > 0) {
          _m += ": ".concat(e.message);
        }
        throw new Error(_m);
      }
      switch (field.V.kind) {
        case "message":
          targetMap[key] = field.V.T.fromJson(jsonMapValue, options);
          break;
        case "enum":
          var _enumValue = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields, true);
          if (_enumValue !== tokenIgnoredUnknownEnum) {
            targetMap[key] = _enumValue;
          }
          break;
        case "scalar":
          try {
            targetMap[key] = _readScalar(field.V.T, jsonMapValue, LongType.BIGINT, true);
          } catch (e) {
            var _m2 = "cannot decode map value for field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: ").concat(debugJsonValue(jsonValue));
            if (e instanceof Error && e.message.length > 0) {
              _m2 += ": ".concat(e.message);
            }
            throw new Error(_m2);
          }
          break;
      }
    }
  } else {
    if (field.oneof) {
      target = target[field.oneof.localName] = {
        "case": localName
      };
      localName = "value";
    }
    switch (field.kind) {
      case "message":
        var messageType = field.T;
        if (jsonValue === null && messageType.typeName != "google.protobuf.Value") {
          return;
        }
        var currentValue = target[localName];
        if (isMessage(currentValue)) {
          currentValue.fromJson(jsonValue, options);
        } else {
          target[localName] = currentValue = messageType.fromJson(jsonValue, options);
          if (messageType.fieldWrapper && !field.oneof) {
            target[localName] = messageType.fieldWrapper.unwrapField(currentValue);
          }
        }
        break;
      case "enum":
        var _enumValue2 = readEnum(field.T, jsonValue, options.ignoreUnknownFields, false);
        switch (_enumValue2) {
          case tokenNull:
            clearField(field, target);
            break;
          case tokenIgnoredUnknownEnum:
            break;
          default:
            target[localName] = _enumValue2;
            break;
        }
        break;
      case "scalar":
        try {
          var scalarValue = _readScalar(field.T, jsonValue, field.L, false);
          switch (scalarValue) {
            case tokenNull:
              clearField(field, target);
              break;
            default:
              target[localName] = scalarValue;
              break;
          }
        } catch (e) {
          var _m3 = "cannot decode field ".concat(parentType.typeName, ".").concat(field.name, " from JSON: ").concat(debugJsonValue(jsonValue));
          if (e instanceof Error && e.message.length > 0) {
            _m3 += ": ".concat(e.message);
          }
          throw new Error(_m3);
        }
        break;
    }
  }
}
function readMapKey(type, json) {
  if (type === ScalarType.BOOL) {
    // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
    switch (json) {
      case "true":
        json = true;
        break;
      case "false":
        json = false;
        break;
    }
  }
  return _readScalar(type, json, LongType.BIGINT, true).toString();
}
function _readScalar(type, json, longType, nullAsZeroValue) {
  if (json === null) {
    if (nullAsZeroValue) {
      return scalarZeroValue(type, longType);
    }
    return tokenNull;
  }
  // every valid case in the switch below returns, and every fall
  // through is regarded as a failure.
  switch (type) {
    // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
    // Either numbers or strings are accepted. Exponent notation is also accepted.
    case ScalarType.DOUBLE:
    case ScalarType.FLOAT:
      if (json === "NaN") return Number.NaN;
      if (json === "Infinity") return Number.POSITIVE_INFINITY;
      if (json === "-Infinity") return Number.NEGATIVE_INFINITY;
      if (json === "") {
        // empty string is not a number
        break;
      }
      if (typeof json == "string" && json.trim().length !== json.length) {
        // extra whitespace
        break;
      }
      if (typeof json != "string" && typeof json != "number") {
        break;
      }
      var _float = Number(json);
      if (Number.isNaN(_float)) {
        // not a number
        break;
      }
      if (!Number.isFinite(_float)) {
        // infinity and -infinity are handled by string representation above, so this is an error
        break;
      }
      if (type == ScalarType.FLOAT) assertFloat32(_float);
      return _float;
    // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
    case ScalarType.INT32:
    case ScalarType.FIXED32:
    case ScalarType.SFIXED32:
    case ScalarType.SINT32:
    case ScalarType.UINT32:
      var int32;
      if (typeof json == "number") int32 = json;else if (typeof json == "string" && json.length > 0) {
        if (json.trim().length === json.length) int32 = Number(json);
      }
      if (int32 === undefined) break;
      if (type == ScalarType.UINT32 || type == ScalarType.FIXED32) assertUInt32(int32);else assertInt32(int32);
      return int32;
    // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      if (typeof json != "number" && typeof json != "string") break;
      var _long = protoInt64.parse(json);
      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
      return longType ? _long.toString() : _long;
    case ScalarType.FIXED64:
    case ScalarType.UINT64:
      if (typeof json != "number" && typeof json != "string") break;
      var uLong = protoInt64.uParse(json);
      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
      return longType ? uLong.toString() : uLong;
    // bool:
    case ScalarType.BOOL:
      if (typeof json !== "boolean") break;
      return json;
    // string:
    case ScalarType.STRING:
      if (typeof json !== "string") {
        break;
      }
      // A string must always contain UTF-8 encoded or 7-bit ASCII.
      // We validate with encodeURIComponent, which appears to be the fastest widely available option.
      try {
        encodeURIComponent(json);
      } catch (e) {
        throw new Error("invalid UTF8");
      }
      return json;
    // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
    // Either standard or URL-safe base64 encoding with/without paddings are accepted.
    case ScalarType.BYTES:
      if (json === "") return new Uint8Array(0);
      if (typeof json !== "string") break;
      return protoBase64.dec(json);
  }
  throw new Error();
}
function readEnum(type, json, ignoreUnknownFields, nullAsZeroValue) {
  if (json === null) {
    if (type.typeName == "google.protobuf.NullValue") {
      return 0; // google.protobuf.NullValue.NULL_VALUE = 0
    }
    return nullAsZeroValue ? type.values[0].no : tokenNull;
  }
  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
  switch (_typeof(json)) {
    case "number":
      if (Number.isInteger(json)) {
        return json;
      }
      break;
    case "string":
      var value = type.findName(json);
      if (value !== undefined) {
        return value.no;
      }
      if (ignoreUnknownFields) {
        return tokenIgnoredUnknownEnum;
      }
      break;
  }
  throw new Error("cannot decode enum ".concat(type.typeName, " from JSON: ").concat(debugJsonValue(json)));
}
// Decide whether an unset field should be emitted with JSON write option `emitDefaultValues`
function canEmitFieldDefaultValue(field) {
  if (field.repeated || field.kind == "map") {
    // maps are {}, repeated fields are []
    return true;
  }
  if (field.oneof) {
    // oneof fields are never emitted
    return false;
  }
  if (field.kind == "message") {
    // singular message field are allowed to emit JSON null, but we do not
    return false;
  }
  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
  if (field.opt || field.req) {
    // the field uses explicit presence, so we cannot emit a zero value
    return false;
  }
  return true;
}
function writeField(field, value, options) {
  if (field.kind == "map") {
    assert(_typeof(value) == "object" && value != null);
    var jsonObj = {};
    var entries = Object.entries(value);
    switch (field.V.kind) {
      case "scalar":
        var _iterator4 = _createForOfIteratorHelper(entries),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _step4$value = _slicedToArray(_step4.value, 2),
              entryKey = _step4$value[0],
              entryValue = _step4$value[1];
            jsonObj[entryKey.toString()] = _writeScalar(field.V.T, entryValue); // JSON standard allows only (double quoted) string as property key
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
        break;
      case "message":
        var _iterator5 = _createForOfIteratorHelper(entries),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _step5$value = _slicedToArray(_step5.value, 2),
              _entryKey = _step5$value[0],
              _entryValue = _step5$value[1];
            // JSON standard allows only (double quoted) string as property key
            jsonObj[_entryKey.toString()] = _entryValue.toJson(options);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
        break;
      case "enum":
        var enumType = field.V.T;
        var _iterator6 = _createForOfIteratorHelper(entries),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var _step6$value = _slicedToArray(_step6.value, 2),
              _entryKey2 = _step6$value[0],
              _entryValue2 = _step6$value[1];
            // JSON standard allows only (double quoted) string as property key
            jsonObj[_entryKey2.toString()] = writeEnum(enumType, _entryValue2, options.enumAsInteger);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        break;
    }
    return options.emitDefaultValues || entries.length > 0 ? jsonObj : undefined;
  }
  if (field.repeated) {
    assert(Array.isArray(value));
    var jsonArr = [];
    switch (field.kind) {
      case "scalar":
        for (var i = 0; i < value.length; i++) {
          jsonArr.push(_writeScalar(field.T, value[i]));
        }
        break;
      case "enum":
        for (var _i3 = 0; _i3 < value.length; _i3++) {
          jsonArr.push(writeEnum(field.T, value[_i3], options.enumAsInteger));
        }
        break;
      case "message":
        for (var _i4 = 0; _i4 < value.length; _i4++) {
          jsonArr.push(value[_i4].toJson(options));
        }
        break;
    }
    return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : undefined;
  }
  switch (field.kind) {
    case "scalar":
      return _writeScalar(field.T, value);
    case "enum":
      return writeEnum(field.T, value, options.enumAsInteger);
    case "message":
      return wrapField(field.T, value).toJson(options);
  }
}
function writeEnum(type, value, enumAsInteger) {
  var _a;
  assert(typeof value == "number");
  if (type.typeName == "google.protobuf.NullValue") {
    return null;
  }
  if (enumAsInteger) {
    return value;
  }
  var val = type.findNumber(value);
  return (_a = val === null || val === void 0 ? void 0 : val.name) !== null && _a !== void 0 ? _a : value; // if we don't know the enum value, just return the number
}
function _writeScalar(type, value) {
  switch (type) {
    // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.
    case ScalarType.INT32:
    case ScalarType.SFIXED32:
    case ScalarType.SINT32:
    case ScalarType.FIXED32:
    case ScalarType.UINT32:
      assert(typeof value == "number");
      return value;
    // float, double: JSON value will be a number or one of the special string values "NaN", "Infinity", and "-Infinity".
    // Either numbers or strings are accepted. Exponent notation is also accepted.
    case ScalarType.FLOAT:
    // assertFloat32(value);
    case ScalarType.DOUBLE:
      // eslint-disable-line no-fallthrough
      assert(typeof value == "number");
      if (Number.isNaN(value)) return "NaN";
      if (value === Number.POSITIVE_INFINITY) return "Infinity";
      if (value === Number.NEGATIVE_INFINITY) return "-Infinity";
      return value;
    // string:
    case ScalarType.STRING:
      assert(typeof value == "string");
      return value;
    // bool:
    case ScalarType.BOOL:
      assert(typeof value == "boolean");
      return value;
    // JSON value will be a decimal string. Either numbers or strings are accepted.
    case ScalarType.UINT64:
    case ScalarType.FIXED64:
    case ScalarType.INT64:
    case ScalarType.SFIXED64:
    case ScalarType.SINT64:
      assert(typeof value == "bigint" || typeof value == "string" || typeof value == "number");
      return value.toString();
    // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.
    // Either standard or URL-safe base64 encoding with/without paddings are accepted.
    case ScalarType.BYTES:
      assert(value instanceof Uint8Array);
      return protoBase64.enc(value);
  }
}

/* eslint-disable prefer-const,no-case-declarations,@typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-return */
var unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields");
// Default options for parsing binary data.
var readDefaults = {
  readUnknownFields: true,
  readerFactory: function readerFactory(bytes) {
    return new BinaryReader(bytes);
  }
};
// Default options for serializing binary data.
var writeDefaults = {
  writeUnknownFields: true,
  writerFactory: function writerFactory() {
    return new BinaryWriter();
  }
};
function makeReadOptions(options) {
  return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
}
function makeWriteOptions(options) {
  return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
}
function makeBinaryFormat() {
  return {
    makeReadOptions: makeReadOptions,
    makeWriteOptions: makeWriteOptions,
    listUnknownFields: function listUnknownFields(message) {
      var _a;
      return (_a = message[unknownFieldsSymbol]) !== null && _a !== void 0 ? _a : [];
    },
    discardUnknownFields: function discardUnknownFields(message) {
      delete message[unknownFieldsSymbol];
    },
    writeUnknownFields: function writeUnknownFields(message, writer) {
      var m = message;
      var c = m[unknownFieldsSymbol];
      if (c) {
        var _iterator = _createForOfIteratorHelper(c),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var f = _step.value;
            writer.tag(f.no, f.wireType).raw(f.data);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    },
    onUnknownField: function onUnknownField(message, no, wireType, data) {
      var m = message;
      if (!Array.isArray(m[unknownFieldsSymbol])) {
        m[unknownFieldsSymbol] = [];
      }
      m[unknownFieldsSymbol].push({
        no: no,
        wireType: wireType,
        data: data
      });
    },
    readMessage: function readMessage(message, reader, lengthOrEndTagFieldNo, options, delimitedMessageEncoding) {
      var type = message.getType();
      // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
      var end = delimitedMessageEncoding ? reader.len : reader.pos + lengthOrEndTagFieldNo;
      var fieldNo, wireType;
      while (reader.pos < end) {
        var _reader$tag = reader.tag();
        var _reader$tag2 = _slicedToArray(_reader$tag, 2);
        fieldNo = _reader$tag2[0];
        wireType = _reader$tag2[1];
        if (delimitedMessageEncoding === true && wireType == WireType.EndGroup) {
          break;
        }
        var field = type.fields.find(fieldNo);
        if (!field) {
          var data = reader.skip(wireType, fieldNo);
          if (options.readUnknownFields) {
            this.onUnknownField(message, fieldNo, wireType, data);
          }
          continue;
        }
        readField(message, reader, field, wireType, options);
      }
      if (delimitedMessageEncoding && (
      // eslint-disable-line @typescript-eslint/strict-boolean-expressions
      wireType != WireType.EndGroup || fieldNo !== lengthOrEndTagFieldNo)) {
        throw new Error("invalid end group tag");
      }
    },
    readField: readField,
    writeMessage: function writeMessage(message, writer, options) {
      var type = message.getType();
      var _iterator2 = _createForOfIteratorHelper(type.fields.byNumber()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var field = _step2.value;
          if (!isFieldSet(field, message)) {
            if (field.req) {
              throw new Error("cannot encode field ".concat(type.typeName, ".").concat(field.name, " to binary: required field not set"));
            }
            continue;
          }
          var value = field.oneof ? message[field.oneof.localName].value : message[field.localName];
          _writeField(field, value, writer, options);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (options.writeUnknownFields) {
        this.writeUnknownFields(message, writer);
      }
      return writer;
    },
    writeField: function writeField(field, value, writer, options) {
      // The behavior of our internal function has changed, it does no longer
      // accept `undefined` values for singular scalar and map.
      // For backwards-compatibility, we support the old form that is part of
      // the public API through the interface BinaryFormat.
      if (value === undefined) {
        return undefined;
      }
      _writeField(field, value, writer, options);
    }
  };
}
function readField(target,
// eslint-disable-line @typescript-eslint/no-explicit-any -- `any` is the best choice for dynamic access
reader, field, wireType, options) {
  var repeated = field.repeated,
    localName = field.localName;
  if (field.oneof) {
    target = target[field.oneof.localName];
    if (target["case"] != localName) {
      delete target.value;
    }
    target["case"] = localName;
    localName = "value";
  }
  switch (field.kind) {
    case "scalar":
    case "enum":
      var scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
      var read = readScalar;
      // eslint-disable-next-line @typescript-eslint/no-unsafe-enum-comparison -- acceptable since it's covered by tests
      if (field.kind == "scalar" && field.L > 0) {
        read = readScalarLTString;
      }
      if (repeated) {
        var arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values
        var isPacked = wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES;
        if (isPacked) {
          var e = reader.uint32() + reader.pos;
          while (reader.pos < e) {
            arr.push(read(reader, scalarType));
          }
        } else {
          arr.push(read(reader, scalarType));
        }
      } else {
        target[localName] = read(reader, scalarType);
      }
      break;
    case "message":
      var messageType = field.T;
      if (repeated) {
        // safe to assume presence of array, oneof cannot contain repeated values
        target[localName].push(readMessageField(reader, new messageType(), options, field));
      } else {
        if (isMessage(target[localName])) {
          readMessageField(reader, target[localName], options, field);
        } else {
          target[localName] = readMessageField(reader, new messageType(), options, field);
          if (messageType.fieldWrapper && !field.oneof && !field.repeated) {
            target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
          }
        }
      }
      break;
    case "map":
      var _readMapEntry = readMapEntry(field, reader, options),
        _readMapEntry2 = _slicedToArray(_readMapEntry, 2),
        mapKey = _readMapEntry2[0],
        mapVal = _readMapEntry2[1];
      // safe to assume presence of map object, oneof cannot contain repeated values
      target[localName][mapKey] = mapVal;
      break;
  }
}
// Read a message, avoiding MessageType.fromBinary() to re-use the
// BinaryReadOptions and the IBinaryReader.
function readMessageField(reader, message, options, field) {
  var format = message.getType().runtime.bin;
  var delimited = field === null || field === void 0 ? void 0 : field.delimited;
  format.readMessage(message, reader, delimited ? field.no : reader.uint32(),
  // eslint-disable-line @typescript-eslint/strict-boolean-expressions
  options, delimited);
  return message;
}
// Read a map field, expecting key field = 1, value field = 2
function readMapEntry(field, reader, options) {
  var length = reader.uint32(),
    end = reader.pos + length;
  var key, val;
  while (reader.pos < end) {
    var _reader$tag3 = reader.tag(),
      _reader$tag4 = _slicedToArray(_reader$tag3, 1),
      fieldNo = _reader$tag4[0];
    switch (fieldNo) {
      case 1:
        key = readScalar(reader, field.K);
        break;
      case 2:
        switch (field.V.kind) {
          case "scalar":
            val = readScalar(reader, field.V.T);
            break;
          case "enum":
            val = reader.int32();
            break;
          case "message":
            val = readMessageField(reader, new field.V.T(), options, undefined);
            break;
        }
        break;
    }
  }
  if (key === undefined) {
    key = scalarZeroValue(field.K, LongType.BIGINT);
  }
  if (typeof key != "string" && typeof key != "number") {
    key = key.toString();
  }
  if (val === undefined) {
    switch (field.V.kind) {
      case "scalar":
        val = scalarZeroValue(field.V.T, LongType.BIGINT);
        break;
      case "enum":
        val = field.V.T.values[0].no;
        break;
      case "message":
        val = new field.V.T();
        break;
    }
  }
  return [key, val];
}
// Read a scalar value, but return 64 bit integral types (int64, uint64,
// sint64, fixed64, sfixed64) as string instead of bigint.
function readScalarLTString(reader, type) {
  var v = readScalar(reader, type);
  return typeof v == "bigint" ? v.toString() : v;
}
// Does not use scalarTypeInfo() for better performance.
function readScalar(reader, type) {
  switch (type) {
    case ScalarType.STRING:
      return reader.string();
    case ScalarType.BOOL:
      return reader.bool();
    case ScalarType.DOUBLE:
      return reader["double"]();
    case ScalarType.FLOAT:
      return reader["float"]();
    case ScalarType.INT32:
      return reader.int32();
    case ScalarType.INT64:
      return reader.int64();
    case ScalarType.UINT64:
      return reader.uint64();
    case ScalarType.FIXED64:
      return reader.fixed64();
    case ScalarType.BYTES:
      return reader.bytes();
    case ScalarType.FIXED32:
      return reader.fixed32();
    case ScalarType.SFIXED32:
      return reader.sfixed32();
    case ScalarType.SFIXED64:
      return reader.sfixed64();
    case ScalarType.SINT64:
      return reader.sint64();
    case ScalarType.UINT32:
      return reader.uint32();
    case ScalarType.SINT32:
      return reader.sint32();
  }
}
function _writeField(field, value, writer, options) {
  assert(value !== undefined);
  var repeated = field.repeated;
  switch (field.kind) {
    case "scalar":
    case "enum":
      var scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
      if (repeated) {
        assert(Array.isArray(value));
        if (field.packed) {
          writePacked(writer, scalarType, field.no, value);
        } else {
          var _iterator3 = _createForOfIteratorHelper(value),
            _step3;
          try {
            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
              var item = _step3.value;
              writeScalar(writer, scalarType, field.no, item);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        }
      } else {
        writeScalar(writer, scalarType, field.no, value);
      }
      break;
    case "message":
      if (repeated) {
        assert(Array.isArray(value));
        var _iterator4 = _createForOfIteratorHelper(value),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _item = _step4.value;
            writeMessageField(writer, options, field, _item);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      } else {
        writeMessageField(writer, options, field, value);
      }
      break;
    case "map":
      assert(_typeof(value) == "object" && value != null);
      for (var _i = 0, _Object$entries = Object.entries(value); _i < _Object$entries.length; _i++) {
        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
          key = _Object$entries$_i[0],
          val = _Object$entries$_i[1];
        writeMapEntry(writer, options, field, key, val);
      }
      break;
  }
}
function writeMapEntry(writer, options, field, key, value) {
  writer.tag(field.no, WireType.LengthDelimited);
  writer.fork();
  // javascript only allows number or string for object properties
  // we convert from our representation to the protobuf type
  var keyValue = key;
  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- we deliberately handle just the special cases for map keys
  switch (field.K) {
    case ScalarType.INT32:
    case ScalarType.FIXED32:
    case ScalarType.UINT32:
    case ScalarType.SFIXED32:
    case ScalarType.SINT32:
      keyValue = Number.parseInt(key);
      break;
    case ScalarType.BOOL:
      assert(key == "true" || key == "false");
      keyValue = key == "true";
      break;
  }
  // write key, expecting key field number = 1
  writeScalar(writer, field.K, 1, keyValue);
  // write value, expecting value field number = 2
  switch (field.V.kind) {
    case "scalar":
      writeScalar(writer, field.V.T, 2, value);
      break;
    case "enum":
      writeScalar(writer, ScalarType.INT32, 2, value);
      break;
    case "message":
      assert(value !== undefined);
      writer.tag(2, WireType.LengthDelimited).bytes(value.toBinary(options));
      break;
  }
  writer.join();
}
// Value must not be undefined
function writeMessageField(writer, options, field, value) {
  var message = wrapField(field.T, value);
  // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
  if (field.delimited) writer.tag(field.no, WireType.StartGroup).raw(message.toBinary(options)).tag(field.no, WireType.EndGroup);else writer.tag(field.no, WireType.LengthDelimited).bytes(message.toBinary(options));
}
function writeScalar(writer, type, fieldNo, value) {
  assert(value !== undefined);
  var _scalarTypeInfo = scalarTypeInfo(type),
    _scalarTypeInfo2 = _slicedToArray(_scalarTypeInfo, 2),
    wireType = _scalarTypeInfo2[0],
    method = _scalarTypeInfo2[1];
  writer.tag(fieldNo, wireType)[method](value);
}
function writePacked(writer, type, fieldNo, value) {
  if (!value.length) {
    return;
  }
  writer.tag(fieldNo, WireType.LengthDelimited).fork();
  var _scalarTypeInfo3 = scalarTypeInfo(type),
    _scalarTypeInfo4 = _slicedToArray(_scalarTypeInfo3, 2),
    method = _scalarTypeInfo4[1];
  for (var i = 0; i < value.length; i++) {
    writer[method](value[i]);
  }
  writer.join();
}
/**
 * Get information for writing a scalar value.
 *
 * Returns tuple:
 * [0]: appropriate WireType
 * [1]: name of the appropriate method of IBinaryWriter
 * [2]: whether the given value is a default value for proto3 semantics
 *
 * If argument `value` is omitted, [2] is always false.
 */
// TODO replace call-sites writeScalar() and writePacked(), then remove
function scalarTypeInfo(type) {
  var wireType = WireType.Varint;
  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- INT32, UINT32, SINT32 are covered by the defaults
  switch (type) {
    case ScalarType.BYTES:
    case ScalarType.STRING:
      wireType = WireType.LengthDelimited;
      break;
    case ScalarType.DOUBLE:
    case ScalarType.FIXED64:
    case ScalarType.SFIXED64:
      wireType = WireType.Bit64;
      break;
    case ScalarType.FIXED32:
    case ScalarType.SFIXED32:
    case ScalarType.FLOAT:
      wireType = WireType.Bit32;
      break;
  }
  var method = ScalarType[type].toLowerCase();
  return [wireType, method];
}

/* eslint-disable @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-argument,no-case-declarations */
function makeUtilCommon() {
  return {
    setEnumType: setEnumType,
    initPartial: function initPartial(source, target) {
      if (source === undefined) {
        return;
      }
      var type = target.getType();
      var _iterator = _createForOfIteratorHelper(type.fields.byMember()),
        _step;
      try {
        var _loop = function _loop() {
            var member = _step.value;
            var localName = member.localName,
              t = target,
              s = source;
            if (s[localName] == null) {
              // TODO if source is a Message instance, we should use isFieldSet() here to support future field presence
              return 0; // continue
            }
            switch (member.kind) {
              case "oneof":
                var sk = s[localName]["case"];
                if (sk === undefined) {
                  return 0; // continue
                }
                var sourceField = member.findField(sk);
                var val = s[localName].value;
                if (sourceField && sourceField.kind == "message" && !isMessage(val, sourceField.T)) {
                  val = new sourceField.T(val);
                } else if (sourceField && sourceField.kind === "scalar" && sourceField.T === ScalarType.BYTES) {
                  val = toU8Arr(val);
                }
                t[localName] = {
                  "case": sk,
                  value: val
                };
                break;
              case "scalar":
              case "enum":
                var copy = s[localName];
                if (member.T === ScalarType.BYTES) {
                  copy = member.repeated ? copy.map(toU8Arr) : toU8Arr(copy);
                }
                t[localName] = copy;
                break;
              case "map":
                switch (member.V.kind) {
                  case "scalar":
                  case "enum":
                    if (member.V.T === ScalarType.BYTES) {
                      for (var _i = 0, _Object$entries = Object.entries(s[localName]); _i < _Object$entries.length; _i++) {
                        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
                          k = _Object$entries$_i[0],
                          v = _Object$entries$_i[1];
                        t[localName][k] = toU8Arr(v);
                      }
                    } else {
                      Object.assign(t[localName], s[localName]);
                    }
                    break;
                  case "message":
                    var messageType = member.V.T;
                    for (var _i2 = 0, _Object$keys = Object.keys(s[localName]); _i2 < _Object$keys.length; _i2++) {
                      var _k = _Object$keys[_i2];
                      var _val = s[localName][_k];
                      if (!messageType.fieldWrapper) {
                        // We only take partial input for messages that are not a wrapper type.
                        // For those messages, we recursively normalize the partial input.
                        _val = new messageType(_val);
                      }
                      t[localName][_k] = _val;
                    }
                    break;
                }
                break;
              case "message":
                var mt = member.T;
                if (member.repeated) {
                  t[localName] = s[localName].map(function (val) {
                    return isMessage(val, mt) ? val : new mt(val);
                  });
                } else {
                  var _val2 = s[localName];
                  if (mt.fieldWrapper) {
                    if (
                    // We can't use BytesValue.typeName as that will create a circular import
                    mt.typeName === "google.protobuf.BytesValue") {
                      t[localName] = toU8Arr(_val2);
                    } else {
                      t[localName] = _val2;
                    }
                  } else {
                    t[localName] = isMessage(_val2, mt) ? _val2 : new mt(_val2);
                  }
                }
                break;
            }
          },
          _ret;
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          _ret = _loop();
          if (_ret === 0) continue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    },
    // TODO use isFieldSet() here to support future field presence
    equals: function equals(type, a, b) {
      if (a === b) {
        return true;
      }
      if (!a || !b) {
        return false;
      }
      return type.fields.byMember().every(function (m) {
        var va = a[m.localName];
        var vb = b[m.localName];
        if (m.repeated) {
          if (va.length !== vb.length) {
            return false;
          }
          // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- repeated fields are never "map"
          switch (m.kind) {
            case "message":
              return va.every(function (a, i) {
                return m.T.equals(a, vb[i]);
              });
            case "scalar":
              return va.every(function (a, i) {
                return scalarEquals(m.T, a, vb[i]);
              });
            case "enum":
              return va.every(function (a, i) {
                return scalarEquals(ScalarType.INT32, a, vb[i]);
              });
          }
          throw new Error("repeated cannot contain ".concat(m.kind));
        }
        switch (m.kind) {
          case "message":
            var _a = va;
            var _b = vb;
            if (m.T.fieldWrapper) {
              if (_a !== undefined && !isMessage(_a)) {
                _a = m.T.fieldWrapper.wrapField(_a);
              }
              if (_b !== undefined && !isMessage(_b)) {
                _b = m.T.fieldWrapper.wrapField(_b);
              }
            }
            return m.T.equals(_a, _b);
          case "enum":
            return scalarEquals(ScalarType.INT32, va, vb);
          case "scalar":
            return scalarEquals(m.T, va, vb);
          case "oneof":
            if (va["case"] !== vb["case"]) {
              return false;
            }
            var s = m.findField(va["case"]);
            if (s === undefined) {
              return true;
            }
            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check -- oneof fields are never "map"
            switch (s.kind) {
              case "message":
                return s.T.equals(va.value, vb.value);
              case "enum":
                return scalarEquals(ScalarType.INT32, va.value, vb.value);
              case "scalar":
                return scalarEquals(s.T, va.value, vb.value);
            }
            throw new Error("oneof cannot contain ".concat(s.kind));
          case "map":
            var keys = Object.keys(va).concat(Object.keys(vb));
            switch (m.V.kind) {
              case "message":
                var messageType = m.V.T;
                return keys.every(function (k) {
                  return messageType.equals(va[k], vb[k]);
                });
              case "enum":
                return keys.every(function (k) {
                  return scalarEquals(ScalarType.INT32, va[k], vb[k]);
                });
              case "scalar":
                var scalarType = m.V.T;
                return keys.every(function (k) {
                  return scalarEquals(scalarType, va[k], vb[k]);
                });
            }
            break;
        }
      });
    },
    // TODO use isFieldSet() here to support future field presence
    clone: function clone(message) {
      var type = message.getType(),
        target = new type(),
        any = target;
      var _iterator2 = _createForOfIteratorHelper(type.fields.byMember()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var member = _step2.value;
          var source = message[member.localName];
          var copy = void 0;
          if (member.repeated) {
            copy = source.map(cloneSingularField);
          } else if (member.kind == "map") {
            copy = any[member.localName];
            for (var _i3 = 0, _Object$entries2 = Object.entries(source); _i3 < _Object$entries2.length; _i3++) {
              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
                key = _Object$entries2$_i[0],
                v = _Object$entries2$_i[1];
              copy[key] = cloneSingularField(v);
            }
          } else if (member.kind == "oneof") {
            var f = member.findField(source["case"]);
            copy = f ? {
              "case": source["case"],
              value: cloneSingularField(source.value)
            } : {
              "case": undefined
            };
          } else {
            copy = cloneSingularField(source);
          }
          any[member.localName] = copy;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var _iterator3 = _createForOfIteratorHelper(type.runtime.bin.listUnknownFields(message)),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var uf = _step3.value;
          type.runtime.bin.onUnknownField(any, uf.no, uf.wireType, uf.data);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return target;
    }
  };
}
// clone a single field value - i.e. the element type of repeated fields, the value type of maps
function cloneSingularField(value) {
  if (value === undefined) {
    return value;
  }
  if (isMessage(value)) {
    return value.clone();
  }
  if (value instanceof Uint8Array) {
    var c = new Uint8Array(value.byteLength);
    c.set(value);
    return c;
  }
  return value;
}
// converts any ArrayLike<number> to Uint8Array if necessary.
function toU8Arr(input) {
  return input instanceof Uint8Array ? input : new Uint8Array(input);
}

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
function makeProtoRuntime(syntax, newFieldList, initFields) {
  return {
    syntax: syntax,
    json: makeJsonFormat(),
    bin: makeBinaryFormat(),
    util: Object.assign(Object.assign({}, makeUtilCommon()), {
      newFieldList: newFieldList,
      initFields: initFields
    }),
    makeMessageType: function makeMessageType$1(typeName, fields, opt) {
      return makeMessageType(this, typeName, fields, opt);
    },
    makeEnum: makeEnum,
    makeEnumType: makeEnumType,
    getEnumType: getEnumType,
    makeExtension: function makeExtension$1(typeName, extendee, field) {
      return makeExtension(this, typeName, extendee, field);
    }
  };
}

// Copyright 2021-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var InternalFieldList = /*#__PURE__*/function () {
  function InternalFieldList(fields, normalizer) {
    _classCallCheck(this, InternalFieldList);
    this._fields = fields;
    this._normalizer = normalizer;
  }
  return _createClass(InternalFieldList, [{
    key: "findJsonName",
    value: function findJsonName(jsonName) {
      if (!this.jsonNames) {
        var t = {};
        var _iterator = _createForOfIteratorHelper(this.list()),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var f = _step.value;
            t[f.jsonName] = t[f.name] = f;
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
        this.jsonNames = t;
      }
      return this.jsonNames[jsonName];
    }
  }, {
    key: "find",
    value: function find(fieldNo) {
      if (!this.numbers) {
        var t = {};
        var _iterator2 = _createForOfIteratorHelper(this.list()),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var f = _step2.value;
            t[f.no] = f;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        this.numbers = t;
      }
      return this.numbers[fieldNo];
    }
  }, {
    key: "list",
    value: function list() {
      if (!this.all) {
        this.all = this._normalizer(this._fields);
      }
      return this.all;
    }
  }, {
    key: "byNumber",
    value: function byNumber() {
      if (!this.numbersAsc) {
        this.numbersAsc = this.list().concat().sort(function (a, b) {
          return a.no - b.no;
        });
      }
      return this.numbersAsc;
    }
  }, {
    key: "byMember",
    value: function byMember() {
      if (!this.members) {
        this.members = [];
        var a = this.members;
        var o;
        var _iterator3 = _createForOfIteratorHelper(this.list()),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var f = _step3.value;
            if (f.oneof) {
              if (f.oneof !== o) {
                o = f.oneof;
                a.push(o);
              }
            } else {
              a.push(f);
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      return this.members;
    }
  }]);
}();

/**
 * Returns the name of a field in generated code.
 */
function localFieldName(protoName, inOneof) {
  var name = protoCamelCase(protoName);
  if (inOneof) {
    // oneof member names are not properties, but values of the `case` property.
    return name;
  }
  return safeObjectProperty(safeMessageProperty(name));
}
/**
 * Returns the name of a oneof group in generated code.
 */
function localOneofName(protoName) {
  return localFieldName(protoName, false);
}
/**
 * Returns the JSON name for a protobuf field, exactly like protoc does.
 */
var fieldJsonName = protoCamelCase;
/**
 * Converts snake_case to protoCamelCase according to the convention
 * used by protoc to convert a field name to a JSON name.
 */
function protoCamelCase(snakeCase) {
  var capNext = false;
  var b = [];
  for (var i = 0; i < snakeCase.length; i++) {
    var c = snakeCase.charAt(i);
    switch (c) {
      case "_":
        capNext = true;
        break;
      case "0":
      case "1":
      case "2":
      case "3":
      case "4":
      case "5":
      case "6":
      case "7":
      case "8":
      case "9":
        b.push(c);
        capNext = false;
        break;
      default:
        if (capNext) {
          capNext = false;
          c = c.toUpperCase();
        }
        b.push(c);
        break;
    }
  }
  return b.join("");
}
/**
 * Names that cannot be used for object properties because they are reserved
 * by built-in JavaScript properties.
 */
var reservedObjectProperties = new Set([
// names reserved by JavaScript
"constructor", "toString", "toJSON", "valueOf"]);
/**
 * Names that cannot be used for object properties because they are reserved
 * by the runtime.
 */
var reservedMessageProperties = new Set([
// names reserved by the runtime
"getType", "clone", "equals", "fromBinary", "fromJson", "fromJsonString", "toBinary", "toJson", "toJsonString",
// names reserved by the runtime for the future
"toObject"]);
var fallback = function fallback(name) {
  return "".concat(name, "$");
};
/**
 * Will wrap names that are Object prototype properties or names reserved
 * for `Message`s.
 */
var safeMessageProperty = function safeMessageProperty(name) {
  if (reservedMessageProperties.has(name)) {
    return fallback(name);
  }
  return name;
};
/**
 * Names that cannot be used for object properties because they are reserved
 * by built-in JavaScript properties.
 */
var safeObjectProperty = function safeObjectProperty(name) {
  if (reservedObjectProperties.has(name)) {
    return fallback(name);
  }
  return name;
};

var InternalOneofInfo = /*#__PURE__*/function () {
  function InternalOneofInfo(name) {
    _classCallCheck(this, InternalOneofInfo);
    this.kind = "oneof";
    this.repeated = false;
    this.packed = false;
    this.opt = false;
    this.req = false;
    this["default"] = undefined;
    this.fields = [];
    this.name = name;
    this.localName = localOneofName(name);
  }
  return _createClass(InternalOneofInfo, [{
    key: "addField",
    value: function addField(field) {
      assert(field.oneof === this, "field ".concat(field.name, " not one of ").concat(this.name));
      this.fields.push(field);
    }
  }, {
    key: "findField",
    value: function findField(localName) {
      if (!this._lookup) {
        this._lookup = Object.create(null);
        for (var i = 0; i < this.fields.length; i++) {
          this._lookup[this.fields[i].localName] = this.fields[i];
        }
      }
      return this._lookup[localName];
    }
  }]);
}();

/**
 * Convert a collection of field info to an array of normalized FieldInfo.
 *
 * The argument `packedByDefault` specifies whether fields that do not specify
 * `packed` should be packed (proto3) or unpacked (proto2).
 */
function normalizeFieldInfos(fieldInfos, packedByDefault) {
  var _a, _b, _c, _d, _e, _f;
  var r = [];
  var o;
  var _iterator = _createForOfIteratorHelper(typeof fieldInfos == "function" ? fieldInfos() : fieldInfos),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var field = _step.value;
      var f = field;
      f.localName = localFieldName(field.name, field.oneof !== undefined);
      f.jsonName = (_a = field.jsonName) !== null && _a !== void 0 ? _a : fieldJsonName(field.name);
      f.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
      if (field.kind == "scalar") {
        f.L = (_c = field.L) !== null && _c !== void 0 ? _c : LongType.BIGINT;
      }
      f.delimited = (_d = field.delimited) !== null && _d !== void 0 ? _d : false;
      f.req = (_e = field.req) !== null && _e !== void 0 ? _e : false;
      f.opt = (_f = field.opt) !== null && _f !== void 0 ? _f : false;
      if (field.packed === undefined) {
        if (packedByDefault) {
          f.packed = field.kind == "enum" || field.kind == "scalar" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;
        }
      }
      // We do not surface options at this time
      // f.options = field.options ?? emptyReadonlyObject;
      if (field.oneof !== undefined) {
        var ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
        if (!o || o.name != ooname) {
          o = new InternalOneofInfo(ooname);
        }
        f.oneof = o;
        o.addField(f);
      }
      r.push(f);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return r;
}

/**
 * Provides functionality for messages defined with the proto3 syntax.
 */
var proto3 = makeProtoRuntime("proto3", function (fields) {
  return new InternalFieldList(fields, function (source) {
    return normalizeFieldInfos(source, true);
  });
},
// TODO merge with proto2 and initExtensionField, also see initPartial, equals, clone
function (target) {
  var _iterator = _createForOfIteratorHelper(target.getType().fields.byMember()),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var member = _step.value;
      if (member.opt) {
        continue;
      }
      var name = member.localName,
        t = target;
      if (member.repeated) {
        t[name] = [];
        continue;
      }
      switch (member.kind) {
        case "oneof":
          t[name] = {
            "case": undefined
          };
          break;
        case "enum":
          t[name] = 0;
          break;
        case "map":
          t[name] = {};
          break;
        case "scalar":
          t[name] = scalarZeroValue(member.T, member.L);
          break;
        case "message":
          // message fields are always optional in proto3
          break;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
});

/**
 * A Timestamp represents a point in time independent of any time zone or local
 * calendar, encoded as a count of seconds and fractions of seconds at
 * nanosecond resolution. The count is relative to an epoch at UTC midnight on
 * January 1, 1970, in the proleptic Gregorian calendar which extends the
 * Gregorian calendar backwards to year one.
 *
 * All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 * second table is needed for interpretation, using a [24-hour linear
 * smear](https://developers.google.com/time/smear).
 *
 * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 * restricting to that range, we ensure that we can convert to and from [RFC
 * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 *
 * # Examples
 *
 * Example 1: Compute Timestamp from POSIX `time()`.
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(time(NULL));
 *     timestamp.set_nanos(0);
 *
 * Example 2: Compute Timestamp from POSIX `gettimeofday()`.
 *
 *     struct timeval tv;
 *     gettimeofday(&tv, NULL);
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(tv.tv_sec);
 *     timestamp.set_nanos(tv.tv_usec * 1000);
 *
 * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
 *
 *     FILETIME ft;
 *     GetSystemTimeAsFileTime(&ft);
 *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
 *
 *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
 *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
 *     Timestamp timestamp;
 *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
 *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
 *
 * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
 *
 *     long millis = System.currentTimeMillis();
 *
 *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
 *         .setNanos((int) ((millis % 1000) * 1000000)).build();
 *
 * Example 5: Compute Timestamp from Java `Instant.now()`.
 *
 *     Instant now = Instant.now();
 *
 *     Timestamp timestamp =
 *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())
 *             .setNanos(now.getNano()).build();
 *
 * Example 6: Compute Timestamp from current time in Python.
 *
 *     timestamp = Timestamp()
 *     timestamp.GetCurrentTime()
 *
 * # JSON Mapping
 *
 * In JSON format, the Timestamp type is encoded as a string in the
 * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 * format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 * where {year} is always expressed using four digits while {month}, {day},
 * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 * are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 * is required. A proto3 JSON serializer should always use UTC (as indicated by
 * "Z") when printing the Timestamp type and a proto3 JSON parser should be
 * able to accept both UTC and other timezones (as indicated by an offset).
 *
 * For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 * 01:30 UTC on January 15, 2017.
 *
 * In JavaScript, one can convert a Date object to this format using the
 * standard
 * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 * method. In Python, a standard `datetime.datetime` object can be converted
 * to this format using
 * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 * the Joda Time's [`ISODateTimeFormat.dateTime()`](
 * http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
 * ) to obtain a formatter capable of generating timestamps in this format.
 *
 *
 * @generated from message google.protobuf.Timestamp
 */
var Timestamp = /*#__PURE__*/function (_Message) {
  function Timestamp(data) {
    var _this;
    _classCallCheck(this, Timestamp);
    _this = _callSuper(this, Timestamp);
    /**
     * Represents seconds of UTC time since Unix epoch
     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59Z inclusive.
     *
     * @generated from field: int64 seconds = 1;
     */
    _this.seconds = protoInt64.zero;
    /**
     * Non-negative fractions of a second at nanosecond resolution. Negative
     * second values with fractions must still have non-negative nanos values
     * that count forward in time. Must be from 0 to 999,999,999
     * inclusive.
     *
     * @generated from field: int32 nanos = 2;
     */
    _this.nanos = 0;
    proto3.util.initPartial(data, _this);
    return _this;
  }
  _inherits(Timestamp, _Message);
  return _createClass(Timestamp, [{
    key: "fromJson",
    value: function fromJson(json, options) {
      if (typeof json !== "string") {
        throw new Error("cannot decode google.protobuf.Timestamp from JSON: ".concat(proto3.json.debug(json)));
      }
      var matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
      if (!matches) {
        throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
      }
      var ms = Date.parse(matches[1] + "-" + matches[2] + "-" + matches[3] + "T" + matches[4] + ":" + matches[5] + ":" + matches[6] + (matches[8] ? matches[8] : "Z"));
      if (Number.isNaN(ms)) {
        throw new Error("cannot decode google.protobuf.Timestamp from JSON: invalid RFC 3339 string");
      }
      if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z")) {
        throw new Error("cannot decode message google.protobuf.Timestamp from JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
      }
      this.seconds = protoInt64.parse(ms / 1000);
      this.nanos = 0;
      if (matches[7]) {
        this.nanos = parseInt("1" + matches[7] + "0".repeat(9 - matches[7].length)) - 1000000000;
      }
      return this;
    }
  }, {
    key: "toJson",
    value: function toJson(options) {
      var ms = Number(this.seconds) * 1000;
      if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z")) {
        throw new Error("cannot encode google.protobuf.Timestamp to JSON: must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive");
      }
      if (this.nanos < 0) {
        throw new Error("cannot encode google.protobuf.Timestamp to JSON: nanos must not be negative");
      }
      var z = "Z";
      if (this.nanos > 0) {
        var nanosStr = (this.nanos + 1000000000).toString().substring(1);
        if (nanosStr.substring(3) === "000000") {
          z = "." + nanosStr.substring(0, 3) + "Z";
        } else if (nanosStr.substring(6) === "000") {
          z = "." + nanosStr.substring(0, 6) + "Z";
        } else {
          z = "." + nanosStr + "Z";
        }
      }
      return new Date(ms).toISOString().replace(".000Z", z);
    }
  }, {
    key: "toDate",
    value: function toDate() {
      return new Date(Number(this.seconds) * 1000 + Math.ceil(this.nanos / 1000000));
    }
  }], [{
    key: "now",
    value: function now() {
      return Timestamp.fromDate(new Date());
    }
  }, {
    key: "fromDate",
    value: function fromDate(date) {
      var ms = date.getTime();
      return new Timestamp({
        seconds: protoInt64.parse(Math.floor(ms / 1000)),
        nanos: ms % 1000 * 1000000
      });
    }
  }, {
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new Timestamp().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new Timestamp().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new Timestamp().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(Timestamp, a, b);
    }
  }]);
}(Message);
Timestamp.runtime = proto3;
Timestamp.typeName = "google.protobuf.Timestamp";
Timestamp.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "seconds",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 2,
    name: "nanos",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }];
});

// @generated by protoc-gen-es v1.10.0 with parameter "target=dts+js"
// @generated from file livekit_metrics.proto (package livekit, syntax proto3)
/* eslint-disable */
// @ts-nocheck


/**
 * @generated from message livekit.MetricsBatch
 */
var MetricsBatch = /*@__PURE__*/proto3.makeMessageType("livekit.MetricsBatch", function () {
  return [{
    no: 1,
    name: "timestamp_ms",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 2,
    name: "normalized_timestamp",
    kind: "message",
    T: Timestamp
  }, {
    no: 3,
    name: "str_data",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 4,
    name: "time_series",
    kind: "message",
    T: TimeSeriesMetric,
    repeated: true
  }, {
    no: 5,
    name: "events",
    kind: "message",
    T: EventMetric,
    repeated: true
  }];
});

/**
 * @generated from message livekit.TimeSeriesMetric
 */
var TimeSeriesMetric = /*@__PURE__*/proto3.makeMessageType("livekit.TimeSeriesMetric", function () {
  return [{
    no: 1,
    name: "label",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 2,
    name: "participant_identity",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 3,
    name: "track_sid",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 4,
    name: "samples",
    kind: "message",
    T: MetricSample,
    repeated: true
  }, {
    no: 5,
    name: "rid",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});

/**
 * @generated from message livekit.MetricSample
 */
var MetricSample = /*@__PURE__*/proto3.makeMessageType("livekit.MetricSample", function () {
  return [{
    no: 1,
    name: "timestamp_ms",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 2,
    name: "normalized_timestamp",
    kind: "message",
    T: Timestamp
  }, {
    no: 3,
    name: "value",
    kind: "scalar",
    T: 2 /* ScalarType.FLOAT */
  }];
});

/**
 * @generated from message livekit.EventMetric
 */
var EventMetric = /*@__PURE__*/proto3.makeMessageType("livekit.EventMetric", function () {
  return [{
    no: 1,
    name: "label",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 2,
    name: "participant_identity",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 3,
    name: "track_sid",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 4,
    name: "start_timestamp_ms",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 5,
    name: "end_timestamp_ms",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */,
    opt: true
  }, {
    no: 6,
    name: "normalized_start_timestamp",
    kind: "message",
    T: Timestamp
  }, {
    no: 7,
    name: "normalized_end_timestamp",
    kind: "message",
    T: Timestamp,
    opt: true
  }, {
    no: 8,
    name: "metadata",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 9,
    name: "rid",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});

/**
 * @generated from enum livekit.AudioCodec
 */
var AudioCodec;
(function (AudioCodec) {
  /**
   * @generated from enum value: DEFAULT_AC = 0;
   */
  AudioCodec[AudioCodec["DEFAULT_AC"] = 0] = "DEFAULT_AC";
  /**
   * @generated from enum value: OPUS = 1;
   */
  AudioCodec[AudioCodec["OPUS"] = 1] = "OPUS";
  /**
   * @generated from enum value: AAC = 2;
   */
  AudioCodec[AudioCodec["AAC"] = 2] = "AAC";
})(AudioCodec || (AudioCodec = {}));
// Retrieve enum metadata with: proto3.getEnumType(AudioCodec)
proto3.util.setEnumType(AudioCodec, "livekit.AudioCodec", [{
  no: 0,
  name: "DEFAULT_AC"
}, {
  no: 1,
  name: "OPUS"
}, {
  no: 2,
  name: "AAC"
}]);
/**
 * @generated from enum livekit.VideoCodec
 */
var VideoCodec;
(function (VideoCodec) {
  /**
   * @generated from enum value: DEFAULT_VC = 0;
   */
  VideoCodec[VideoCodec["DEFAULT_VC"] = 0] = "DEFAULT_VC";
  /**
   * @generated from enum value: H264_BASELINE = 1;
   */
  VideoCodec[VideoCodec["H264_BASELINE"] = 1] = "H264_BASELINE";
  /**
   * @generated from enum value: H264_MAIN = 2;
   */
  VideoCodec[VideoCodec["H264_MAIN"] = 2] = "H264_MAIN";
  /**
   * @generated from enum value: H264_HIGH = 3;
   */
  VideoCodec[VideoCodec["H264_HIGH"] = 3] = "H264_HIGH";
  /**
   * @generated from enum value: VP8 = 4;
   */
  VideoCodec[VideoCodec["VP8"] = 4] = "VP8";
})(VideoCodec || (VideoCodec = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoCodec)
proto3.util.setEnumType(VideoCodec, "livekit.VideoCodec", [{
  no: 0,
  name: "DEFAULT_VC"
}, {
  no: 1,
  name: "H264_BASELINE"
}, {
  no: 2,
  name: "H264_MAIN"
}, {
  no: 3,
  name: "H264_HIGH"
}, {
  no: 4,
  name: "VP8"
}]);
/**
 * @generated from enum livekit.ImageCodec
 */
var ImageCodec;
(function (ImageCodec) {
  /**
   * @generated from enum value: IC_DEFAULT = 0;
   */
  ImageCodec[ImageCodec["IC_DEFAULT"] = 0] = "IC_DEFAULT";
  /**
   * @generated from enum value: IC_JPEG = 1;
   */
  ImageCodec[ImageCodec["IC_JPEG"] = 1] = "IC_JPEG";
})(ImageCodec || (ImageCodec = {}));
// Retrieve enum metadata with: proto3.getEnumType(ImageCodec)
proto3.util.setEnumType(ImageCodec, "livekit.ImageCodec", [{
  no: 0,
  name: "IC_DEFAULT"
}, {
  no: 1,
  name: "IC_JPEG"
}]);
/**
 * @generated from enum livekit.TrackType
 */
var TrackType;
(function (TrackType) {
  /**
   * @generated from enum value: AUDIO = 0;
   */
  TrackType[TrackType["AUDIO"] = 0] = "AUDIO";
  /**
   * @generated from enum value: VIDEO = 1;
   */
  TrackType[TrackType["VIDEO"] = 1] = "VIDEO";
  /**
   * @generated from enum value: DATA = 2;
   */
  TrackType[TrackType["DATA"] = 2] = "DATA";
})(TrackType || (TrackType = {}));
// Retrieve enum metadata with: proto3.getEnumType(TrackType)
proto3.util.setEnumType(TrackType, "livekit.TrackType", [{
  no: 0,
  name: "AUDIO"
}, {
  no: 1,
  name: "VIDEO"
}, {
  no: 2,
  name: "DATA"
}]);
/**
 * @generated from enum livekit.TrackSource
 */
var TrackSource;
(function (TrackSource) {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  TrackSource[TrackSource["UNKNOWN"] = 0] = "UNKNOWN";
  /**
   * @generated from enum value: CAMERA = 1;
   */
  TrackSource[TrackSource["CAMERA"] = 1] = "CAMERA";
  /**
   * @generated from enum value: MICROPHONE = 2;
   */
  TrackSource[TrackSource["MICROPHONE"] = 2] = "MICROPHONE";
  /**
   * @generated from enum value: SCREEN_SHARE = 3;
   */
  TrackSource[TrackSource["SCREEN_SHARE"] = 3] = "SCREEN_SHARE";
  /**
   * @generated from enum value: SCREEN_SHARE_AUDIO = 4;
   */
  TrackSource[TrackSource["SCREEN_SHARE_AUDIO"] = 4] = "SCREEN_SHARE_AUDIO";
})(TrackSource || (TrackSource = {}));
// Retrieve enum metadata with: proto3.getEnumType(TrackSource)
proto3.util.setEnumType(TrackSource, "livekit.TrackSource", [{
  no: 0,
  name: "UNKNOWN"
}, {
  no: 1,
  name: "CAMERA"
}, {
  no: 2,
  name: "MICROPHONE"
}, {
  no: 3,
  name: "SCREEN_SHARE"
}, {
  no: 4,
  name: "SCREEN_SHARE_AUDIO"
}]);
/**
 * @generated from enum livekit.VideoQuality
 */
var VideoQuality$1;
(function (VideoQuality) {
  /**
   * @generated from enum value: LOW = 0;
   */
  VideoQuality[VideoQuality["LOW"] = 0] = "LOW";
  /**
   * @generated from enum value: MEDIUM = 1;
   */
  VideoQuality[VideoQuality["MEDIUM"] = 1] = "MEDIUM";
  /**
   * @generated from enum value: HIGH = 2;
   */
  VideoQuality[VideoQuality["HIGH"] = 2] = "HIGH";
  /**
   * @generated from enum value: OFF = 3;
   */
  VideoQuality[VideoQuality["OFF"] = 3] = "OFF";
})(VideoQuality$1 || (VideoQuality$1 = {}));
// Retrieve enum metadata with: proto3.getEnumType(VideoQuality)
proto3.util.setEnumType(VideoQuality$1, "livekit.VideoQuality", [{
  no: 0,
  name: "LOW"
}, {
  no: 1,
  name: "MEDIUM"
}, {
  no: 2,
  name: "HIGH"
}, {
  no: 3,
  name: "OFF"
}]);
/**
 * @generated from enum livekit.ConnectionQuality
 */
var ConnectionQuality;
(function (ConnectionQuality) {
  /**
   * @generated from enum value: POOR = 0;
   */
  ConnectionQuality[ConnectionQuality["POOR"] = 0] = "POOR";
  /**
   * @generated from enum value: GOOD = 1;
   */
  ConnectionQuality[ConnectionQuality["GOOD"] = 1] = "GOOD";
  /**
   * @generated from enum value: EXCELLENT = 2;
   */
  ConnectionQuality[ConnectionQuality["EXCELLENT"] = 2] = "EXCELLENT";
  /**
   * @generated from enum value: LOST = 3;
   */
  ConnectionQuality[ConnectionQuality["LOST"] = 3] = "LOST";
})(ConnectionQuality || (ConnectionQuality = {}));
// Retrieve enum metadata with: proto3.getEnumType(ConnectionQuality)
proto3.util.setEnumType(ConnectionQuality, "livekit.ConnectionQuality", [{
  no: 0,
  name: "POOR"
}, {
  no: 1,
  name: "GOOD"
}, {
  no: 2,
  name: "EXCELLENT"
}, {
  no: 3,
  name: "LOST"
}]);
/**
 * @generated from enum livekit.ClientConfigSetting
 */
var ClientConfigSetting;
(function (ClientConfigSetting) {
  /**
   * @generated from enum value: UNSET = 0;
   */
  ClientConfigSetting[ClientConfigSetting["UNSET"] = 0] = "UNSET";
  /**
   * @generated from enum value: DISABLED = 1;
   */
  ClientConfigSetting[ClientConfigSetting["DISABLED"] = 1] = "DISABLED";
  /**
   * @generated from enum value: ENABLED = 2;
   */
  ClientConfigSetting[ClientConfigSetting["ENABLED"] = 2] = "ENABLED";
})(ClientConfigSetting || (ClientConfigSetting = {}));
// Retrieve enum metadata with: proto3.getEnumType(ClientConfigSetting)
proto3.util.setEnumType(ClientConfigSetting, "livekit.ClientConfigSetting", [{
  no: 0,
  name: "UNSET"
}, {
  no: 1,
  name: "DISABLED"
}, {
  no: 2,
  name: "ENABLED"
}]);
/**
 * @generated from enum livekit.DisconnectReason
 */
var DisconnectReason;
(function (DisconnectReason) {
  /**
   * @generated from enum value: UNKNOWN_REASON = 0;
   */
  DisconnectReason[DisconnectReason["UNKNOWN_REASON"] = 0] = "UNKNOWN_REASON";
  /**
   * the client initiated the disconnect
   *
   * @generated from enum value: CLIENT_INITIATED = 1;
   */
  DisconnectReason[DisconnectReason["CLIENT_INITIATED"] = 1] = "CLIENT_INITIATED";
  /**
   * another participant with the same identity has joined the room
   *
   * @generated from enum value: DUPLICATE_IDENTITY = 2;
   */
  DisconnectReason[DisconnectReason["DUPLICATE_IDENTITY"] = 2] = "DUPLICATE_IDENTITY";
  /**
   * the server instance is shutting down
   *
   * @generated from enum value: SERVER_SHUTDOWN = 3;
   */
  DisconnectReason[DisconnectReason["SERVER_SHUTDOWN"] = 3] = "SERVER_SHUTDOWN";
  /**
   * RoomService.RemoveParticipant was called
   *
   * @generated from enum value: PARTICIPANT_REMOVED = 4;
   */
  DisconnectReason[DisconnectReason["PARTICIPANT_REMOVED"] = 4] = "PARTICIPANT_REMOVED";
  /**
   * RoomService.DeleteRoom was called
   *
   * @generated from enum value: ROOM_DELETED = 5;
   */
  DisconnectReason[DisconnectReason["ROOM_DELETED"] = 5] = "ROOM_DELETED";
  /**
   * the client is attempting to resume a session, but server is not aware of it
   *
   * @generated from enum value: STATE_MISMATCH = 6;
   */
  DisconnectReason[DisconnectReason["STATE_MISMATCH"] = 6] = "STATE_MISMATCH";
  /**
   * client was unable to connect fully
   *
   * @generated from enum value: JOIN_FAILURE = 7;
   */
  DisconnectReason[DisconnectReason["JOIN_FAILURE"] = 7] = "JOIN_FAILURE";
  /**
   * Cloud-only, the server requested Participant to migrate the connection elsewhere
   *
   * @generated from enum value: MIGRATION = 8;
   */
  DisconnectReason[DisconnectReason["MIGRATION"] = 8] = "MIGRATION";
  /**
   * the signal websocket was closed unexpectedly
   *
   * @generated from enum value: SIGNAL_CLOSE = 9;
   */
  DisconnectReason[DisconnectReason["SIGNAL_CLOSE"] = 9] = "SIGNAL_CLOSE";
  /**
   * the room was closed, due to all Standard and Ingress participants having left
   *
   * @generated from enum value: ROOM_CLOSED = 10;
   */
  DisconnectReason[DisconnectReason["ROOM_CLOSED"] = 10] = "ROOM_CLOSED";
  /**
   * SIP callee did not respond in time
   *
   * @generated from enum value: USER_UNAVAILABLE = 11;
   */
  DisconnectReason[DisconnectReason["USER_UNAVAILABLE"] = 11] = "USER_UNAVAILABLE";
  /**
   * SIP callee rejected the call (busy)
   *
   * @generated from enum value: USER_REJECTED = 12;
   */
  DisconnectReason[DisconnectReason["USER_REJECTED"] = 12] = "USER_REJECTED";
  /**
   * SIP protocol failure or unexpected response
   *
   * @generated from enum value: SIP_TRUNK_FAILURE = 13;
   */
  DisconnectReason[DisconnectReason["SIP_TRUNK_FAILURE"] = 13] = "SIP_TRUNK_FAILURE";
})(DisconnectReason || (DisconnectReason = {}));
// Retrieve enum metadata with: proto3.getEnumType(DisconnectReason)
proto3.util.setEnumType(DisconnectReason, "livekit.DisconnectReason", [{
  no: 0,
  name: "UNKNOWN_REASON"
}, {
  no: 1,
  name: "CLIENT_INITIATED"
}, {
  no: 2,
  name: "DUPLICATE_IDENTITY"
}, {
  no: 3,
  name: "SERVER_SHUTDOWN"
}, {
  no: 4,
  name: "PARTICIPANT_REMOVED"
}, {
  no: 5,
  name: "ROOM_DELETED"
}, {
  no: 6,
  name: "STATE_MISMATCH"
}, {
  no: 7,
  name: "JOIN_FAILURE"
}, {
  no: 8,
  name: "MIGRATION"
}, {
  no: 9,
  name: "SIGNAL_CLOSE"
}, {
  no: 10,
  name: "ROOM_CLOSED"
}, {
  no: 11,
  name: "USER_UNAVAILABLE"
}, {
  no: 12,
  name: "USER_REJECTED"
}, {
  no: 13,
  name: "SIP_TRUNK_FAILURE"
}]);
/**
 * @generated from enum livekit.ReconnectReason
 */
var ReconnectReason;
(function (ReconnectReason) {
  /**
   * @generated from enum value: RR_UNKNOWN = 0;
   */
  ReconnectReason[ReconnectReason["RR_UNKNOWN"] = 0] = "RR_UNKNOWN";
  /**
   * @generated from enum value: RR_SIGNAL_DISCONNECTED = 1;
   */
  ReconnectReason[ReconnectReason["RR_SIGNAL_DISCONNECTED"] = 1] = "RR_SIGNAL_DISCONNECTED";
  /**
   * @generated from enum value: RR_PUBLISHER_FAILED = 2;
   */
  ReconnectReason[ReconnectReason["RR_PUBLISHER_FAILED"] = 2] = "RR_PUBLISHER_FAILED";
  /**
   * @generated from enum value: RR_SUBSCRIBER_FAILED = 3;
   */
  ReconnectReason[ReconnectReason["RR_SUBSCRIBER_FAILED"] = 3] = "RR_SUBSCRIBER_FAILED";
  /**
   * @generated from enum value: RR_SWITCH_CANDIDATE = 4;
   */
  ReconnectReason[ReconnectReason["RR_SWITCH_CANDIDATE"] = 4] = "RR_SWITCH_CANDIDATE";
})(ReconnectReason || (ReconnectReason = {}));
// Retrieve enum metadata with: proto3.getEnumType(ReconnectReason)
proto3.util.setEnumType(ReconnectReason, "livekit.ReconnectReason", [{
  no: 0,
  name: "RR_UNKNOWN"
}, {
  no: 1,
  name: "RR_SIGNAL_DISCONNECTED"
}, {
  no: 2,
  name: "RR_PUBLISHER_FAILED"
}, {
  no: 3,
  name: "RR_SUBSCRIBER_FAILED"
}, {
  no: 4,
  name: "RR_SWITCH_CANDIDATE"
}]);
/**
 * @generated from enum livekit.SubscriptionError
 */
var SubscriptionError;
(function (SubscriptionError) {
  /**
   * @generated from enum value: SE_UNKNOWN = 0;
   */
  SubscriptionError[SubscriptionError["SE_UNKNOWN"] = 0] = "SE_UNKNOWN";
  /**
   * @generated from enum value: SE_CODEC_UNSUPPORTED = 1;
   */
  SubscriptionError[SubscriptionError["SE_CODEC_UNSUPPORTED"] = 1] = "SE_CODEC_UNSUPPORTED";
  /**
   * @generated from enum value: SE_TRACK_NOTFOUND = 2;
   */
  SubscriptionError[SubscriptionError["SE_TRACK_NOTFOUND"] = 2] = "SE_TRACK_NOTFOUND";
})(SubscriptionError || (SubscriptionError = {}));
// Retrieve enum metadata with: proto3.getEnumType(SubscriptionError)
proto3.util.setEnumType(SubscriptionError, "livekit.SubscriptionError", [{
  no: 0,
  name: "SE_UNKNOWN"
}, {
  no: 1,
  name: "SE_CODEC_UNSUPPORTED"
}, {
  no: 2,
  name: "SE_TRACK_NOTFOUND"
}]);
/**
 * @generated from enum livekit.AudioTrackFeature
 */
var AudioTrackFeature;
(function (AudioTrackFeature) {
  /**
   * @generated from enum value: TF_STEREO = 0;
   */
  AudioTrackFeature[AudioTrackFeature["TF_STEREO"] = 0] = "TF_STEREO";
  /**
   * @generated from enum value: TF_NO_DTX = 1;
   */
  AudioTrackFeature[AudioTrackFeature["TF_NO_DTX"] = 1] = "TF_NO_DTX";
  /**
   * @generated from enum value: TF_AUTO_GAIN_CONTROL = 2;
   */
  AudioTrackFeature[AudioTrackFeature["TF_AUTO_GAIN_CONTROL"] = 2] = "TF_AUTO_GAIN_CONTROL";
  /**
   * @generated from enum value: TF_ECHO_CANCELLATION = 3;
   */
  AudioTrackFeature[AudioTrackFeature["TF_ECHO_CANCELLATION"] = 3] = "TF_ECHO_CANCELLATION";
  /**
   * @generated from enum value: TF_NOISE_SUPPRESSION = 4;
   */
  AudioTrackFeature[AudioTrackFeature["TF_NOISE_SUPPRESSION"] = 4] = "TF_NOISE_SUPPRESSION";
  /**
   * @generated from enum value: TF_ENHANCED_NOISE_CANCELLATION = 5;
   */
  AudioTrackFeature[AudioTrackFeature["TF_ENHANCED_NOISE_CANCELLATION"] = 5] = "TF_ENHANCED_NOISE_CANCELLATION";
})(AudioTrackFeature || (AudioTrackFeature = {}));
// Retrieve enum metadata with: proto3.getEnumType(AudioTrackFeature)
proto3.util.setEnumType(AudioTrackFeature, "livekit.AudioTrackFeature", [{
  no: 0,
  name: "TF_STEREO"
}, {
  no: 1,
  name: "TF_NO_DTX"
}, {
  no: 2,
  name: "TF_AUTO_GAIN_CONTROL"
}, {
  no: 3,
  name: "TF_ECHO_CANCELLATION"
}, {
  no: 4,
  name: "TF_NOISE_SUPPRESSION"
}, {
  no: 5,
  name: "TF_ENHANCED_NOISE_CANCELLATION"
}]);
/**
 * @generated from message livekit.Room
 */
var Room = /*#__PURE__*/function (_Message) {
  function Room(data) {
    var _this;
    _classCallCheck(this, Room);
    _this = _callSuper(this, Room);
    /**
     * @generated from field: string sid = 1;
     */
    _this.sid = "";
    /**
     * @generated from field: string name = 2;
     */
    _this.name = "";
    /**
     * @generated from field: uint32 empty_timeout = 3;
     */
    _this.emptyTimeout = 0;
    /**
     * @generated from field: uint32 departure_timeout = 14;
     */
    _this.departureTimeout = 0;
    /**
     * @generated from field: uint32 max_participants = 4;
     */
    _this.maxParticipants = 0;
    /**
     * @generated from field: int64 creation_time = 5;
     */
    _this.creationTime = protoInt64.zero;
    /**
     * @generated from field: string turn_password = 6;
     */
    _this.turnPassword = "";
    /**
     * @generated from field: repeated livekit.Codec enabled_codecs = 7;
     */
    _this.enabledCodecs = [];
    /**
     * @generated from field: string metadata = 8;
     */
    _this.metadata = "";
    /**
     * @generated from field: uint32 num_participants = 9;
     */
    _this.numParticipants = 0;
    /**
     * @generated from field: uint32 num_publishers = 11;
     */
    _this.numPublishers = 0;
    /**
     * @generated from field: bool active_recording = 10;
     */
    _this.activeRecording = false;
    proto3.util.initPartial(data, _this);
    return _this;
  }
  _inherits(Room, _Message);
  return _createClass(Room, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new Room().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new Room().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new Room().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(Room, a, b);
    }
  }]);
}(Message);
Room.runtime = proto3;
Room.typeName = "livekit.Room";
Room.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "empty_timeout",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 14,
    name: "departure_timeout",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 4,
    name: "max_participants",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 5,
    name: "creation_time",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 6,
    name: "turn_password",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 7,
    name: "enabled_codecs",
    kind: "message",
    T: Codec,
    repeated: true
  }, {
    no: 8,
    name: "metadata",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 9,
    name: "num_participants",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 11,
    name: "num_publishers",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 10,
    name: "active_recording",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 13,
    name: "version",
    kind: "message",
    T: TimedVersion
  }];
});
/**
 * @generated from message livekit.Codec
 */
var Codec = /*#__PURE__*/function (_Message2) {
  function Codec(data) {
    var _this2;
    _classCallCheck(this, Codec);
    _this2 = _callSuper(this, Codec);
    /**
     * @generated from field: string mime = 1;
     */
    _this2.mime = "";
    /**
     * @generated from field: string fmtp_line = 2;
     */
    _this2.fmtpLine = "";
    proto3.util.initPartial(data, _this2);
    return _this2;
  }
  _inherits(Codec, _Message2);
  return _createClass(Codec, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new Codec().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new Codec().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new Codec().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(Codec, a, b);
    }
  }]);
}(Message);
Codec.runtime = proto3;
Codec.typeName = "livekit.Codec";
Codec.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "mime",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "fmtp_line",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.PlayoutDelay
 */
var PlayoutDelay = /*#__PURE__*/function (_Message3) {
  function PlayoutDelay(data) {
    var _this3;
    _classCallCheck(this, PlayoutDelay);
    _this3 = _callSuper(this, PlayoutDelay);
    /**
     * @generated from field: bool enabled = 1;
     */
    _this3.enabled = false;
    /**
     * @generated from field: uint32 min = 2;
     */
    _this3.min = 0;
    /**
     * @generated from field: uint32 max = 3;
     */
    _this3.max = 0;
    proto3.util.initPartial(data, _this3);
    return _this3;
  }
  _inherits(PlayoutDelay, _Message3);
  return _createClass(PlayoutDelay, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new PlayoutDelay().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new PlayoutDelay().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new PlayoutDelay().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(PlayoutDelay, a, b);
    }
  }]);
}(Message);
PlayoutDelay.runtime = proto3;
PlayoutDelay.typeName = "livekit.PlayoutDelay";
PlayoutDelay.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "enabled",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 2,
    name: "min",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 3,
    name: "max",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});
/**
 * @generated from message livekit.ParticipantPermission
 */
var ParticipantPermission = /*#__PURE__*/function (_Message4) {
  function ParticipantPermission(data) {
    var _this4;
    _classCallCheck(this, ParticipantPermission);
    _this4 = _callSuper(this, ParticipantPermission);
    /**
     * allow participant to subscribe to other tracks in the room
     *
     * @generated from field: bool can_subscribe = 1;
     */
    _this4.canSubscribe = false;
    /**
     * allow participant to publish new tracks to room
     *
     * @generated from field: bool can_publish = 2;
     */
    _this4.canPublish = false;
    /**
     * allow participant to publish data
     *
     * @generated from field: bool can_publish_data = 3;
     */
    _this4.canPublishData = false;
    /**
     * sources that are allowed to be published
     *
     * @generated from field: repeated livekit.TrackSource can_publish_sources = 9;
     */
    _this4.canPublishSources = [];
    /**
     * indicates that it's hidden to others
     *
     * @generated from field: bool hidden = 7;
     */
    _this4.hidden = false;
    /**
     * indicates it's a recorder instance
     * deprecated: use ParticipantInfo.kind instead
     *
     * @generated from field: bool recorder = 8 [deprecated = true];
     * @deprecated
     */
    _this4.recorder = false;
    /**
     * indicates that participant can update own metadata and attributes
     *
     * @generated from field: bool can_update_metadata = 10;
     */
    _this4.canUpdateMetadata = false;
    /**
     * indicates that participant is an agent
     * deprecated: use ParticipantInfo.kind instead
     *
     * @generated from field: bool agent = 11 [deprecated = true];
     * @deprecated
     */
    _this4.agent = false;
    /**
     * if a participant can subscribe to metrics
     *
     * @generated from field: bool can_subscribe_metrics = 12;
     */
    _this4.canSubscribeMetrics = false;
    proto3.util.initPartial(data, _this4);
    return _this4;
  }
  _inherits(ParticipantPermission, _Message4);
  return _createClass(ParticipantPermission, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ParticipantPermission().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ParticipantPermission().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ParticipantPermission().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ParticipantPermission, a, b);
    }
  }]);
}(Message);
ParticipantPermission.runtime = proto3;
ParticipantPermission.typeName = "livekit.ParticipantPermission";
ParticipantPermission.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "can_subscribe",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 2,
    name: "can_publish",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 3,
    name: "can_publish_data",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 9,
    name: "can_publish_sources",
    kind: "enum",
    T: proto3.getEnumType(TrackSource),
    repeated: true
  }, {
    no: 7,
    name: "hidden",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 8,
    name: "recorder",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 10,
    name: "can_update_metadata",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 11,
    name: "agent",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 12,
    name: "can_subscribe_metrics",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.ParticipantInfo
 */
var ParticipantInfo = /*#__PURE__*/function (_Message5) {
  function ParticipantInfo(data) {
    var _this5;
    _classCallCheck(this, ParticipantInfo);
    _this5 = _callSuper(this, ParticipantInfo);
    /**
     * @generated from field: string sid = 1;
     */
    _this5.sid = "";
    /**
     * @generated from field: string identity = 2;
     */
    _this5.identity = "";
    /**
     * @generated from field: livekit.ParticipantInfo.State state = 3;
     */
    _this5.state = ParticipantInfo_State.JOINING;
    /**
     * @generated from field: repeated livekit.TrackInfo tracks = 4;
     */
    _this5.tracks = [];
    /**
     * @generated from field: string metadata = 5;
     */
    _this5.metadata = "";
    /**
     * timestamp when participant joined room, in seconds
     *
     * @generated from field: int64 joined_at = 6;
     */
    _this5.joinedAt = protoInt64.zero;
    /**
     * @generated from field: string name = 9;
     */
    _this5.name = "";
    /**
     * @generated from field: uint32 version = 10;
     */
    _this5.version = 0;
    /**
     * @generated from field: string region = 12;
     */
    _this5.region = "";
    /**
     * indicates the participant has an active publisher connection
     * and can publish to the server
     *
     * @generated from field: bool is_publisher = 13;
     */
    _this5.isPublisher = false;
    /**
     * @generated from field: livekit.ParticipantInfo.Kind kind = 14;
     */
    _this5.kind = ParticipantInfo_Kind.STANDARD;
    /**
     * @generated from field: map<string, string> attributes = 15;
     */
    _this5.attributes = {};
    /**
     * @generated from field: livekit.DisconnectReason disconnect_reason = 16;
     */
    _this5.disconnectReason = DisconnectReason.UNKNOWN_REASON;
    proto3.util.initPartial(data, _this5);
    return _this5;
  }
  _inherits(ParticipantInfo, _Message5);
  return _createClass(ParticipantInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ParticipantInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ParticipantInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ParticipantInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ParticipantInfo, a, b);
    }
  }]);
}(Message);
ParticipantInfo.runtime = proto3;
ParticipantInfo.typeName = "livekit.ParticipantInfo";
ParticipantInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "identity",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "state",
    kind: "enum",
    T: proto3.getEnumType(ParticipantInfo_State)
  }, {
    no: 4,
    name: "tracks",
    kind: "message",
    T: TrackInfo,
    repeated: true
  }, {
    no: 5,
    name: "metadata",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 6,
    name: "joined_at",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 9,
    name: "name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 10,
    name: "version",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 11,
    name: "permission",
    kind: "message",
    T: ParticipantPermission
  }, {
    no: 12,
    name: "region",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 13,
    name: "is_publisher",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 14,
    name: "kind",
    kind: "enum",
    T: proto3.getEnumType(ParticipantInfo_Kind)
  }, {
    no: 15,
    name: "attributes",
    kind: "map",
    K: 9 /* ScalarType.STRING */,
    V: {
      kind: "scalar",
      T: 9 /* ScalarType.STRING */
    }
  }, {
    no: 16,
    name: "disconnect_reason",
    kind: "enum",
    T: proto3.getEnumType(DisconnectReason)
  }];
});
/**
 * @generated from enum livekit.ParticipantInfo.State
 */
var ParticipantInfo_State;
(function (ParticipantInfo_State) {
  /**
   * websocket' connected, but not offered yet
   *
   * @generated from enum value: JOINING = 0;
   */
  ParticipantInfo_State[ParticipantInfo_State["JOINING"] = 0] = "JOINING";
  /**
   * server received client offer
   *
   * @generated from enum value: JOINED = 1;
   */
  ParticipantInfo_State[ParticipantInfo_State["JOINED"] = 1] = "JOINED";
  /**
   * ICE connectivity established
   *
   * @generated from enum value: ACTIVE = 2;
   */
  ParticipantInfo_State[ParticipantInfo_State["ACTIVE"] = 2] = "ACTIVE";
  /**
   * WS disconnected
   *
   * @generated from enum value: DISCONNECTED = 3;
   */
  ParticipantInfo_State[ParticipantInfo_State["DISCONNECTED"] = 3] = "DISCONNECTED";
})(ParticipantInfo_State || (ParticipantInfo_State = {}));
// Retrieve enum metadata with: proto3.getEnumType(ParticipantInfo_State)
proto3.util.setEnumType(ParticipantInfo_State, "livekit.ParticipantInfo.State", [{
  no: 0,
  name: "JOINING"
}, {
  no: 1,
  name: "JOINED"
}, {
  no: 2,
  name: "ACTIVE"
}, {
  no: 3,
  name: "DISCONNECTED"
}]);
/**
 * @generated from enum livekit.ParticipantInfo.Kind
 */
var ParticipantInfo_Kind;
(function (ParticipantInfo_Kind) {
  /**
   * standard participants, e.g. web clients
   *
   * @generated from enum value: STANDARD = 0;
   */
  ParticipantInfo_Kind[ParticipantInfo_Kind["STANDARD"] = 0] = "STANDARD";
  /**
   * only ingests streams
   *
   * @generated from enum value: INGRESS = 1;
   */
  ParticipantInfo_Kind[ParticipantInfo_Kind["INGRESS"] = 1] = "INGRESS";
  /**
   * only consumes streams
   *
   * @generated from enum value: EGRESS = 2;
   */
  ParticipantInfo_Kind[ParticipantInfo_Kind["EGRESS"] = 2] = "EGRESS";
  /**
   * SIP participants
   *
   * @generated from enum value: SIP = 3;
   */
  ParticipantInfo_Kind[ParticipantInfo_Kind["SIP"] = 3] = "SIP";
  /**
   * LiveKit agents
   *
   * @generated from enum value: AGENT = 4;
   */
  ParticipantInfo_Kind[ParticipantInfo_Kind["AGENT"] = 4] = "AGENT";
})(ParticipantInfo_Kind || (ParticipantInfo_Kind = {}));
// Retrieve enum metadata with: proto3.getEnumType(ParticipantInfo_Kind)
proto3.util.setEnumType(ParticipantInfo_Kind, "livekit.ParticipantInfo.Kind", [{
  no: 0,
  name: "STANDARD"
}, {
  no: 1,
  name: "INGRESS"
}, {
  no: 2,
  name: "EGRESS"
}, {
  no: 3,
  name: "SIP"
}, {
  no: 4,
  name: "AGENT"
}]);
/**
 * @generated from message livekit.Encryption
 */
var Encryption = /*#__PURE__*/function (_Message6) {
  function Encryption(data) {
    var _this6;
    _classCallCheck(this, Encryption);
    _this6 = _callSuper(this, Encryption);
    proto3.util.initPartial(data, _this6);
    return _this6;
  }
  _inherits(Encryption, _Message6);
  return _createClass(Encryption, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new Encryption().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new Encryption().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new Encryption().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(Encryption, a, b);
    }
  }]);
}(Message);
Encryption.runtime = proto3;
Encryption.typeName = "livekit.Encryption";
Encryption.fields = proto3.util.newFieldList(function () {
  return [];
});
/**
 * @generated from enum livekit.Encryption.Type
 */
var Encryption_Type;
(function (Encryption_Type) {
  /**
   * @generated from enum value: NONE = 0;
   */
  Encryption_Type[Encryption_Type["NONE"] = 0] = "NONE";
  /**
   * @generated from enum value: GCM = 1;
   */
  Encryption_Type[Encryption_Type["GCM"] = 1] = "GCM";
  /**
   * @generated from enum value: CUSTOM = 2;
   */
  Encryption_Type[Encryption_Type["CUSTOM"] = 2] = "CUSTOM";
})(Encryption_Type || (Encryption_Type = {}));
// Retrieve enum metadata with: proto3.getEnumType(Encryption_Type)
proto3.util.setEnumType(Encryption_Type, "livekit.Encryption.Type", [{
  no: 0,
  name: "NONE"
}, {
  no: 1,
  name: "GCM"
}, {
  no: 2,
  name: "CUSTOM"
}]);
/**
 * @generated from message livekit.SimulcastCodecInfo
 */
var SimulcastCodecInfo = /*#__PURE__*/function (_Message7) {
  function SimulcastCodecInfo(data) {
    var _this7;
    _classCallCheck(this, SimulcastCodecInfo);
    _this7 = _callSuper(this, SimulcastCodecInfo);
    /**
     * @generated from field: string mime_type = 1;
     */
    _this7.mimeType = "";
    /**
     * @generated from field: string mid = 2;
     */
    _this7.mid = "";
    /**
     * @generated from field: string cid = 3;
     */
    _this7.cid = "";
    /**
     * @generated from field: repeated livekit.VideoLayer layers = 4;
     */
    _this7.layers = [];
    proto3.util.initPartial(data, _this7);
    return _this7;
  }
  _inherits(SimulcastCodecInfo, _Message7);
  return _createClass(SimulcastCodecInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SimulcastCodecInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SimulcastCodecInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SimulcastCodecInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SimulcastCodecInfo, a, b);
    }
  }]);
}(Message);
SimulcastCodecInfo.runtime = proto3;
SimulcastCodecInfo.typeName = "livekit.SimulcastCodecInfo";
SimulcastCodecInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "mime_type",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "mid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "cid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "layers",
    kind: "message",
    T: VideoLayer,
    repeated: true
  }];
});
/**
 * @generated from message livekit.TrackInfo
 */
var TrackInfo = /*#__PURE__*/function (_Message8) {
  function TrackInfo(data) {
    var _this8;
    _classCallCheck(this, TrackInfo);
    _this8 = _callSuper(this, TrackInfo);
    /**
     * @generated from field: string sid = 1;
     */
    _this8.sid = "";
    /**
     * @generated from field: livekit.TrackType type = 2;
     */
    _this8.type = TrackType.AUDIO;
    /**
     * @generated from field: string name = 3;
     */
    _this8.name = "";
    /**
     * @generated from field: bool muted = 4;
     */
    _this8.muted = false;
    /**
     * original width of video (unset for audio)
     * clients may receive a lower resolution version with simulcast
     *
     * @generated from field: uint32 width = 5;
     */
    _this8.width = 0;
    /**
     * original height of video (unset for audio)
     *
     * @generated from field: uint32 height = 6;
     */
    _this8.height = 0;
    /**
     * true if track is simulcasted
     *
     * @generated from field: bool simulcast = 7;
     */
    _this8.simulcast = false;
    /**
     * true if DTX (Discontinuous Transmission) is disabled for audio
     *
     * @generated from field: bool disable_dtx = 8;
     */
    _this8.disableDtx = false;
    /**
     * source of media
     *
     * @generated from field: livekit.TrackSource source = 9;
     */
    _this8.source = TrackSource.UNKNOWN;
    /**
     * @generated from field: repeated livekit.VideoLayer layers = 10;
     */
    _this8.layers = [];
    /**
     * mime type of codec
     *
     * @generated from field: string mime_type = 11;
     */
    _this8.mimeType = "";
    /**
     * @generated from field: string mid = 12;
     */
    _this8.mid = "";
    /**
     * @generated from field: repeated livekit.SimulcastCodecInfo codecs = 13;
     */
    _this8.codecs = [];
    /**
     * @generated from field: bool stereo = 14;
     */
    _this8.stereo = false;
    /**
     * true if RED (Redundant Encoding) is disabled for audio
     *
     * @generated from field: bool disable_red = 15;
     */
    _this8.disableRed = false;
    /**
     * @generated from field: livekit.Encryption.Type encryption = 16;
     */
    _this8.encryption = Encryption_Type.NONE;
    /**
     * @generated from field: string stream = 17;
     */
    _this8.stream = "";
    /**
     * @generated from field: repeated livekit.AudioTrackFeature audio_features = 19;
     */
    _this8.audioFeatures = [];
    proto3.util.initPartial(data, _this8);
    return _this8;
  }
  _inherits(TrackInfo, _Message8);
  return _createClass(TrackInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TrackInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TrackInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TrackInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TrackInfo, a, b);
    }
  }]);
}(Message);
TrackInfo.runtime = proto3;
TrackInfo.typeName = "livekit.TrackInfo";
TrackInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "type",
    kind: "enum",
    T: proto3.getEnumType(TrackType)
  }, {
    no: 3,
    name: "name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "muted",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 5,
    name: "width",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 6,
    name: "height",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 7,
    name: "simulcast",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 8,
    name: "disable_dtx",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 9,
    name: "source",
    kind: "enum",
    T: proto3.getEnumType(TrackSource)
  }, {
    no: 10,
    name: "layers",
    kind: "message",
    T: VideoLayer,
    repeated: true
  }, {
    no: 11,
    name: "mime_type",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 12,
    name: "mid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 13,
    name: "codecs",
    kind: "message",
    T: SimulcastCodecInfo,
    repeated: true
  }, {
    no: 14,
    name: "stereo",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 15,
    name: "disable_red",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 16,
    name: "encryption",
    kind: "enum",
    T: proto3.getEnumType(Encryption_Type)
  }, {
    no: 17,
    name: "stream",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 18,
    name: "version",
    kind: "message",
    T: TimedVersion
  }, {
    no: 19,
    name: "audio_features",
    kind: "enum",
    T: proto3.getEnumType(AudioTrackFeature),
    repeated: true
  }];
});
/**
 * provide information about available spatial layers
 *
 * @generated from message livekit.VideoLayer
 */
var VideoLayer = /*#__PURE__*/function (_Message9) {
  function VideoLayer(data) {
    var _this9;
    _classCallCheck(this, VideoLayer);
    _this9 = _callSuper(this, VideoLayer);
    /**
     * for tracks with a single layer, this should be HIGH
     *
     * @generated from field: livekit.VideoQuality quality = 1;
     */
    _this9.quality = VideoQuality$1.LOW;
    /**
     * @generated from field: uint32 width = 2;
     */
    _this9.width = 0;
    /**
     * @generated from field: uint32 height = 3;
     */
    _this9.height = 0;
    /**
     * target bitrate in bit per second (bps), server will measure actual
     *
     * @generated from field: uint32 bitrate = 4;
     */
    _this9.bitrate = 0;
    /**
     * @generated from field: uint32 ssrc = 5;
     */
    _this9.ssrc = 0;
    proto3.util.initPartial(data, _this9);
    return _this9;
  }
  _inherits(VideoLayer, _Message9);
  return _createClass(VideoLayer, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new VideoLayer().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new VideoLayer().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new VideoLayer().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(VideoLayer, a, b);
    }
  }]);
}(Message);
VideoLayer.runtime = proto3;
VideoLayer.typeName = "livekit.VideoLayer";
VideoLayer.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "quality",
    kind: "enum",
    T: proto3.getEnumType(VideoQuality$1)
  }, {
    no: 2,
    name: "width",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 3,
    name: "height",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 4,
    name: "bitrate",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 5,
    name: "ssrc",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});
/**
 * new DataPacket API
 *
 * @generated from message livekit.DataPacket
 */
var DataPacket = /*#__PURE__*/function (_Message0) {
  function DataPacket(data) {
    var _this0;
    _classCallCheck(this, DataPacket);
    _this0 = _callSuper(this, DataPacket);
    /**
     * @generated from field: livekit.DataPacket.Kind kind = 1 [deprecated = true];
     * @deprecated
     */
    _this0.kind = DataPacket_Kind.RELIABLE;
    /**
     * participant identity of user that sent the message
     *
     * @generated from field: string participant_identity = 4;
     */
    _this0.participantIdentity = "";
    /**
     * identities of participants who will receive the message (sent to all by default)
     *
     * @generated from field: repeated string destination_identities = 5;
     */
    _this0.destinationIdentities = [];
    /**
     * @generated from oneof livekit.DataPacket.value
     */
    _this0.value = {
      "case": undefined
    };
    proto3.util.initPartial(data, _this0);
    return _this0;
  }
  _inherits(DataPacket, _Message0);
  return _createClass(DataPacket, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DataPacket().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DataPacket().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DataPacket().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DataPacket, a, b);
    }
  }]);
}(Message);
DataPacket.runtime = proto3;
DataPacket.typeName = "livekit.DataPacket";
DataPacket.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "kind",
    kind: "enum",
    T: proto3.getEnumType(DataPacket_Kind)
  }, {
    no: 4,
    name: "participant_identity",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "destination_identities",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 2,
    name: "user",
    kind: "message",
    T: UserPacket,
    oneof: "value"
  }, {
    no: 3,
    name: "speaker",
    kind: "message",
    T: ActiveSpeakerUpdate,
    oneof: "value"
  }, {
    no: 6,
    name: "sip_dtmf",
    kind: "message",
    T: SipDTMF,
    oneof: "value"
  }, {
    no: 7,
    name: "transcription",
    kind: "message",
    T: Transcription,
    oneof: "value"
  }, {
    no: 8,
    name: "metrics",
    kind: "message",
    T: MetricsBatch,
    oneof: "value"
  }, {
    no: 9,
    name: "chat_message",
    kind: "message",
    T: ChatMessage,
    oneof: "value"
  }, {
    no: 10,
    name: "rpc_request",
    kind: "message",
    T: RpcRequest,
    oneof: "value"
  }, {
    no: 11,
    name: "rpc_ack",
    kind: "message",
    T: RpcAck,
    oneof: "value"
  }, {
    no: 12,
    name: "rpc_response",
    kind: "message",
    T: RpcResponse,
    oneof: "value"
  }, {
    no: 13,
    name: "stream_header",
    kind: "message",
    T: DataStream_Header,
    oneof: "value"
  }, {
    no: 14,
    name: "stream_chunk",
    kind: "message",
    T: DataStream_Chunk,
    oneof: "value"
  }];
});
/**
 * @generated from enum livekit.DataPacket.Kind
 */
var DataPacket_Kind;
(function (DataPacket_Kind) {
  /**
   * @generated from enum value: RELIABLE = 0;
   */
  DataPacket_Kind[DataPacket_Kind["RELIABLE"] = 0] = "RELIABLE";
  /**
   * @generated from enum value: LOSSY = 1;
   */
  DataPacket_Kind[DataPacket_Kind["LOSSY"] = 1] = "LOSSY";
})(DataPacket_Kind || (DataPacket_Kind = {}));
// Retrieve enum metadata with: proto3.getEnumType(DataPacket_Kind)
proto3.util.setEnumType(DataPacket_Kind, "livekit.DataPacket.Kind", [{
  no: 0,
  name: "RELIABLE"
}, {
  no: 1,
  name: "LOSSY"
}]);
/**
 * @generated from message livekit.ActiveSpeakerUpdate
 */
var ActiveSpeakerUpdate = /*#__PURE__*/function (_Message1) {
  function ActiveSpeakerUpdate(data) {
    var _this1;
    _classCallCheck(this, ActiveSpeakerUpdate);
    _this1 = _callSuper(this, ActiveSpeakerUpdate);
    /**
     * @generated from field: repeated livekit.SpeakerInfo speakers = 1;
     */
    _this1.speakers = [];
    proto3.util.initPartial(data, _this1);
    return _this1;
  }
  _inherits(ActiveSpeakerUpdate, _Message1);
  return _createClass(ActiveSpeakerUpdate, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ActiveSpeakerUpdate().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ActiveSpeakerUpdate().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ActiveSpeakerUpdate().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ActiveSpeakerUpdate, a, b);
    }
  }]);
}(Message);
ActiveSpeakerUpdate.runtime = proto3;
ActiveSpeakerUpdate.typeName = "livekit.ActiveSpeakerUpdate";
ActiveSpeakerUpdate.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "speakers",
    kind: "message",
    T: SpeakerInfo,
    repeated: true
  }];
});
/**
 * @generated from message livekit.SpeakerInfo
 */
var SpeakerInfo = /*#__PURE__*/function (_Message10) {
  function SpeakerInfo(data) {
    var _this10;
    _classCallCheck(this, SpeakerInfo);
    _this10 = _callSuper(this, SpeakerInfo);
    /**
     * @generated from field: string sid = 1;
     */
    _this10.sid = "";
    /**
     * audio level, 0-1.0, 1 is loudest
     *
     * @generated from field: float level = 2;
     */
    _this10.level = 0;
    /**
     * true if speaker is currently active
     *
     * @generated from field: bool active = 3;
     */
    _this10.active = false;
    proto3.util.initPartial(data, _this10);
    return _this10;
  }
  _inherits(SpeakerInfo, _Message10);
  return _createClass(SpeakerInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SpeakerInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SpeakerInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SpeakerInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SpeakerInfo, a, b);
    }
  }]);
}(Message);
SpeakerInfo.runtime = proto3;
SpeakerInfo.typeName = "livekit.SpeakerInfo";
SpeakerInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "level",
    kind: "scalar",
    T: 2 /* ScalarType.FLOAT */
  }, {
    no: 3,
    name: "active",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.UserPacket
 */
var UserPacket = /*#__PURE__*/function (_Message11) {
  function UserPacket(data) {
    var _this11;
    _classCallCheck(this, UserPacket);
    _this11 = _callSuper(this, UserPacket);
    /**
     * participant ID of user that sent the message
     *
     * @generated from field: string participant_sid = 1 [deprecated = true];
     * @deprecated
     */
    _this11.participantSid = "";
    /**
     * @generated from field: string participant_identity = 5 [deprecated = true];
     * @deprecated
     */
    _this11.participantIdentity = "";
    /**
     * user defined payload
     *
     * @generated from field: bytes payload = 2;
     */
    _this11.payload = new Uint8Array(0);
    /**
     * the ID of the participants who will receive the message (sent to all by default)
     *
     * @generated from field: repeated string destination_sids = 3 [deprecated = true];
     * @deprecated
     */
    _this11.destinationSids = [];
    /**
     * identities of participants who will receive the message (sent to all by default)
     *
     * @generated from field: repeated string destination_identities = 6 [deprecated = true];
     * @deprecated
     */
    _this11.destinationIdentities = [];
    proto3.util.initPartial(data, _this11);
    return _this11;
  }
  _inherits(UserPacket, _Message11);
  return _createClass(UserPacket, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new UserPacket().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new UserPacket().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new UserPacket().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(UserPacket, a, b);
    }
  }]);
}(Message);
UserPacket.runtime = proto3;
UserPacket.typeName = "livekit.UserPacket";
UserPacket.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "participant_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "participant_identity",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "payload",
    kind: "scalar",
    T: 12 /* ScalarType.BYTES */
  }, {
    no: 3,
    name: "destination_sids",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 6,
    name: "destination_identities",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 4,
    name: "topic",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    opt: true
  }, {
    no: 8,
    name: "id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    opt: true
  }, {
    no: 9,
    name: "start_time",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */,
    opt: true
  }, {
    no: 10,
    name: "end_time",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */,
    opt: true
  }];
});
/**
 * @generated from message livekit.SipDTMF
 */
var SipDTMF = /*#__PURE__*/function (_Message12) {
  function SipDTMF(data) {
    var _this12;
    _classCallCheck(this, SipDTMF);
    _this12 = _callSuper(this, SipDTMF);
    /**
     * @generated from field: uint32 code = 3;
     */
    _this12.code = 0;
    /**
     * @generated from field: string digit = 4;
     */
    _this12.digit = "";
    proto3.util.initPartial(data, _this12);
    return _this12;
  }
  _inherits(SipDTMF, _Message12);
  return _createClass(SipDTMF, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SipDTMF().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SipDTMF().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SipDTMF().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SipDTMF, a, b);
    }
  }]);
}(Message);
SipDTMF.runtime = proto3;
SipDTMF.typeName = "livekit.SipDTMF";
SipDTMF.fields = proto3.util.newFieldList(function () {
  return [{
    no: 3,
    name: "code",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 4,
    name: "digit",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.Transcription
 */
var Transcription = /*#__PURE__*/function (_Message13) {
  function Transcription(data) {
    var _this13;
    _classCallCheck(this, Transcription);
    _this13 = _callSuper(this, Transcription);
    /**
     * Participant that got its speech transcribed
     *
     * @generated from field: string transcribed_participant_identity = 2;
     */
    _this13.transcribedParticipantIdentity = "";
    /**
     * @generated from field: string track_id = 3;
     */
    _this13.trackId = "";
    /**
     * @generated from field: repeated livekit.TranscriptionSegment segments = 4;
     */
    _this13.segments = [];
    proto3.util.initPartial(data, _this13);
    return _this13;
  }
  _inherits(Transcription, _Message13);
  return _createClass(Transcription, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new Transcription().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new Transcription().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new Transcription().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(Transcription, a, b);
    }
  }]);
}(Message);
Transcription.runtime = proto3;
Transcription.typeName = "livekit.Transcription";
Transcription.fields = proto3.util.newFieldList(function () {
  return [{
    no: 2,
    name: "transcribed_participant_identity",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "track_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "segments",
    kind: "message",
    T: TranscriptionSegment,
    repeated: true
  }];
});
/**
 * @generated from message livekit.TranscriptionSegment
 */
var TranscriptionSegment = /*#__PURE__*/function (_Message14) {
  function TranscriptionSegment(data) {
    var _this14;
    _classCallCheck(this, TranscriptionSegment);
    _this14 = _callSuper(this, TranscriptionSegment);
    /**
     * @generated from field: string id = 1;
     */
    _this14.id = "";
    /**
     * @generated from field: string text = 2;
     */
    _this14.text = "";
    /**
     * @generated from field: uint64 start_time = 3;
     */
    _this14.startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 4;
     */
    _this14.endTime = protoInt64.zero;
    /**
     * @generated from field: bool final = 5;
     */
    _this14["final"] = false;
    /**
     * @generated from field: string language = 6;
     */
    _this14.language = "";
    /**
     * @generated from field: bool error = 7;
     */
    _this14.error = false;
    /**
     * @generated from field: string failure_reason = 8;
     */
    _this14.failureReason = "";
    proto3.util.initPartial(data, _this14);
    return _this14;
  }
  _inherits(TranscriptionSegment, _Message14);
  return _createClass(TranscriptionSegment, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TranscriptionSegment().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TranscriptionSegment().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TranscriptionSegment().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TranscriptionSegment, a, b);
    }
  }]);
}(Message);
TranscriptionSegment.runtime = proto3;
TranscriptionSegment.typeName = "livekit.TranscriptionSegment";
TranscriptionSegment.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "text",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "start_time",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 4,
    name: "end_time",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 5,
    name: "final",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 6,
    name: "language",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 7,
    name: "error",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 8,
    name: "failure_reason",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.ChatMessage
 */
var ChatMessage = /*#__PURE__*/function (_Message15) {
  function ChatMessage(data) {
    var _this15;
    _classCallCheck(this, ChatMessage);
    _this15 = _callSuper(this, ChatMessage);
    /**
     * uuid
     *
     * @generated from field: string id = 1;
     */
    _this15.id = "";
    /**
     * @generated from field: int64 timestamp = 2;
     */
    _this15.timestamp = protoInt64.zero;
    /**
     * @generated from field: string message = 4;
     */
    _this15.message = "";
    /**
     * true to remove message
     *
     * @generated from field: bool deleted = 5;
     */
    _this15.deleted = false;
    /**
     * true if the chat message has been generated by an agent from a participant's audio transcription
     *
     * @generated from field: bool generated = 6;
     */
    _this15.generated = false;
    proto3.util.initPartial(data, _this15);
    return _this15;
  }
  _inherits(ChatMessage, _Message15);
  return _createClass(ChatMessage, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ChatMessage().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ChatMessage().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ChatMessage().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ChatMessage, a, b);
    }
  }]);
}(Message);
ChatMessage.runtime = proto3;
ChatMessage.typeName = "livekit.ChatMessage";
ChatMessage.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "timestamp",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 3,
    name: "edit_timestamp",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */,
    opt: true
  }, {
    no: 4,
    name: "message",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "deleted",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 6,
    name: "generated",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.RpcRequest
 */
var RpcRequest = /*#__PURE__*/function (_Message16) {
  function RpcRequest(data) {
    var _this16;
    _classCallCheck(this, RpcRequest);
    _this16 = _callSuper(this, RpcRequest);
    /**
     * @generated from field: string id = 1;
     */
    _this16.id = "";
    /**
     * @generated from field: string method = 2;
     */
    _this16.method = "";
    /**
     * @generated from field: string payload = 3;
     */
    _this16.payload = "";
    /**
     * @generated from field: uint32 response_timeout_ms = 4;
     */
    _this16.responseTimeoutMs = 0;
    /**
     * @generated from field: uint32 version = 5;
     */
    _this16.version = 0;
    proto3.util.initPartial(data, _this16);
    return _this16;
  }
  _inherits(RpcRequest, _Message16);
  return _createClass(RpcRequest, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RpcRequest().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RpcRequest().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RpcRequest().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RpcRequest, a, b);
    }
  }]);
}(Message);
RpcRequest.runtime = proto3;
RpcRequest.typeName = "livekit.RpcRequest";
RpcRequest.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "method",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "payload",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "response_timeout_ms",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 5,
    name: "version",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});
/**
 * @generated from message livekit.RpcAck
 */
var RpcAck = /*#__PURE__*/function (_Message17) {
  function RpcAck(data) {
    var _this17;
    _classCallCheck(this, RpcAck);
    _this17 = _callSuper(this, RpcAck);
    /**
     * @generated from field: string request_id = 1;
     */
    _this17.requestId = "";
    proto3.util.initPartial(data, _this17);
    return _this17;
  }
  _inherits(RpcAck, _Message17);
  return _createClass(RpcAck, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RpcAck().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RpcAck().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RpcAck().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RpcAck, a, b);
    }
  }]);
}(Message);
RpcAck.runtime = proto3;
RpcAck.typeName = "livekit.RpcAck";
RpcAck.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "request_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.RpcResponse
 */
var RpcResponse = /*#__PURE__*/function (_Message18) {
  function RpcResponse(data) {
    var _this18;
    _classCallCheck(this, RpcResponse);
    _this18 = _callSuper(this, RpcResponse);
    /**
     * @generated from field: string request_id = 1;
     */
    _this18.requestId = "";
    /**
     * @generated from oneof livekit.RpcResponse.value
     */
    _this18.value = {
      "case": undefined
    };
    proto3.util.initPartial(data, _this18);
    return _this18;
  }
  _inherits(RpcResponse, _Message18);
  return _createClass(RpcResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RpcResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RpcResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RpcResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RpcResponse, a, b);
    }
  }]);
}(Message);
RpcResponse.runtime = proto3;
RpcResponse.typeName = "livekit.RpcResponse";
RpcResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "request_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "payload",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    oneof: "value"
  }, {
    no: 3,
    name: "error",
    kind: "message",
    T: RpcError,
    oneof: "value"
  }];
});
/**
 * @generated from message livekit.RpcError
 */
var RpcError = /*#__PURE__*/function (_Message19) {
  function RpcError(data) {
    var _this19;
    _classCallCheck(this, RpcError);
    _this19 = _callSuper(this, RpcError);
    /**
     * @generated from field: uint32 code = 1;
     */
    _this19.code = 0;
    /**
     * @generated from field: string message = 2;
     */
    _this19.message = "";
    /**
     * @generated from field: string data = 3;
     */
    _this19.data = "";
    proto3.util.initPartial(data, _this19);
    return _this19;
  }
  _inherits(RpcError, _Message19);
  return _createClass(RpcError, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RpcError().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RpcError().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RpcError().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RpcError, a, b);
    }
  }]);
}(Message);
RpcError.runtime = proto3;
RpcError.typeName = "livekit.RpcError";
RpcError.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "code",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 2,
    name: "message",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "data",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.ParticipantTracks
 */
var ParticipantTracks = /*#__PURE__*/function (_Message20) {
  function ParticipantTracks(data) {
    var _this20;
    _classCallCheck(this, ParticipantTracks);
    _this20 = _callSuper(this, ParticipantTracks);
    /**
     * participant ID of participant to whom the tracks belong
     *
     * @generated from field: string participant_sid = 1;
     */
    _this20.participantSid = "";
    /**
     * @generated from field: repeated string track_sids = 2;
     */
    _this20.trackSids = [];
    proto3.util.initPartial(data, _this20);
    return _this20;
  }
  _inherits(ParticipantTracks, _Message20);
  return _createClass(ParticipantTracks, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ParticipantTracks().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ParticipantTracks().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ParticipantTracks().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ParticipantTracks, a, b);
    }
  }]);
}(Message);
ParticipantTracks.runtime = proto3;
ParticipantTracks.typeName = "livekit.ParticipantTracks";
ParticipantTracks.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "participant_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "track_sids",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }];
});
/**
 * details about the server
 *
 * @generated from message livekit.ServerInfo
 */
var ServerInfo = /*#__PURE__*/function (_Message21) {
  function ServerInfo(data) {
    var _this21;
    _classCallCheck(this, ServerInfo);
    _this21 = _callSuper(this, ServerInfo);
    /**
     * @generated from field: livekit.ServerInfo.Edition edition = 1;
     */
    _this21.edition = ServerInfo_Edition.Standard;
    /**
     * @generated from field: string version = 2;
     */
    _this21.version = "";
    /**
     * @generated from field: int32 protocol = 3;
     */
    _this21.protocol = 0;
    /**
     * @generated from field: string region = 4;
     */
    _this21.region = "";
    /**
     * @generated from field: string node_id = 5;
     */
    _this21.nodeId = "";
    /**
     * additional debugging information. sent only if server is in development mode
     *
     * @generated from field: string debug_info = 6;
     */
    _this21.debugInfo = "";
    /**
     * @generated from field: int32 agent_protocol = 7;
     */
    _this21.agentProtocol = 0;
    proto3.util.initPartial(data, _this21);
    return _this21;
  }
  _inherits(ServerInfo, _Message21);
  return _createClass(ServerInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ServerInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ServerInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ServerInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ServerInfo, a, b);
    }
  }]);
}(Message);
ServerInfo.runtime = proto3;
ServerInfo.typeName = "livekit.ServerInfo";
ServerInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "edition",
    kind: "enum",
    T: proto3.getEnumType(ServerInfo_Edition)
  }, {
    no: 2,
    name: "version",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "protocol",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 4,
    name: "region",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "node_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 6,
    name: "debug_info",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 7,
    name: "agent_protocol",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }];
});
/**
 * @generated from enum livekit.ServerInfo.Edition
 */
var ServerInfo_Edition;
(function (ServerInfo_Edition) {
  /**
   * @generated from enum value: Standard = 0;
   */
  ServerInfo_Edition[ServerInfo_Edition["Standard"] = 0] = "Standard";
  /**
   * @generated from enum value: Cloud = 1;
   */
  ServerInfo_Edition[ServerInfo_Edition["Cloud"] = 1] = "Cloud";
})(ServerInfo_Edition || (ServerInfo_Edition = {}));
// Retrieve enum metadata with: proto3.getEnumType(ServerInfo_Edition)
proto3.util.setEnumType(ServerInfo_Edition, "livekit.ServerInfo.Edition", [{
  no: 0,
  name: "Standard"
}, {
  no: 1,
  name: "Cloud"
}]);
/**
 * details about the client
 *
 * @generated from message livekit.ClientInfo
 */
var ClientInfo = /*#__PURE__*/function (_Message22) {
  function ClientInfo(data) {
    var _this22;
    _classCallCheck(this, ClientInfo);
    _this22 = _callSuper(this, ClientInfo);
    /**
     * @generated from field: livekit.ClientInfo.SDK sdk = 1;
     */
    _this22.sdk = ClientInfo_SDK.UNKNOWN;
    /**
     * @generated from field: string version = 2;
     */
    _this22.version = "";
    /**
     * @generated from field: int32 protocol = 3;
     */
    _this22.protocol = 0;
    /**
     * @generated from field: string os = 4;
     */
    _this22.os = "";
    /**
     * @generated from field: string os_version = 5;
     */
    _this22.osVersion = "";
    /**
     * @generated from field: string device_model = 6;
     */
    _this22.deviceModel = "";
    /**
     * @generated from field: string browser = 7;
     */
    _this22.browser = "";
    /**
     * @generated from field: string browser_version = 8;
     */
    _this22.browserVersion = "";
    /**
     * @generated from field: string address = 9;
     */
    _this22.address = "";
    /**
     * wifi, wired, cellular, vpn, empty if not known
     *
     * @generated from field: string network = 10;
     */
    _this22.network = "";
    /**
     * comma separated list of additional LiveKit SDKs in use of this client, with versions
     * e.g. "components-js:1.2.3,track-processors-js:1.2.3"
     *
     * @generated from field: string other_sdks = 11;
     */
    _this22.otherSdks = "";
    proto3.util.initPartial(data, _this22);
    return _this22;
  }
  _inherits(ClientInfo, _Message22);
  return _createClass(ClientInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ClientInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ClientInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ClientInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ClientInfo, a, b);
    }
  }]);
}(Message);
ClientInfo.runtime = proto3;
ClientInfo.typeName = "livekit.ClientInfo";
ClientInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sdk",
    kind: "enum",
    T: proto3.getEnumType(ClientInfo_SDK)
  }, {
    no: 2,
    name: "version",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "protocol",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 4,
    name: "os",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "os_version",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 6,
    name: "device_model",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 7,
    name: "browser",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 8,
    name: "browser_version",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 9,
    name: "address",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 10,
    name: "network",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 11,
    name: "other_sdks",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from enum livekit.ClientInfo.SDK
 */
var ClientInfo_SDK;
(function (ClientInfo_SDK) {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  ClientInfo_SDK[ClientInfo_SDK["UNKNOWN"] = 0] = "UNKNOWN";
  /**
   * @generated from enum value: JS = 1;
   */
  ClientInfo_SDK[ClientInfo_SDK["JS"] = 1] = "JS";
  /**
   * @generated from enum value: SWIFT = 2;
   */
  ClientInfo_SDK[ClientInfo_SDK["SWIFT"] = 2] = "SWIFT";
  /**
   * @generated from enum value: ANDROID = 3;
   */
  ClientInfo_SDK[ClientInfo_SDK["ANDROID"] = 3] = "ANDROID";
  /**
   * @generated from enum value: FLUTTER = 4;
   */
  ClientInfo_SDK[ClientInfo_SDK["FLUTTER"] = 4] = "FLUTTER";
  /**
   * @generated from enum value: GO = 5;
   */
  ClientInfo_SDK[ClientInfo_SDK["GO"] = 5] = "GO";
  /**
   * @generated from enum value: UNITY = 6;
   */
  ClientInfo_SDK[ClientInfo_SDK["UNITY"] = 6] = "UNITY";
  /**
   * @generated from enum value: REACT_NATIVE = 7;
   */
  ClientInfo_SDK[ClientInfo_SDK["REACT_NATIVE"] = 7] = "REACT_NATIVE";
  /**
   * @generated from enum value: RUST = 8;
   */
  ClientInfo_SDK[ClientInfo_SDK["RUST"] = 8] = "RUST";
  /**
   * @generated from enum value: PYTHON = 9;
   */
  ClientInfo_SDK[ClientInfo_SDK["PYTHON"] = 9] = "PYTHON";
  /**
   * @generated from enum value: CPP = 10;
   */
  ClientInfo_SDK[ClientInfo_SDK["CPP"] = 10] = "CPP";
  /**
   * @generated from enum value: UNITY_WEB = 11;
   */
  ClientInfo_SDK[ClientInfo_SDK["UNITY_WEB"] = 11] = "UNITY_WEB";
  /**
   * @generated from enum value: NODE = 12;
   */
  ClientInfo_SDK[ClientInfo_SDK["NODE"] = 12] = "NODE";
})(ClientInfo_SDK || (ClientInfo_SDK = {}));
// Retrieve enum metadata with: proto3.getEnumType(ClientInfo_SDK)
proto3.util.setEnumType(ClientInfo_SDK, "livekit.ClientInfo.SDK", [{
  no: 0,
  name: "UNKNOWN"
}, {
  no: 1,
  name: "JS"
}, {
  no: 2,
  name: "SWIFT"
}, {
  no: 3,
  name: "ANDROID"
}, {
  no: 4,
  name: "FLUTTER"
}, {
  no: 5,
  name: "GO"
}, {
  no: 6,
  name: "UNITY"
}, {
  no: 7,
  name: "REACT_NATIVE"
}, {
  no: 8,
  name: "RUST"
}, {
  no: 9,
  name: "PYTHON"
}, {
  no: 10,
  name: "CPP"
}, {
  no: 11,
  name: "UNITY_WEB"
}, {
  no: 12,
  name: "NODE"
}]);
/**
 * server provided client configuration
 *
 * @generated from message livekit.ClientConfiguration
 */
var ClientConfiguration = /*#__PURE__*/function (_Message23) {
  function ClientConfiguration(data) {
    var _this23;
    _classCallCheck(this, ClientConfiguration);
    _this23 = _callSuper(this, ClientConfiguration);
    /**
     * @generated from field: livekit.ClientConfigSetting resume_connection = 3;
     */
    _this23.resumeConnection = ClientConfigSetting.UNSET;
    /**
     * @generated from field: livekit.ClientConfigSetting force_relay = 5;
     */
    _this23.forceRelay = ClientConfigSetting.UNSET;
    proto3.util.initPartial(data, _this23);
    return _this23;
  }
  _inherits(ClientConfiguration, _Message23);
  return _createClass(ClientConfiguration, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ClientConfiguration().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ClientConfiguration().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ClientConfiguration().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ClientConfiguration, a, b);
    }
  }]);
}(Message);
ClientConfiguration.runtime = proto3;
ClientConfiguration.typeName = "livekit.ClientConfiguration";
ClientConfiguration.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "video",
    kind: "message",
    T: VideoConfiguration
  }, {
    no: 2,
    name: "screen",
    kind: "message",
    T: VideoConfiguration
  }, {
    no: 3,
    name: "resume_connection",
    kind: "enum",
    T: proto3.getEnumType(ClientConfigSetting)
  }, {
    no: 4,
    name: "disabled_codecs",
    kind: "message",
    T: DisabledCodecs
  }, {
    no: 5,
    name: "force_relay",
    kind: "enum",
    T: proto3.getEnumType(ClientConfigSetting)
  }];
});
/**
 * @generated from message livekit.VideoConfiguration
 */
var VideoConfiguration = /*#__PURE__*/function (_Message24) {
  function VideoConfiguration(data) {
    var _this24;
    _classCallCheck(this, VideoConfiguration);
    _this24 = _callSuper(this, VideoConfiguration);
    /**
     * @generated from field: livekit.ClientConfigSetting hardware_encoder = 1;
     */
    _this24.hardwareEncoder = ClientConfigSetting.UNSET;
    proto3.util.initPartial(data, _this24);
    return _this24;
  }
  _inherits(VideoConfiguration, _Message24);
  return _createClass(VideoConfiguration, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new VideoConfiguration().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new VideoConfiguration().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new VideoConfiguration().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(VideoConfiguration, a, b);
    }
  }]);
}(Message);
VideoConfiguration.runtime = proto3;
VideoConfiguration.typeName = "livekit.VideoConfiguration";
VideoConfiguration.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "hardware_encoder",
    kind: "enum",
    T: proto3.getEnumType(ClientConfigSetting)
  }];
});
/**
 * @generated from message livekit.DisabledCodecs
 */
var DisabledCodecs = /*#__PURE__*/function (_Message25) {
  function DisabledCodecs(data) {
    var _this25;
    _classCallCheck(this, DisabledCodecs);
    _this25 = _callSuper(this, DisabledCodecs);
    /**
     * disabled for both publish and subscribe
     *
     * @generated from field: repeated livekit.Codec codecs = 1;
     */
    _this25.codecs = [];
    /**
     * only disable for publish
     *
     * @generated from field: repeated livekit.Codec publish = 2;
     */
    _this25.publish = [];
    proto3.util.initPartial(data, _this25);
    return _this25;
  }
  _inherits(DisabledCodecs, _Message25);
  return _createClass(DisabledCodecs, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DisabledCodecs().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DisabledCodecs().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DisabledCodecs().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DisabledCodecs, a, b);
    }
  }]);
}(Message);
DisabledCodecs.runtime = proto3;
DisabledCodecs.typeName = "livekit.DisabledCodecs";
DisabledCodecs.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "codecs",
    kind: "message",
    T: Codec,
    repeated: true
  }, {
    no: 2,
    name: "publish",
    kind: "message",
    T: Codec,
    repeated: true
  }];
});
/**
 * @generated from message livekit.RTPDrift
 */
var RTPDrift = /*#__PURE__*/function (_Message26) {
  function RTPDrift(data) {
    var _this26;
    _classCallCheck(this, RTPDrift);
    _this26 = _callSuper(this, RTPDrift);
    /**
     * @generated from field: double duration = 3;
     */
    _this26.duration = 0;
    /**
     * @generated from field: uint64 start_timestamp = 4;
     */
    _this26.startTimestamp = protoInt64.zero;
    /**
     * @generated from field: uint64 end_timestamp = 5;
     */
    _this26.endTimestamp = protoInt64.zero;
    /**
     * @generated from field: uint64 rtp_clock_ticks = 6;
     */
    _this26.rtpClockTicks = protoInt64.zero;
    /**
     * @generated from field: int64 drift_samples = 7;
     */
    _this26.driftSamples = protoInt64.zero;
    /**
     * @generated from field: double drift_ms = 8;
     */
    _this26.driftMs = 0;
    /**
     * @generated from field: double clock_rate = 9;
     */
    _this26.clockRate = 0;
    proto3.util.initPartial(data, _this26);
    return _this26;
  }
  _inherits(RTPDrift, _Message26);
  return _createClass(RTPDrift, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RTPDrift().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RTPDrift().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RTPDrift().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RTPDrift, a, b);
    }
  }]);
}(Message);
RTPDrift.runtime = proto3;
RTPDrift.typeName = "livekit.RTPDrift";
RTPDrift.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "start_time",
    kind: "message",
    T: Timestamp
  }, {
    no: 2,
    name: "end_time",
    kind: "message",
    T: Timestamp
  }, {
    no: 3,
    name: "duration",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 4,
    name: "start_timestamp",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 5,
    name: "end_timestamp",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 6,
    name: "rtp_clock_ticks",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 7,
    name: "drift_samples",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 8,
    name: "drift_ms",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 9,
    name: "clock_rate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }];
});
/**
 * @generated from message livekit.RTPStats
 */
var RTPStats = /*#__PURE__*/function (_Message27) {
  function RTPStats(data) {
    var _this27;
    _classCallCheck(this, RTPStats);
    _this27 = _callSuper(this, RTPStats);
    /**
     * @generated from field: double duration = 3;
     */
    _this27.duration = 0;
    /**
     * @generated from field: uint32 packets = 4;
     */
    _this27.packets = 0;
    /**
     * @generated from field: double packet_rate = 5;
     */
    _this27.packetRate = 0;
    /**
     * @generated from field: uint64 bytes = 6;
     */
    _this27.bytes = protoInt64.zero;
    /**
     * @generated from field: uint64 header_bytes = 39;
     */
    _this27.headerBytes = protoInt64.zero;
    /**
     * @generated from field: double bitrate = 7;
     */
    _this27.bitrate = 0;
    /**
     * @generated from field: uint32 packets_lost = 8;
     */
    _this27.packetsLost = 0;
    /**
     * @generated from field: double packet_loss_rate = 9;
     */
    _this27.packetLossRate = 0;
    /**
     * @generated from field: float packet_loss_percentage = 10;
     */
    _this27.packetLossPercentage = 0;
    /**
     * @generated from field: uint32 packets_duplicate = 11;
     */
    _this27.packetsDuplicate = 0;
    /**
     * @generated from field: double packet_duplicate_rate = 12;
     */
    _this27.packetDuplicateRate = 0;
    /**
     * @generated from field: uint64 bytes_duplicate = 13;
     */
    _this27.bytesDuplicate = protoInt64.zero;
    /**
     * @generated from field: uint64 header_bytes_duplicate = 40;
     */
    _this27.headerBytesDuplicate = protoInt64.zero;
    /**
     * @generated from field: double bitrate_duplicate = 14;
     */
    _this27.bitrateDuplicate = 0;
    /**
     * @generated from field: uint32 packets_padding = 15;
     */
    _this27.packetsPadding = 0;
    /**
     * @generated from field: double packet_padding_rate = 16;
     */
    _this27.packetPaddingRate = 0;
    /**
     * @generated from field: uint64 bytes_padding = 17;
     */
    _this27.bytesPadding = protoInt64.zero;
    /**
     * @generated from field: uint64 header_bytes_padding = 41;
     */
    _this27.headerBytesPadding = protoInt64.zero;
    /**
     * @generated from field: double bitrate_padding = 18;
     */
    _this27.bitratePadding = 0;
    /**
     * @generated from field: uint32 packets_out_of_order = 19;
     */
    _this27.packetsOutOfOrder = 0;
    /**
     * @generated from field: uint32 frames = 20;
     */
    _this27.frames = 0;
    /**
     * @generated from field: double frame_rate = 21;
     */
    _this27.frameRate = 0;
    /**
     * @generated from field: double jitter_current = 22;
     */
    _this27.jitterCurrent = 0;
    /**
     * @generated from field: double jitter_max = 23;
     */
    _this27.jitterMax = 0;
    /**
     * @generated from field: map<int32, uint32> gap_histogram = 24;
     */
    _this27.gapHistogram = {};
    /**
     * @generated from field: uint32 nacks = 25;
     */
    _this27.nacks = 0;
    /**
     * @generated from field: uint32 nack_acks = 37;
     */
    _this27.nackAcks = 0;
    /**
     * @generated from field: uint32 nack_misses = 26;
     */
    _this27.nackMisses = 0;
    /**
     * @generated from field: uint32 nack_repeated = 38;
     */
    _this27.nackRepeated = 0;
    /**
     * @generated from field: uint32 plis = 27;
     */
    _this27.plis = 0;
    /**
     * @generated from field: uint32 firs = 29;
     */
    _this27.firs = 0;
    /**
     * @generated from field: uint32 rtt_current = 31;
     */
    _this27.rttCurrent = 0;
    /**
     * @generated from field: uint32 rtt_max = 32;
     */
    _this27.rttMax = 0;
    /**
     * @generated from field: uint32 key_frames = 33;
     */
    _this27.keyFrames = 0;
    /**
     * @generated from field: uint32 layer_lock_plis = 35;
     */
    _this27.layerLockPlis = 0;
    proto3.util.initPartial(data, _this27);
    return _this27;
  }
  _inherits(RTPStats, _Message27);
  return _createClass(RTPStats, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RTPStats().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RTPStats().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RTPStats().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RTPStats, a, b);
    }
  }]);
}(Message);
RTPStats.runtime = proto3;
RTPStats.typeName = "livekit.RTPStats";
RTPStats.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "start_time",
    kind: "message",
    T: Timestamp
  }, {
    no: 2,
    name: "end_time",
    kind: "message",
    T: Timestamp
  }, {
    no: 3,
    name: "duration",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 4,
    name: "packets",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 5,
    name: "packet_rate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 6,
    name: "bytes",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 39,
    name: "header_bytes",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 7,
    name: "bitrate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 8,
    name: "packets_lost",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 9,
    name: "packet_loss_rate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 10,
    name: "packet_loss_percentage",
    kind: "scalar",
    T: 2 /* ScalarType.FLOAT */
  }, {
    no: 11,
    name: "packets_duplicate",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 12,
    name: "packet_duplicate_rate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 13,
    name: "bytes_duplicate",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 40,
    name: "header_bytes_duplicate",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 14,
    name: "bitrate_duplicate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 15,
    name: "packets_padding",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 16,
    name: "packet_padding_rate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 17,
    name: "bytes_padding",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 41,
    name: "header_bytes_padding",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 18,
    name: "bitrate_padding",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 19,
    name: "packets_out_of_order",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 20,
    name: "frames",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 21,
    name: "frame_rate",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 22,
    name: "jitter_current",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 23,
    name: "jitter_max",
    kind: "scalar",
    T: 1 /* ScalarType.DOUBLE */
  }, {
    no: 24,
    name: "gap_histogram",
    kind: "map",
    K: 5 /* ScalarType.INT32 */,
    V: {
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */
    }
  }, {
    no: 25,
    name: "nacks",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 37,
    name: "nack_acks",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 26,
    name: "nack_misses",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 38,
    name: "nack_repeated",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 27,
    name: "plis",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 28,
    name: "last_pli",
    kind: "message",
    T: Timestamp
  }, {
    no: 29,
    name: "firs",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 30,
    name: "last_fir",
    kind: "message",
    T: Timestamp
  }, {
    no: 31,
    name: "rtt_current",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 32,
    name: "rtt_max",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 33,
    name: "key_frames",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 34,
    name: "last_key_frame",
    kind: "message",
    T: Timestamp
  }, {
    no: 35,
    name: "layer_lock_plis",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 36,
    name: "last_layer_lock_pli",
    kind: "message",
    T: Timestamp
  }, {
    no: 44,
    name: "packet_drift",
    kind: "message",
    T: RTPDrift
  }, {
    no: 45,
    name: "ntp_report_drift",
    kind: "message",
    T: RTPDrift
  }, {
    no: 46,
    name: "rebased_report_drift",
    kind: "message",
    T: RTPDrift
  }, {
    no: 47,
    name: "received_report_drift",
    kind: "message",
    T: RTPDrift
  }];
});
/**
 * @generated from message livekit.RTCPSenderReportState
 */
var RTCPSenderReportState = /*#__PURE__*/function (_Message28) {
  function RTCPSenderReportState(data) {
    var _this28;
    _classCallCheck(this, RTCPSenderReportState);
    _this28 = _callSuper(this, RTCPSenderReportState);
    /**
     * @generated from field: uint32 rtp_timestamp = 1;
     */
    _this28.rtpTimestamp = 0;
    /**
     * @generated from field: uint64 rtp_timestamp_ext = 2;
     */
    _this28.rtpTimestampExt = protoInt64.zero;
    /**
     * @generated from field: uint64 ntp_timestamp = 3;
     */
    _this28.ntpTimestamp = protoInt64.zero;
    /**
     * time at which this happened
     *
     * @generated from field: int64 at = 4;
     */
    _this28.at = protoInt64.zero;
    /**
     * @generated from field: int64 at_adjusted = 5;
     */
    _this28.atAdjusted = protoInt64.zero;
    /**
     * @generated from field: uint32 packets = 6;
     */
    _this28.packets = 0;
    /**
     * @generated from field: uint64 octets = 7;
     */
    _this28.octets = protoInt64.zero;
    proto3.util.initPartial(data, _this28);
    return _this28;
  }
  _inherits(RTCPSenderReportState, _Message28);
  return _createClass(RTCPSenderReportState, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RTCPSenderReportState().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RTCPSenderReportState().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RTCPSenderReportState().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RTCPSenderReportState, a, b);
    }
  }]);
}(Message);
RTCPSenderReportState.runtime = proto3;
RTCPSenderReportState.typeName = "livekit.RTCPSenderReportState";
RTCPSenderReportState.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "rtp_timestamp",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 2,
    name: "rtp_timestamp_ext",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 3,
    name: "ntp_timestamp",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 4,
    name: "at",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 5,
    name: "at_adjusted",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 6,
    name: "packets",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 7,
    name: "octets",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }];
});
/**
 * @generated from message livekit.RTPForwarderState
 */
var RTPForwarderState = /*#__PURE__*/function (_Message29) {
  function RTPForwarderState(data) {
    var _this29;
    _classCallCheck(this, RTPForwarderState);
    _this29 = _callSuper(this, RTPForwarderState);
    /**
     * @generated from field: bool started = 1;
     */
    _this29.started = false;
    /**
     * @generated from field: int32 reference_layer_spatial = 2;
     */
    _this29.referenceLayerSpatial = 0;
    /**
     * @generated from field: int64 pre_start_time = 3;
     */
    _this29.preStartTime = protoInt64.zero;
    /**
     * @generated from field: uint64 ext_first_timestamp = 4;
     */
    _this29.extFirstTimestamp = protoInt64.zero;
    /**
     * @generated from field: uint64 dummy_start_timestamp_offset = 5;
     */
    _this29.dummyStartTimestampOffset = protoInt64.zero;
    /**
     * @generated from oneof livekit.RTPForwarderState.codec_munger
     */
    _this29.codecMunger = {
      "case": undefined
    };
    /**
     * @generated from field: repeated livekit.RTCPSenderReportState sender_report_state = 8;
     */
    _this29.senderReportState = [];
    proto3.util.initPartial(data, _this29);
    return _this29;
  }
  _inherits(RTPForwarderState, _Message29);
  return _createClass(RTPForwarderState, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RTPForwarderState().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RTPForwarderState().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RTPForwarderState().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RTPForwarderState, a, b);
    }
  }]);
}(Message);
RTPForwarderState.runtime = proto3;
RTPForwarderState.typeName = "livekit.RTPForwarderState";
RTPForwarderState.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "started",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 2,
    name: "reference_layer_spatial",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 3,
    name: "pre_start_time",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 4,
    name: "ext_first_timestamp",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 5,
    name: "dummy_start_timestamp_offset",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 6,
    name: "rtp_munger",
    kind: "message",
    T: RTPMungerState
  }, {
    no: 7,
    name: "vp8_munger",
    kind: "message",
    T: VP8MungerState,
    oneof: "codec_munger"
  }, {
    no: 8,
    name: "sender_report_state",
    kind: "message",
    T: RTCPSenderReportState,
    repeated: true
  }];
});
/**
 * @generated from message livekit.RTPMungerState
 */
var RTPMungerState = /*#__PURE__*/function (_Message30) {
  function RTPMungerState(data) {
    var _this30;
    _classCallCheck(this, RTPMungerState);
    _this30 = _callSuper(this, RTPMungerState);
    /**
     * @generated from field: uint64 ext_last_sequence_number = 1;
     */
    _this30.extLastSequenceNumber = protoInt64.zero;
    /**
     * @generated from field: uint64 ext_second_last_sequence_number = 2;
     */
    _this30.extSecondLastSequenceNumber = protoInt64.zero;
    /**
     * @generated from field: uint64 ext_last_timestamp = 3;
     */
    _this30.extLastTimestamp = protoInt64.zero;
    /**
     * @generated from field: uint64 ext_second_last_timestamp = 4;
     */
    _this30.extSecondLastTimestamp = protoInt64.zero;
    /**
     * @generated from field: bool last_marker = 5;
     */
    _this30.lastMarker = false;
    /**
     * @generated from field: bool second_last_marker = 6;
     */
    _this30.secondLastMarker = false;
    proto3.util.initPartial(data, _this30);
    return _this30;
  }
  _inherits(RTPMungerState, _Message30);
  return _createClass(RTPMungerState, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RTPMungerState().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RTPMungerState().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RTPMungerState().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RTPMungerState, a, b);
    }
  }]);
}(Message);
RTPMungerState.runtime = proto3;
RTPMungerState.typeName = "livekit.RTPMungerState";
RTPMungerState.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "ext_last_sequence_number",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 2,
    name: "ext_second_last_sequence_number",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 3,
    name: "ext_last_timestamp",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 4,
    name: "ext_second_last_timestamp",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 5,
    name: "last_marker",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 6,
    name: "second_last_marker",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.VP8MungerState
 */
var VP8MungerState = /*#__PURE__*/function (_Message31) {
  function VP8MungerState(data) {
    var _this31;
    _classCallCheck(this, VP8MungerState);
    _this31 = _callSuper(this, VP8MungerState);
    /**
     * @generated from field: int32 ext_last_picture_id = 1;
     */
    _this31.extLastPictureId = 0;
    /**
     * @generated from field: bool picture_id_used = 2;
     */
    _this31.pictureIdUsed = false;
    /**
     * @generated from field: uint32 last_tl0_pic_idx = 3;
     */
    _this31.lastTl0PicIdx = 0;
    /**
     * @generated from field: bool tl0_pic_idx_used = 4;
     */
    _this31.tl0PicIdxUsed = false;
    /**
     * @generated from field: bool tid_used = 5;
     */
    _this31.tidUsed = false;
    /**
     * @generated from field: uint32 last_key_idx = 6;
     */
    _this31.lastKeyIdx = 0;
    /**
     * @generated from field: bool key_idx_used = 7;
     */
    _this31.keyIdxUsed = false;
    proto3.util.initPartial(data, _this31);
    return _this31;
  }
  _inherits(VP8MungerState, _Message31);
  return _createClass(VP8MungerState, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new VP8MungerState().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new VP8MungerState().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new VP8MungerState().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(VP8MungerState, a, b);
    }
  }]);
}(Message);
VP8MungerState.runtime = proto3;
VP8MungerState.typeName = "livekit.VP8MungerState";
VP8MungerState.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "ext_last_picture_id",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 2,
    name: "picture_id_used",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 3,
    name: "last_tl0_pic_idx",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 4,
    name: "tl0_pic_idx_used",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 5,
    name: "tid_used",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 6,
    name: "last_key_idx",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 7,
    name: "key_idx_used",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.TimedVersion
 */
var TimedVersion = /*#__PURE__*/function (_Message32) {
  function TimedVersion(data) {
    var _this32;
    _classCallCheck(this, TimedVersion);
    _this32 = _callSuper(this, TimedVersion);
    /**
     * @generated from field: int64 unix_micro = 1;
     */
    _this32.unixMicro = protoInt64.zero;
    /**
     * @generated from field: int32 ticks = 2;
     */
    _this32.ticks = 0;
    proto3.util.initPartial(data, _this32);
    return _this32;
  }
  _inherits(TimedVersion, _Message32);
  return _createClass(TimedVersion, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TimedVersion().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TimedVersion().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TimedVersion().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TimedVersion, a, b);
    }
  }]);
}(Message);
TimedVersion.runtime = proto3;
TimedVersion.typeName = "livekit.TimedVersion";
TimedVersion.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "unix_micro",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 2,
    name: "ticks",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }];
});
/**
 * @generated from message livekit.DataStream
 */
var DataStream = /*#__PURE__*/function (_Message33) {
  function DataStream(data) {
    var _this33;
    _classCallCheck(this, DataStream);
    _this33 = _callSuper(this, DataStream);
    proto3.util.initPartial(data, _this33);
    return _this33;
  }
  _inherits(DataStream, _Message33);
  return _createClass(DataStream, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DataStream().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DataStream().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DataStream().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DataStream, a, b);
    }
  }]);
}(Message);
DataStream.runtime = proto3;
DataStream.typeName = "livekit.DataStream";
DataStream.fields = proto3.util.newFieldList(function () {
  return [];
});
/**
 * enum for operation types (specific to TextHeader)
 *
 * @generated from enum livekit.DataStream.OperationType
 */
var DataStream_OperationType;
(function (DataStream_OperationType) {
  /**
   * @generated from enum value: CREATE = 0;
   */
  DataStream_OperationType[DataStream_OperationType["CREATE"] = 0] = "CREATE";
  /**
   * @generated from enum value: UPDATE = 1;
   */
  DataStream_OperationType[DataStream_OperationType["UPDATE"] = 1] = "UPDATE";
  /**
   * @generated from enum value: DELETE = 2;
   */
  DataStream_OperationType[DataStream_OperationType["DELETE"] = 2] = "DELETE";
  /**
   * @generated from enum value: REACTION = 3;
   */
  DataStream_OperationType[DataStream_OperationType["REACTION"] = 3] = "REACTION";
})(DataStream_OperationType || (DataStream_OperationType = {}));
// Retrieve enum metadata with: proto3.getEnumType(DataStream_OperationType)
proto3.util.setEnumType(DataStream_OperationType, "livekit.DataStream.OperationType", [{
  no: 0,
  name: "CREATE"
}, {
  no: 1,
  name: "UPDATE"
}, {
  no: 2,
  name: "DELETE"
}, {
  no: 3,
  name: "REACTION"
}]);
/**
 * header properties specific to text streams
 *
 * @generated from message livekit.DataStream.TextHeader
 */
var DataStream_TextHeader = /*#__PURE__*/function (_Message34) {
  function DataStream_TextHeader(data) {
    var _this34;
    _classCallCheck(this, DataStream_TextHeader);
    _this34 = _callSuper(this, DataStream_TextHeader);
    /**
     * @generated from field: livekit.DataStream.OperationType operation_type = 1;
     */
    _this34.operationType = DataStream_OperationType.CREATE;
    /**
     * Optional: Version for updates/edits
     *
     * @generated from field: int32 version = 2;
     */
    _this34.version = 0;
    /**
     * Optional: Reply to specific message
     *
     * @generated from field: string reply_to_stream_id = 3;
     */
    _this34.replyToStreamId = "";
    /**
     * file attachments for text streams
     *
     * @generated from field: repeated string attached_stream_ids = 4;
     */
    _this34.attachedStreamIds = [];
    /**
     * true if the text has been generated by an agent from a participant's audio transcription
     *
     * @generated from field: bool generated = 5;
     */
    _this34.generated = false;
    proto3.util.initPartial(data, _this34);
    return _this34;
  }
  _inherits(DataStream_TextHeader, _Message34);
  return _createClass(DataStream_TextHeader, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DataStream_TextHeader().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DataStream_TextHeader().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DataStream_TextHeader().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DataStream_TextHeader, a, b);
    }
  }]);
}(Message);
DataStream_TextHeader.runtime = proto3;
DataStream_TextHeader.typeName = "livekit.DataStream.TextHeader";
DataStream_TextHeader.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "operation_type",
    kind: "enum",
    T: proto3.getEnumType(DataStream_OperationType)
  }, {
    no: 2,
    name: "version",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 3,
    name: "reply_to_stream_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "attached_stream_ids",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 5,
    name: "generated",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * header properties specific to file or image streams
 *
 * @generated from message livekit.DataStream.FileHeader
 */
var DataStream_FileHeader = /*#__PURE__*/function (_Message35) {
  function DataStream_FileHeader(data) {
    var _this35;
    _classCallCheck(this, DataStream_FileHeader);
    _this35 = _callSuper(this, DataStream_FileHeader);
    /**
     * name of the file
     *
     * @generated from field: string file_name = 1;
     */
    _this35.fileName = "";
    proto3.util.initPartial(data, _this35);
    return _this35;
  }
  _inherits(DataStream_FileHeader, _Message35);
  return _createClass(DataStream_FileHeader, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DataStream_FileHeader().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DataStream_FileHeader().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DataStream_FileHeader().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DataStream_FileHeader, a, b);
    }
  }]);
}(Message);
DataStream_FileHeader.runtime = proto3;
DataStream_FileHeader.typeName = "livekit.DataStream.FileHeader";
DataStream_FileHeader.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "file_name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * main DataStream.Header that contains a oneof for specific headers
 *
 * @generated from message livekit.DataStream.Header
 */
var DataStream_Header = /*#__PURE__*/function (_Message36) {
  function DataStream_Header(data) {
    var _this36;
    _classCallCheck(this, DataStream_Header);
    _this36 = _callSuper(this, DataStream_Header);
    /**
     * unique identifier for this data stream
     *
     * @generated from field: string stream_id = 1;
     */
    _this36.streamId = "";
    /**
     * using int64 for Unix timestamp
     *
     * @generated from field: int64 timestamp = 2;
     */
    _this36.timestamp = protoInt64.zero;
    /**
     * @generated from field: string topic = 3;
     */
    _this36.topic = "";
    /**
     * @generated from field: string mime_type = 4;
     */
    _this36.mimeType = "";
    /**
     * defaults to NONE
     *
     * @generated from field: livekit.Encryption.Type encryption_type = 7;
     */
    _this36.encryptionType = Encryption_Type.NONE;
    /**
     * user defined extensions map that can carry additional info
     *
     * @generated from field: map<string, string> extensions = 8;
     */
    _this36.extensions = {};
    /**
     * oneof to choose between specific header types
     *
     * @generated from oneof livekit.DataStream.Header.content_header
     */
    _this36.contentHeader = {
      "case": undefined
    };
    proto3.util.initPartial(data, _this36);
    return _this36;
  }
  _inherits(DataStream_Header, _Message36);
  return _createClass(DataStream_Header, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DataStream_Header().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DataStream_Header().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DataStream_Header().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DataStream_Header, a, b);
    }
  }]);
}(Message);
DataStream_Header.runtime = proto3;
DataStream_Header.typeName = "livekit.DataStream.Header";
DataStream_Header.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "stream_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "timestamp",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 3,
    name: "topic",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "mime_type",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "total_length",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */,
    opt: true
  }, {
    no: 7,
    name: "encryption_type",
    kind: "enum",
    T: proto3.getEnumType(Encryption_Type)
  }, {
    no: 8,
    name: "extensions",
    kind: "map",
    K: 9 /* ScalarType.STRING */,
    V: {
      kind: "scalar",
      T: 9 /* ScalarType.STRING */
    }
  }, {
    no: 9,
    name: "text_header",
    kind: "message",
    T: DataStream_TextHeader,
    oneof: "content_header"
  }, {
    no: 10,
    name: "file_header",
    kind: "message",
    T: DataStream_FileHeader,
    oneof: "content_header"
  }];
});
/**
 * @generated from message livekit.DataStream.Chunk
 */
var DataStream_Chunk = /*#__PURE__*/function (_Message37) {
  function DataStream_Chunk(data) {
    var _this37;
    _classCallCheck(this, DataStream_Chunk);
    _this37 = _callSuper(this, DataStream_Chunk);
    /**
     * unique identifier for this data stream to map it to the correct header
     *
     * @generated from field: string stream_id = 1;
     */
    _this37.streamId = "";
    /**
     * @generated from field: uint64 chunk_index = 2;
     */
    _this37.chunkIndex = protoInt64.zero;
    /**
     * content as binary (bytes)
     *
     * @generated from field: bytes content = 3;
     */
    _this37.content = new Uint8Array(0);
    /**
     * true only if this is the last chunk of this stream - can also be sent with empty content
     *
     * @generated from field: bool complete = 4;
     */
    _this37.complete = false;
    /**
     * a version indicating that this chunk_index has been retroactively modified and the original one needs to be replaced
     *
     * @generated from field: int32 version = 5;
     */
    _this37.version = 0;
    proto3.util.initPartial(data, _this37);
    return _this37;
  }
  _inherits(DataStream_Chunk, _Message37);
  return _createClass(DataStream_Chunk, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DataStream_Chunk().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DataStream_Chunk().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DataStream_Chunk().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DataStream_Chunk, a, b);
    }
  }]);
}(Message);
DataStream_Chunk.runtime = proto3;
DataStream_Chunk.typeName = "livekit.DataStream.Chunk";
DataStream_Chunk.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "stream_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "chunk_index",
    kind: "scalar",
    T: 4 /* ScalarType.UINT64 */
  }, {
    no: 3,
    name: "content",
    kind: "scalar",
    T: 12 /* ScalarType.BYTES */
  }, {
    no: 4,
    name: "complete",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 5,
    name: "version",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 6,
    name: "iv",
    kind: "scalar",
    T: 12 /* ScalarType.BYTES */,
    opt: true
  }];
});

// tiny, simplified version of https://github.com/lancedikson/bowser/blob/master/src/parser-browsers.js
// reduced to only differentiate Chrome(ium) based browsers / Firefox / Safari
var commonVersionIdentifier = /version\/(\d+(\.?_?\d+)+)/i;
var browserDetails;
/**
 * @internal
 */
function getBrowser(userAgent) {
  var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (typeof navigator === 'undefined') {
    return;
  }
  var ua = (navigator.userAgent).toLowerCase();
  if (browserDetails === undefined || force) {
    var browser = browsersList.find(function (_ref) {
      var test = _ref.test;
      return test.test(ua);
    });
    browserDetails = browser === null || browser === void 0 ? void 0 : browser.describe(ua);
  }
  return browserDetails;
}
var browsersList = [{
  test: /firefox|iceweasel|fxios/i,
  describe: function describe(ua) {
    var browser = {
      name: 'Firefox',
      version: getMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, ua),
      os: ua.toLowerCase().includes('fxios') ? 'iOS' : undefined,
      osVersion: getOSVersion(ua)
    };
    return browser;
  }
}, {
  test: /chrom|crios|crmo/i,
  describe: function describe(ua) {
    var browser = {
      name: 'Chrome',
      version: getMatch(/(?:chrome|chromium|crios|crmo)\/(\d+(\.?_?\d+)+)/i, ua),
      os: ua.toLowerCase().includes('crios') ? 'iOS' : undefined,
      osVersion: getOSVersion(ua)
    };
    return browser;
  }
}, /* Safari */
{
  test: /safari|applewebkit/i,
  describe: function describe(ua) {
    var browser = {
      name: 'Safari',
      version: getMatch(commonVersionIdentifier, ua),
      os: ua.includes('mobile/') ? 'iOS' : 'macOS',
      osVersion: getOSVersion(ua)
    };
    return browser;
  }
}];
function getMatch(exp, ua) {
  var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var match = ua.match(exp);
  return match && match.length >= id && match[id] || '';
}
function getOSVersion(ua) {
  return ua.includes('mac os') ? getMatch(/\(.+?(\d+_\d+(:?_\d+)?)/, ua, 1).replace(/_/g, '.') : undefined;
}

/**
 * Timers that can be overridden with platform specific implementations
 * that ensure that they are fired. These should be used when it is critical
 * that the timer fires on time.
 */
var CriticalTimers = /*#__PURE__*/_createClass(function CriticalTimers() {
  _classCallCheck(this, CriticalTimers);
}); // eslint-disable-next-line @typescript-eslint/no-implied-eval
CriticalTimers.setTimeout = function () {
  return setTimeout.apply(void 0, arguments);
};
// eslint-disable-next-line @typescript-eslint/no-implied-eval
CriticalTimers.setInterval =
// eslint-disable-next-line @typescript-eslint/no-implied-eval
function () {
  return setInterval.apply(void 0, arguments);
};
CriticalTimers.clearTimeout = function () {
  return clearTimeout.apply(void 0, arguments);
};
CriticalTimers.clearInterval = function () {
  return clearInterval.apply(void 0, arguments);
};

var VideoPreset = /*#__PURE__*/function () {
  function VideoPreset(widthOrOptions, height, maxBitrate, maxFramerate, priority) {
    _classCallCheck(this, VideoPreset);
    if (_typeof(widthOrOptions) === "object") {
      this.width = widthOrOptions.width;
      this.height = widthOrOptions.height;
      this.aspectRatio = widthOrOptions.aspectRatio;
      this.encoding = {
        maxBitrate: widthOrOptions.maxBitrate,
        maxFramerate: widthOrOptions.maxFramerate,
        priority: widthOrOptions.priority
      };
    } else if (height !== undefined && maxBitrate !== undefined) {
      this.width = widthOrOptions;
      this.height = height;
      this.aspectRatio = widthOrOptions / height;
      this.encoding = {
        maxBitrate: maxBitrate,
        maxFramerate: maxFramerate,
        priority: priority
      };
    } else {
      throw new TypeError("Unsupported options: provide at least width, height and maxBitrate");
    }
  }
  return _createClass(VideoPreset, [{
    key: "resolution",
    get: function get() {
      return {
        width: this.width,
        height: this.height,
        frameRate: this.encoding.maxFramerate,
        aspectRatio: this.aspectRatio
      };
    }
  }]);
}();
var AudioPresets;
(function (AudioPresets) {
  AudioPresets.telephone = {
    maxBitrate: 12000
  };
  AudioPresets.speech = {
    maxBitrate: 24000
  };
  AudioPresets.music = {
    maxBitrate: 48000
  };
  AudioPresets.musicStereo = {
    maxBitrate: 64000
  };
  AudioPresets.musicHighQuality = {
    maxBitrate: 96000
  };
  AudioPresets.musicHighQualityStereo = {
    maxBitrate: 128000
  };
})(AudioPresets || (AudioPresets = {}));
/**
 * Sane presets for video resolution/encoding
 * other values are commented out to imporve the video quality as part of ECPRT-10872
 */
({
  // h90: new VideoPreset(160, 90, 90_000, 20),
  // h180: new VideoPreset(320, 180, 160_000, 20),
  // h216: new VideoPreset(384, 216, 180_000, 20),
  // h360: new VideoPreset(640, 360, 450_000, 20),
  h540: new VideoPreset(960, 540, 500000, 25),
  h720: new VideoPreset(1280, 720, 1250000, 30)
  //h1080: new VideoPreset(1920, 1080, 3_000_000, 30),
  // h1440: new VideoPreset(2560, 1440, 5_000_000, 30),
  // h2160: new VideoPreset(3840, 2160, 8_000_000, 30),
});
/**
 * Four by three presets
 */
({
  // h120: new VideoPreset(160, 120, 70_000, 20),
  // h180: new VideoPreset(240, 180, 125_000, 20),
  // h240: new VideoPreset(320, 240, 140_000, 20),
  // h360: new VideoPreset(480, 360, 330_000, 20),
  // h480: new VideoPreset(640, 480, 500_000, 20),
  h540: new VideoPreset(720, 540, 550000, 25),
  h720: new VideoPreset(960, 720, 1200000, 30)
  //h1080: new VideoPreset(1440, 1080, 2_300_000, 30),
  // h1440: new VideoPreset(1920, 1440, 3_800_000, 30),
});
({
  h360fps3: new VideoPreset(640, 360, 200000, 3, "medium"),
  h360fps15: new VideoPreset(640, 360, 400000, 15, "medium"),
  h720fps5: new VideoPreset(1280, 720, 800000, 5, "medium"),
  h720fps15: new VideoPreset(1280, 720, 1500000, 15, "medium"),
  h720fps30: new VideoPreset(1280, 720, 2000000, 30, "medium"),
  h1080fps15: new VideoPreset(1920, 1080, 2500000, 15, "medium"),
  h1080fps30: new VideoPreset(1920, 1080, 5000000, 30, "medium"),
  // original resolution, without resizing
  original: new VideoPreset(0, 0, 7000000, 30, "medium")
});

/**
 * @generated from enum livekit.SignalTarget
 */
var SignalTarget;
(function (SignalTarget) {
  /**
   * @generated from enum value: PUBLISHER = 0;
   */
  SignalTarget[SignalTarget["PUBLISHER"] = 0] = "PUBLISHER";
  /**
   * @generated from enum value: SUBSCRIBER = 1;
   */
  SignalTarget[SignalTarget["SUBSCRIBER"] = 1] = "SUBSCRIBER";
})(SignalTarget || (SignalTarget = {}));
// Retrieve enum metadata with: proto3.getEnumType(SignalTarget)
proto3.util.setEnumType(SignalTarget, "livekit.SignalTarget", [{
  no: 0,
  name: "PUBLISHER"
}, {
  no: 1,
  name: "SUBSCRIBER"
}]);
/**
 * @generated from enum livekit.StreamState
 */
var StreamState;
(function (StreamState) {
  /**
   * @generated from enum value: ACTIVE = 0;
   */
  StreamState[StreamState["ACTIVE"] = 0] = "ACTIVE";
  /**
   * @generated from enum value: PAUSED = 1;
   */
  StreamState[StreamState["PAUSED"] = 1] = "PAUSED";
})(StreamState || (StreamState = {}));
// Retrieve enum metadata with: proto3.getEnumType(StreamState)
proto3.util.setEnumType(StreamState, "livekit.StreamState", [{
  no: 0,
  name: "ACTIVE"
}, {
  no: 1,
  name: "PAUSED"
}]);
/**
 * @generated from enum livekit.CandidateProtocol
 */
var CandidateProtocol;
(function (CandidateProtocol) {
  /**
   * @generated from enum value: UDP = 0;
   */
  CandidateProtocol[CandidateProtocol["UDP"] = 0] = "UDP";
  /**
   * @generated from enum value: TCP = 1;
   */
  CandidateProtocol[CandidateProtocol["TCP"] = 1] = "TCP";
  /**
   * @generated from enum value: TLS = 2;
   */
  CandidateProtocol[CandidateProtocol["TLS"] = 2] = "TLS";
})(CandidateProtocol || (CandidateProtocol = {}));
// Retrieve enum metadata with: proto3.getEnumType(CandidateProtocol)
proto3.util.setEnumType(CandidateProtocol, "livekit.CandidateProtocol", [{
  no: 0,
  name: "UDP"
}, {
  no: 1,
  name: "TCP"
}, {
  no: 2,
  name: "TLS"
}]);
/**
 * To identify websocket request type for audit logs
 *
 * @generated from enum livekit.RequestType
 */
var RequestType;
(function (RequestType) {
  /**
   * @generated from enum value: AddAudioTrack = 0;
   */
  RequestType[RequestType["AddAudioTrack"] = 0] = "AddAudioTrack";
  /**
   * @generated from enum value: AddVideoTrack = 1;
   */
  RequestType[RequestType["AddVideoTrack"] = 1] = "AddVideoTrack";
  /**
   * @generated from enum value: Join = 2;
   */
  RequestType[RequestType["Join"] = 2] = "Join";
  /**
   * @generated from enum value: Leave = 3;
   */
  RequestType[RequestType["Leave"] = 3] = "Leave";
  /**
   * @generated from enum value: MuteAudio = 4;
   */
  RequestType[RequestType["MuteAudio"] = 4] = "MuteAudio";
  /**
   * @generated from enum value: MuteVideo = 5;
   */
  RequestType[RequestType["MuteVideo"] = 5] = "MuteVideo";
  /**
   * @generated from enum value: UnmuteAudio = 6;
   */
  RequestType[RequestType["UnmuteAudio"] = 6] = "UnmuteAudio";
  /**
   * @generated from enum value: UnmuteVideo = 7;
   */
  RequestType[RequestType["UnmuteVideo"] = 7] = "UnmuteVideo";
})(RequestType || (RequestType = {}));
// Retrieve enum metadata with: proto3.getEnumType(RequestType)
proto3.util.setEnumType(RequestType, "livekit.RequestType", [{
  no: 0,
  name: "AddAudioTrack"
}, {
  no: 1,
  name: "AddVideoTrack"
}, {
  no: 2,
  name: "Join"
}, {
  no: 3,
  name: "Leave"
}, {
  no: 4,
  name: "MuteAudio"
}, {
  no: 5,
  name: "MuteVideo"
}, {
  no: 6,
  name: "UnmuteAudio"
}, {
  no: 7,
  name: "UnmuteVideo"
}]);
/**
 * @generated from message livekit.SignalRequest
 */
var SignalRequest = /*#__PURE__*/function (_Message) {
  function SignalRequest(data) {
    var _this;
    _classCallCheck(this, SignalRequest);
    _this = _callSuper(this, SignalRequest);
    /**
     * @generated from oneof livekit.SignalRequest.message
     */
    _this.message = {
      "case": undefined
    };
    proto3.util.initPartial(data, _this);
    return _this;
  }
  _inherits(SignalRequest, _Message);
  return _createClass(SignalRequest, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SignalRequest().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SignalRequest().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SignalRequest().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SignalRequest, a, b);
    }
  }]);
}(Message);
SignalRequest.runtime = proto3;
SignalRequest.typeName = "livekit.SignalRequest";
SignalRequest.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "offer",
    kind: "message",
    T: SessionDescription,
    oneof: "message"
  }, {
    no: 2,
    name: "answer",
    kind: "message",
    T: SessionDescription,
    oneof: "message"
  }, {
    no: 3,
    name: "trickle",
    kind: "message",
    T: TrickleRequest,
    oneof: "message"
  }, {
    no: 4,
    name: "add_track",
    kind: "message",
    T: AddTrackRequest,
    oneof: "message"
  }, {
    no: 5,
    name: "mute",
    kind: "message",
    T: MuteTrackRequest,
    oneof: "message"
  }, {
    no: 6,
    name: "subscription",
    kind: "message",
    T: UpdateSubscription,
    oneof: "message"
  }, {
    no: 7,
    name: "track_setting",
    kind: "message",
    T: UpdateTrackSettings,
    oneof: "message"
  }, {
    no: 8,
    name: "leave",
    kind: "message",
    T: LeaveRequest,
    oneof: "message"
  }, {
    no: 10,
    name: "update_layers",
    kind: "message",
    T: UpdateVideoLayers,
    oneof: "message"
  }, {
    no: 11,
    name: "subscription_permission",
    kind: "message",
    T: SubscriptionPermission,
    oneof: "message"
  }, {
    no: 12,
    name: "sync_state",
    kind: "message",
    T: SyncState,
    oneof: "message"
  }, {
    no: 13,
    name: "simulate",
    kind: "message",
    T: SimulateScenario,
    oneof: "message"
  }, {
    no: 14,
    name: "ping",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */,
    oneof: "message"
  }, {
    no: 15,
    name: "update_metadata",
    kind: "message",
    T: UpdateParticipantMetadata,
    oneof: "message"
  }, {
    no: 16,
    name: "ping_req",
    kind: "message",
    T: Ping,
    oneof: "message"
  }, {
    no: 17,
    name: "update_audio_track",
    kind: "message",
    T: UpdateLocalAudioTrack,
    oneof: "message"
  }, {
    no: 18,
    name: "update_video_track",
    kind: "message",
    T: UpdateLocalVideoTrack,
    oneof: "message"
  }, {
    no: 19,
    name: "health_check",
    kind: "message",
    T: HealthCheck,
    oneof: "message"
  }];
});
/**
 * @generated from message livekit.SignalResponse
 */
var SignalResponse = /*#__PURE__*/function (_Message2) {
  function SignalResponse(data) {
    var _this2;
    _classCallCheck(this, SignalResponse);
    _this2 = _callSuper(this, SignalResponse);
    /**
     * @generated from oneof livekit.SignalResponse.message
     */
    _this2.message = {
      "case": undefined
    };
    proto3.util.initPartial(data, _this2);
    return _this2;
  }
  _inherits(SignalResponse, _Message2);
  return _createClass(SignalResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SignalResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SignalResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SignalResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SignalResponse, a, b);
    }
  }]);
}(Message);
SignalResponse.runtime = proto3;
SignalResponse.typeName = "livekit.SignalResponse";
SignalResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "join",
    kind: "message",
    T: JoinResponse,
    oneof: "message"
  }, {
    no: 2,
    name: "answer",
    kind: "message",
    T: SessionDescription,
    oneof: "message"
  }, {
    no: 3,
    name: "offer",
    kind: "message",
    T: SessionDescription,
    oneof: "message"
  }, {
    no: 4,
    name: "trickle",
    kind: "message",
    T: TrickleRequest,
    oneof: "message"
  }, {
    no: 5,
    name: "update",
    kind: "message",
    T: ParticipantUpdate,
    oneof: "message"
  }, {
    no: 6,
    name: "track_published",
    kind: "message",
    T: TrackPublishedResponse,
    oneof: "message"
  }, {
    no: 8,
    name: "leave",
    kind: "message",
    T: LeaveRequest,
    oneof: "message"
  }, {
    no: 9,
    name: "mute",
    kind: "message",
    T: MuteTrackRequest,
    oneof: "message"
  }, {
    no: 10,
    name: "speakers_changed",
    kind: "message",
    T: SpeakersChanged,
    oneof: "message"
  }, {
    no: 11,
    name: "room_update",
    kind: "message",
    T: RoomUpdate,
    oneof: "message"
  }, {
    no: 12,
    name: "connection_quality",
    kind: "message",
    T: ConnectionQualityUpdate,
    oneof: "message"
  }, {
    no: 13,
    name: "stream_state_update",
    kind: "message",
    T: StreamStateUpdate,
    oneof: "message"
  }, {
    no: 14,
    name: "subscribed_quality_update",
    kind: "message",
    T: SubscribedQualityUpdate,
    oneof: "message"
  }, {
    no: 15,
    name: "subscription_permission_update",
    kind: "message",
    T: SubscriptionPermissionUpdate,
    oneof: "message"
  }, {
    no: 16,
    name: "refresh_token",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    oneof: "message"
  }, {
    no: 17,
    name: "track_unpublished",
    kind: "message",
    T: TrackUnpublishedResponse,
    oneof: "message"
  }, {
    no: 18,
    name: "pong",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */,
    oneof: "message"
  }, {
    no: 19,
    name: "reconnect",
    kind: "message",
    T: ReconnectResponse,
    oneof: "message"
  }, {
    no: 20,
    name: "pong_resp",
    kind: "message",
    T: Pong,
    oneof: "message"
  }, {
    no: 21,
    name: "subscription_response",
    kind: "message",
    T: SubscriptionResponse,
    oneof: "message"
  }, {
    no: 22,
    name: "health_check_response",
    kind: "message",
    T: HealthCheckResponse,
    oneof: "message"
  }, {
    no: 23,
    name: "request_response",
    kind: "message",
    T: RequestResponse,
    oneof: "message"
  }, {
    no: 24,
    name: "track_subscribed",
    kind: "message",
    T: TrackSubscribed,
    oneof: "message"
  }];
});
/**
 * @generated from message livekit.SimulcastCodec
 */
var SimulcastCodec = /*#__PURE__*/function (_Message3) {
  function SimulcastCodec(data) {
    var _this3;
    _classCallCheck(this, SimulcastCodec);
    _this3 = _callSuper(this, SimulcastCodec);
    /**
     * @generated from field: string codec = 1;
     */
    _this3.codec = "";
    /**
     * @generated from field: string cid = 2;
     */
    _this3.cid = "";
    proto3.util.initPartial(data, _this3);
    return _this3;
  }
  _inherits(SimulcastCodec, _Message3);
  return _createClass(SimulcastCodec, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SimulcastCodec().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SimulcastCodec().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SimulcastCodec().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SimulcastCodec, a, b);
    }
  }]);
}(Message);
SimulcastCodec.runtime = proto3;
SimulcastCodec.typeName = "livekit.SimulcastCodec";
SimulcastCodec.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "codec",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "cid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.AddTrackRequest
 */
var AddTrackRequest = /*#__PURE__*/function (_Message4) {
  function AddTrackRequest(data) {
    var _this4;
    _classCallCheck(this, AddTrackRequest);
    _this4 = _callSuper(this, AddTrackRequest);
    /**
     * client ID of track, to match it when RTC track is received
     *
     * @generated from field: string cid = 1;
     */
    _this4.cid = "";
    /**
     * @generated from field: string name = 2;
     */
    _this4.name = "";
    /**
     * @generated from field: livekit.TrackType type = 3;
     */
    _this4.type = TrackType.AUDIO;
    /**
     * to be deprecated in favor of layers
     *
     * @generated from field: uint32 width = 4;
     */
    _this4.width = 0;
    /**
     * @generated from field: uint32 height = 5;
     */
    _this4.height = 0;
    /**
     * true to add track and initialize to muted
     *
     * @generated from field: bool muted = 6;
     */
    _this4.muted = false;
    /**
     * true if DTX (Discontinuous Transmission) is disabled for audio
     *
     * @generated from field: bool disable_dtx = 7;
     */
    _this4.disableDtx = false;
    /**
     * @generated from field: livekit.TrackSource source = 8;
     */
    _this4.source = TrackSource.UNKNOWN;
    /**
     * @generated from field: repeated livekit.VideoLayer layers = 9;
     */
    _this4.layers = [];
    /**
     * @generated from field: repeated livekit.SimulcastCodec simulcast_codecs = 10;
     */
    _this4.simulcastCodecs = [];
    /**
     * server ID of track, publish new codec to exist track
     *
     * @generated from field: string sid = 11;
     */
    _this4.sid = "";
    /**
     * @generated from field: bool stereo = 12;
     */
    _this4.stereo = false;
    /**
     * true if RED (Redundant Encoding) is disabled for audio
     *
     * @generated from field: bool disable_red = 13;
     */
    _this4.disableRed = false;
    /**
     * @generated from field: livekit.Encryption.Type encryption = 14;
     */
    _this4.encryption = Encryption_Type.NONE;
    /**
     * which stream the track belongs to, used to group tracks together.
     * if not specified, server will infer it from track source to bundle camera/microphone, screenshare/audio together
     *
     * @generated from field: string stream = 15;
     */
    _this4.stream = "";
    proto3.util.initPartial(data, _this4);
    return _this4;
  }
  _inherits(AddTrackRequest, _Message4);
  return _createClass(AddTrackRequest, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new AddTrackRequest().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new AddTrackRequest().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new AddTrackRequest().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(AddTrackRequest, a, b);
    }
  }]);
}(Message);
AddTrackRequest.runtime = proto3;
AddTrackRequest.typeName = "livekit.AddTrackRequest";
AddTrackRequest.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "cid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "type",
    kind: "enum",
    T: proto3.getEnumType(TrackType)
  }, {
    no: 4,
    name: "width",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 5,
    name: "height",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 6,
    name: "muted",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 7,
    name: "disable_dtx",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 8,
    name: "source",
    kind: "enum",
    T: proto3.getEnumType(TrackSource)
  }, {
    no: 9,
    name: "layers",
    kind: "message",
    T: VideoLayer,
    repeated: true
  }, {
    no: 10,
    name: "simulcast_codecs",
    kind: "message",
    T: SimulcastCodec,
    repeated: true
  }, {
    no: 11,
    name: "sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 12,
    name: "stereo",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 13,
    name: "disable_red",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 14,
    name: "encryption",
    kind: "enum",
    T: proto3.getEnumType(Encryption_Type)
  }, {
    no: 15,
    name: "stream",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.TrickleRequest
 */
var TrickleRequest = /*#__PURE__*/function (_Message5) {
  function TrickleRequest(data) {
    var _this5;
    _classCallCheck(this, TrickleRequest);
    _this5 = _callSuper(this, TrickleRequest);
    /**
     * @generated from field: string candidateInit = 1;
     */
    _this5.candidateInit = "";
    /**
     * @generated from field: livekit.SignalTarget target = 2;
     */
    _this5.target = SignalTarget.PUBLISHER;
    /**
     * @generated from field: bool final = 3;
     */
    _this5["final"] = false;
    proto3.util.initPartial(data, _this5);
    return _this5;
  }
  _inherits(TrickleRequest, _Message5);
  return _createClass(TrickleRequest, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TrickleRequest().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TrickleRequest().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TrickleRequest().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TrickleRequest, a, b);
    }
  }]);
}(Message);
TrickleRequest.runtime = proto3;
TrickleRequest.typeName = "livekit.TrickleRequest";
TrickleRequest.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "candidateInit",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "target",
    kind: "enum",
    T: proto3.getEnumType(SignalTarget)
  }, {
    no: 3,
    name: "final",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.MuteTrackRequest
 */
var MuteTrackRequest = /*#__PURE__*/function (_Message6) {
  function MuteTrackRequest(data) {
    var _this6;
    _classCallCheck(this, MuteTrackRequest);
    _this6 = _callSuper(this, MuteTrackRequest);
    /**
     * @generated from field: string sid = 1;
     */
    _this6.sid = "";
    /**
     * @generated from field: bool muted = 2;
     */
    _this6.muted = false;
    proto3.util.initPartial(data, _this6);
    return _this6;
  }
  _inherits(MuteTrackRequest, _Message6);
  return _createClass(MuteTrackRequest, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new MuteTrackRequest().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new MuteTrackRequest().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new MuteTrackRequest().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(MuteTrackRequest, a, b);
    }
  }]);
}(Message);
MuteTrackRequest.runtime = proto3;
MuteTrackRequest.typeName = "livekit.MuteTrackRequest";
MuteTrackRequest.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "muted",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.JoinResponse
 */
var JoinResponse = /*#__PURE__*/function (_Message7) {
  function JoinResponse(data) {
    var _this7;
    _classCallCheck(this, JoinResponse);
    _this7 = _callSuper(this, JoinResponse);
    /**
     * @generated from field: repeated livekit.ParticipantInfo other_participants = 3;
     */
    _this7.otherParticipants = [];
    /**
     * deprecated. use server_info.version instead.
     *
     * @generated from field: string server_version = 4;
     */
    _this7.serverVersion = "";
    /**
     * @generated from field: repeated livekit.ICEServer ice_servers = 5;
     */
    _this7.iceServers = [];
    /**
     * use subscriber as the primary PeerConnection
     *
     * @generated from field: bool subscriber_primary = 6;
     */
    _this7.subscriberPrimary = false;
    /**
     * when the current server isn't available, return alternate url to retry connection
     * when this is set, the other fields will be largely empty
     *
     * @generated from field: string alternative_url = 7;
     */
    _this7.alternativeUrl = "";
    /**
     * deprecated. use server_info.region instead.
     *
     * @generated from field: string server_region = 9;
     */
    _this7.serverRegion = "";
    /**
     * @generated from field: int32 ping_timeout = 10;
     */
    _this7.pingTimeout = 0;
    /**
     * @generated from field: int32 ping_interval = 11;
     */
    _this7.pingInterval = 0;
    /**
     * Server-Injected-Frame byte trailer, used to identify unencrypted frames when e2ee is enabled
     *
     * @generated from field: bytes sif_trailer = 13;
     */
    _this7.sifTrailer = new Uint8Array(0);
    /**
     * @generated from field: repeated livekit.Codec enabled_publish_codecs = 14;
     */
    _this7.enabledPublishCodecs = [];
    /**
     * when set, client should attempt to establish publish peer connection when joining room to speed up publishing
     *
     * @generated from field: bool fast_publish = 15;
     */
    _this7.fastPublish = false;
    proto3.util.initPartial(data, _this7);
    return _this7;
  }
  _inherits(JoinResponse, _Message7);
  return _createClass(JoinResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new JoinResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new JoinResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new JoinResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(JoinResponse, a, b);
    }
  }]);
}(Message);
JoinResponse.runtime = proto3;
JoinResponse.typeName = "livekit.JoinResponse";
JoinResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "room",
    kind: "message",
    T: Room
  }, {
    no: 2,
    name: "participant",
    kind: "message",
    T: ParticipantInfo
  }, {
    no: 3,
    name: "other_participants",
    kind: "message",
    T: ParticipantInfo,
    repeated: true
  }, {
    no: 4,
    name: "server_version",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "ice_servers",
    kind: "message",
    T: ICEServer,
    repeated: true
  }, {
    no: 6,
    name: "subscriber_primary",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 7,
    name: "alternative_url",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 8,
    name: "client_configuration",
    kind: "message",
    T: ClientConfiguration
  }, {
    no: 9,
    name: "server_region",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 10,
    name: "ping_timeout",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 11,
    name: "ping_interval",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */
  }, {
    no: 12,
    name: "server_info",
    kind: "message",
    T: ServerInfo
  }, {
    no: 13,
    name: "sif_trailer",
    kind: "scalar",
    T: 12 /* ScalarType.BYTES */
  }, {
    no: 14,
    name: "enabled_publish_codecs",
    kind: "message",
    T: Codec,
    repeated: true
  }, {
    no: 15,
    name: "fast_publish",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.ReconnectResponse
 */
var ReconnectResponse = /*#__PURE__*/function (_Message8) {
  function ReconnectResponse(data) {
    var _this8;
    _classCallCheck(this, ReconnectResponse);
    _this8 = _callSuper(this, ReconnectResponse);
    /**
     * @generated from field: repeated livekit.ICEServer ice_servers = 1;
     */
    _this8.iceServers = [];
    proto3.util.initPartial(data, _this8);
    return _this8;
  }
  _inherits(ReconnectResponse, _Message8);
  return _createClass(ReconnectResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ReconnectResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ReconnectResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ReconnectResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ReconnectResponse, a, b);
    }
  }]);
}(Message);
ReconnectResponse.runtime = proto3;
ReconnectResponse.typeName = "livekit.ReconnectResponse";
ReconnectResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "ice_servers",
    kind: "message",
    T: ICEServer,
    repeated: true
  }, {
    no: 2,
    name: "client_configuration",
    kind: "message",
    T: ClientConfiguration
  }];
});
/**
 * @generated from message livekit.TrackPublishedResponse
 */
var TrackPublishedResponse = /*#__PURE__*/function (_Message9) {
  function TrackPublishedResponse(data) {
    var _this9;
    _classCallCheck(this, TrackPublishedResponse);
    _this9 = _callSuper(this, TrackPublishedResponse);
    /**
     * @generated from field: string cid = 1;
     */
    _this9.cid = "";
    proto3.util.initPartial(data, _this9);
    return _this9;
  }
  _inherits(TrackPublishedResponse, _Message9);
  return _createClass(TrackPublishedResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TrackPublishedResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TrackPublishedResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TrackPublishedResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TrackPublishedResponse, a, b);
    }
  }]);
}(Message);
TrackPublishedResponse.runtime = proto3;
TrackPublishedResponse.typeName = "livekit.TrackPublishedResponse";
TrackPublishedResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "cid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "track",
    kind: "message",
    T: TrackInfo
  }];
});
/**
 * @generated from message livekit.TrackUnpublishedResponse
 */
var TrackUnpublishedResponse = /*#__PURE__*/function (_Message0) {
  function TrackUnpublishedResponse(data) {
    var _this0;
    _classCallCheck(this, TrackUnpublishedResponse);
    _this0 = _callSuper(this, TrackUnpublishedResponse);
    /**
     * @generated from field: string track_sid = 1;
     */
    _this0.trackSid = "";
    proto3.util.initPartial(data, _this0);
    return _this0;
  }
  _inherits(TrackUnpublishedResponse, _Message0);
  return _createClass(TrackUnpublishedResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TrackUnpublishedResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TrackUnpublishedResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TrackUnpublishedResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TrackUnpublishedResponse, a, b);
    }
  }]);
}(Message);
TrackUnpublishedResponse.runtime = proto3;
TrackUnpublishedResponse.typeName = "livekit.TrackUnpublishedResponse";
TrackUnpublishedResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.SessionDescription
 */
var SessionDescription = /*#__PURE__*/function (_Message1) {
  function SessionDescription(data) {
    var _this1;
    _classCallCheck(this, SessionDescription);
    _this1 = _callSuper(this, SessionDescription);
    /**
     * "answer" | "offer" | "pranswer" | "rollback"
     *
     * @generated from field: string type = 1;
     */
    _this1.type = "";
    /**
     * @generated from field: string sdp = 2;
     */
    _this1.sdp = "";
    proto3.util.initPartial(data, _this1);
    return _this1;
  }
  _inherits(SessionDescription, _Message1);
  return _createClass(SessionDescription, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SessionDescription().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SessionDescription().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SessionDescription().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SessionDescription, a, b);
    }
  }]);
}(Message);
SessionDescription.runtime = proto3;
SessionDescription.typeName = "livekit.SessionDescription";
SessionDescription.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "type",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "sdp",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.ParticipantUpdate
 */
var ParticipantUpdate = /*#__PURE__*/function (_Message10) {
  function ParticipantUpdate(data) {
    var _this10;
    _classCallCheck(this, ParticipantUpdate);
    _this10 = _callSuper(this, ParticipantUpdate);
    /**
     * @generated from field: repeated livekit.ParticipantInfo participants = 1;
     */
    _this10.participants = [];
    proto3.util.initPartial(data, _this10);
    return _this10;
  }
  _inherits(ParticipantUpdate, _Message10);
  return _createClass(ParticipantUpdate, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ParticipantUpdate().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ParticipantUpdate().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ParticipantUpdate().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ParticipantUpdate, a, b);
    }
  }]);
}(Message);
ParticipantUpdate.runtime = proto3;
ParticipantUpdate.typeName = "livekit.ParticipantUpdate";
ParticipantUpdate.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "participants",
    kind: "message",
    T: ParticipantInfo,
    repeated: true
  }];
});
/**
 * @generated from message livekit.UpdateSubscription
 */
var UpdateSubscription = /*#__PURE__*/function (_Message11) {
  function UpdateSubscription(data) {
    var _this11;
    _classCallCheck(this, UpdateSubscription);
    _this11 = _callSuper(this, UpdateSubscription);
    /**
     * @generated from field: repeated string track_sids = 1;
     */
    _this11.trackSids = [];
    /**
     * @generated from field: bool subscribe = 2;
     */
    _this11.subscribe = false;
    /**
     * @generated from field: repeated livekit.ParticipantTracks participant_tracks = 3;
     */
    _this11.participantTracks = [];
    proto3.util.initPartial(data, _this11);
    return _this11;
  }
  _inherits(UpdateSubscription, _Message11);
  return _createClass(UpdateSubscription, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new UpdateSubscription().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new UpdateSubscription().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new UpdateSubscription().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(UpdateSubscription, a, b);
    }
  }]);
}(Message);
UpdateSubscription.runtime = proto3;
UpdateSubscription.typeName = "livekit.UpdateSubscription";
UpdateSubscription.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sids",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 2,
    name: "subscribe",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 3,
    name: "participant_tracks",
    kind: "message",
    T: ParticipantTracks,
    repeated: true
  }];
});
/**
 * @generated from message livekit.UpdateTrackSettings
 */
var UpdateTrackSettings = /*#__PURE__*/function (_Message12) {
  function UpdateTrackSettings(data) {
    var _this12;
    _classCallCheck(this, UpdateTrackSettings);
    _this12 = _callSuper(this, UpdateTrackSettings);
    /**
     * @generated from field: repeated string track_sids = 1;
     */
    _this12.trackSids = [];
    /**
     * when true, the track is placed in a paused state, with no new data returned
     *
     * @generated from field: bool disabled = 3;
     */
    _this12.disabled = false;
    /**
     * deprecated in favor of width & height
     *
     * @generated from field: livekit.VideoQuality quality = 4;
     */
    _this12.quality = VideoQuality$1.LOW;
    /**
     * for video, width to receive
     *
     * @generated from field: uint32 width = 5;
     */
    _this12.width = 0;
    /**
     * for video, height to receive
     *
     * @generated from field: uint32 height = 6;
     */
    _this12.height = 0;
    /**
     * @generated from field: uint32 fps = 7;
     */
    _this12.fps = 0;
    /**
     * subscription priority. 1 being the highest (0 is unset)
     * when unset, server sill assign priority based on the order of subscription
     * server will use priority in the following ways:
     * 1. when subscribed tracks exceed per-participant subscription limit, server will
     *    pause the lowest priority tracks
     * 2. when the network is congested, server will assign available bandwidth to
     *    higher priority tracks first. lowest priority tracks can be paused
     *
     * @generated from field: uint32 priority = 8;
     */
    _this12.priority = 0;
    proto3.util.initPartial(data, _this12);
    return _this12;
  }
  _inherits(UpdateTrackSettings, _Message12);
  return _createClass(UpdateTrackSettings, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new UpdateTrackSettings().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new UpdateTrackSettings().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new UpdateTrackSettings().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(UpdateTrackSettings, a, b);
    }
  }]);
}(Message);
UpdateTrackSettings.runtime = proto3;
UpdateTrackSettings.typeName = "livekit.UpdateTrackSettings";
UpdateTrackSettings.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sids",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 3,
    name: "disabled",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 4,
    name: "quality",
    kind: "enum",
    T: proto3.getEnumType(VideoQuality$1)
  }, {
    no: 5,
    name: "width",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 6,
    name: "height",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 7,
    name: "fps",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 8,
    name: "priority",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});
/**
 * @generated from message livekit.UpdateLocalAudioTrack
 */
var UpdateLocalAudioTrack = /*#__PURE__*/function (_Message13) {
  function UpdateLocalAudioTrack(data) {
    var _this13;
    _classCallCheck(this, UpdateLocalAudioTrack);
    _this13 = _callSuper(this, UpdateLocalAudioTrack);
    /**
     * @generated from field: string track_sid = 1;
     */
    _this13.trackSid = "";
    /**
     * @generated from field: repeated livekit.AudioTrackFeature features = 2;
     */
    _this13.features = [];
    proto3.util.initPartial(data, _this13);
    return _this13;
  }
  _inherits(UpdateLocalAudioTrack, _Message13);
  return _createClass(UpdateLocalAudioTrack, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new UpdateLocalAudioTrack().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new UpdateLocalAudioTrack().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new UpdateLocalAudioTrack().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(UpdateLocalAudioTrack, a, b);
    }
  }]);
}(Message);
UpdateLocalAudioTrack.runtime = proto3;
UpdateLocalAudioTrack.typeName = "livekit.UpdateLocalAudioTrack";
UpdateLocalAudioTrack.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "features",
    kind: "enum",
    T: proto3.getEnumType(AudioTrackFeature),
    repeated: true
  }];
});
/**
 * @generated from message livekit.UpdateLocalVideoTrack
 */
var UpdateLocalVideoTrack = /*#__PURE__*/function (_Message14) {
  function UpdateLocalVideoTrack(data) {
    var _this14;
    _classCallCheck(this, UpdateLocalVideoTrack);
    _this14 = _callSuper(this, UpdateLocalVideoTrack);
    /**
     * @generated from field: string track_sid = 1;
     */
    _this14.trackSid = "";
    /**
     * @generated from field: uint32 width = 2;
     */
    _this14.width = 0;
    /**
     * @generated from field: uint32 height = 3;
     */
    _this14.height = 0;
    proto3.util.initPartial(data, _this14);
    return _this14;
  }
  _inherits(UpdateLocalVideoTrack, _Message14);
  return _createClass(UpdateLocalVideoTrack, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new UpdateLocalVideoTrack().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new UpdateLocalVideoTrack().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new UpdateLocalVideoTrack().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(UpdateLocalVideoTrack, a, b);
    }
  }]);
}(Message);
UpdateLocalVideoTrack.runtime = proto3;
UpdateLocalVideoTrack.typeName = "livekit.UpdateLocalVideoTrack";
UpdateLocalVideoTrack.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "width",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 3,
    name: "height",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});
/**
 * @generated from message livekit.LeaveRequest
 */
var LeaveRequest = /*#__PURE__*/function (_Message15) {
  function LeaveRequest(data) {
    var _this15;
    _classCallCheck(this, LeaveRequest);
    _this15 = _callSuper(this, LeaveRequest);
    /**
     * sent when server initiates the disconnect due to server-restart
     * indicates clients should attempt full-reconnect sequence
     * NOTE: `can_reconnect` obsoleted by `action` starting in protocol version 13
     *
     * @generated from field: bool can_reconnect = 1;
     */
    _this15.canReconnect = false;
    /**
     * @generated from field: livekit.DisconnectReason reason = 2;
     */
    _this15.reason = DisconnectReason.UNKNOWN_REASON;
    /**
     * @generated from field: livekit.LeaveRequest.Action action = 3;
     */
    _this15.action = LeaveRequest_Action.DISCONNECT;
    proto3.util.initPartial(data, _this15);
    return _this15;
  }
  _inherits(LeaveRequest, _Message15);
  return _createClass(LeaveRequest, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new LeaveRequest().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new LeaveRequest().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new LeaveRequest().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(LeaveRequest, a, b);
    }
  }]);
}(Message);
LeaveRequest.runtime = proto3;
LeaveRequest.typeName = "livekit.LeaveRequest";
LeaveRequest.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "can_reconnect",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 2,
    name: "reason",
    kind: "enum",
    T: proto3.getEnumType(DisconnectReason)
  }, {
    no: 3,
    name: "action",
    kind: "enum",
    T: proto3.getEnumType(LeaveRequest_Action)
  }, {
    no: 4,
    name: "regions",
    kind: "message",
    T: RegionSettings
  }];
});
/**
 * indicates action clients should take on receiving this message
 *
 * @generated from enum livekit.LeaveRequest.Action
 */
var LeaveRequest_Action;
(function (LeaveRequest_Action) {
  /**
   * should disconnect
   *
   * @generated from enum value: DISCONNECT = 0;
   */
  LeaveRequest_Action[LeaveRequest_Action["DISCONNECT"] = 0] = "DISCONNECT";
  /**
   * should attempt a resume with `reconnect=1` in join URL
   *
   * @generated from enum value: RESUME = 1;
   */
  LeaveRequest_Action[LeaveRequest_Action["RESUME"] = 1] = "RESUME";
  /**
   * should attempt a reconnect, i. e. no `reconnect=1`
   *
   * @generated from enum value: RECONNECT = 2;
   */
  LeaveRequest_Action[LeaveRequest_Action["RECONNECT"] = 2] = "RECONNECT";
})(LeaveRequest_Action || (LeaveRequest_Action = {}));
// Retrieve enum metadata with: proto3.getEnumType(LeaveRequest_Action)
proto3.util.setEnumType(LeaveRequest_Action, "livekit.LeaveRequest.Action", [{
  no: 0,
  name: "DISCONNECT"
}, {
  no: 1,
  name: "RESUME"
}, {
  no: 2,
  name: "RECONNECT"
}]);
/**
 * message to indicate published video track dimensions are changing
 *
 * @generated from message livekit.UpdateVideoLayers
 * @deprecated
 */
var UpdateVideoLayers = /*#__PURE__*/function (_Message16) {
  function UpdateVideoLayers(data) {
    var _this16;
    _classCallCheck(this, UpdateVideoLayers);
    _this16 = _callSuper(this, UpdateVideoLayers);
    /**
     * @generated from field: string track_sid = 1;
     */
    _this16.trackSid = "";
    /**
     * @generated from field: repeated livekit.VideoLayer layers = 2;
     */
    _this16.layers = [];
    proto3.util.initPartial(data, _this16);
    return _this16;
  }
  _inherits(UpdateVideoLayers, _Message16);
  return _createClass(UpdateVideoLayers, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new UpdateVideoLayers().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new UpdateVideoLayers().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new UpdateVideoLayers().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(UpdateVideoLayers, a, b);
    }
  }]);
}(Message);
UpdateVideoLayers.runtime = proto3;
UpdateVideoLayers.typeName = "livekit.UpdateVideoLayers";
UpdateVideoLayers.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "layers",
    kind: "message",
    T: VideoLayer,
    repeated: true
  }];
});
/**
 * @generated from message livekit.UpdateParticipantMetadata
 */
var UpdateParticipantMetadata = /*#__PURE__*/function (_Message17) {
  function UpdateParticipantMetadata(data) {
    var _this17;
    _classCallCheck(this, UpdateParticipantMetadata);
    _this17 = _callSuper(this, UpdateParticipantMetadata);
    /**
     * @generated from field: string metadata = 1;
     */
    _this17.metadata = "";
    /**
     * @generated from field: string name = 2;
     */
    _this17.name = "";
    /**
     * attributes to update. it only updates attributes that have been set
     * to delete attributes, set the value to an empty string
     *
     * @generated from field: map<string, string> attributes = 3;
     */
    _this17.attributes = {};
    /**
     * @generated from field: uint32 request_id = 4;
     */
    _this17.requestId = 0;
    proto3.util.initPartial(data, _this17);
    return _this17;
  }
  _inherits(UpdateParticipantMetadata, _Message17);
  return _createClass(UpdateParticipantMetadata, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new UpdateParticipantMetadata().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new UpdateParticipantMetadata().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new UpdateParticipantMetadata().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(UpdateParticipantMetadata, a, b);
    }
  }]);
}(Message);
UpdateParticipantMetadata.runtime = proto3;
UpdateParticipantMetadata.typeName = "livekit.UpdateParticipantMetadata";
UpdateParticipantMetadata.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "metadata",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "attributes",
    kind: "map",
    K: 9 /* ScalarType.STRING */,
    V: {
      kind: "scalar",
      T: 9 /* ScalarType.STRING */
    }
  }, {
    no: 4,
    name: "request_id",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }];
});
/**
 * @generated from message livekit.ICEServer
 */
var ICEServer = /*#__PURE__*/function (_Message18) {
  function ICEServer(data) {
    var _this18;
    _classCallCheck(this, ICEServer);
    _this18 = _callSuper(this, ICEServer);
    /**
     * @generated from field: repeated string urls = 1;
     */
    _this18.urls = [];
    /**
     * @generated from field: string username = 2;
     */
    _this18.username = "";
    /**
     * @generated from field: string credential = 3;
     */
    _this18.credential = "";
    proto3.util.initPartial(data, _this18);
    return _this18;
  }
  _inherits(ICEServer, _Message18);
  return _createClass(ICEServer, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ICEServer().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ICEServer().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ICEServer().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ICEServer, a, b);
    }
  }]);
}(Message);
ICEServer.runtime = proto3;
ICEServer.typeName = "livekit.ICEServer";
ICEServer.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "urls",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 2,
    name: "username",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "credential",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.SpeakersChanged
 */
var SpeakersChanged = /*#__PURE__*/function (_Message19) {
  function SpeakersChanged(data) {
    var _this19;
    _classCallCheck(this, SpeakersChanged);
    _this19 = _callSuper(this, SpeakersChanged);
    /**
     * @generated from field: repeated livekit.SpeakerInfo speakers = 1;
     */
    _this19.speakers = [];
    proto3.util.initPartial(data, _this19);
    return _this19;
  }
  _inherits(SpeakersChanged, _Message19);
  return _createClass(SpeakersChanged, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SpeakersChanged().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SpeakersChanged().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SpeakersChanged().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SpeakersChanged, a, b);
    }
  }]);
}(Message);
SpeakersChanged.runtime = proto3;
SpeakersChanged.typeName = "livekit.SpeakersChanged";
SpeakersChanged.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "speakers",
    kind: "message",
    T: SpeakerInfo,
    repeated: true
  }];
});
/**
 * @generated from message livekit.RoomUpdate
 */
var RoomUpdate = /*#__PURE__*/function (_Message20) {
  function RoomUpdate(data) {
    var _this20;
    _classCallCheck(this, RoomUpdate);
    _this20 = _callSuper(this, RoomUpdate);
    proto3.util.initPartial(data, _this20);
    return _this20;
  }
  _inherits(RoomUpdate, _Message20);
  return _createClass(RoomUpdate, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RoomUpdate().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RoomUpdate().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RoomUpdate().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RoomUpdate, a, b);
    }
  }]);
}(Message);
RoomUpdate.runtime = proto3;
RoomUpdate.typeName = "livekit.RoomUpdate";
RoomUpdate.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "room",
    kind: "message",
    T: Room
  }];
});
/**
 * @generated from message livekit.ConnectionQualityInfo
 */
var ConnectionQualityInfo = /*#__PURE__*/function (_Message21) {
  function ConnectionQualityInfo(data) {
    var _this21;
    _classCallCheck(this, ConnectionQualityInfo);
    _this21 = _callSuper(this, ConnectionQualityInfo);
    /**
     * @generated from field: string participant_sid = 1;
     */
    _this21.participantSid = "";
    /**
     * @generated from field: livekit.ConnectionQuality quality = 2;
     */
    _this21.quality = ConnectionQuality.POOR;
    /**
     * @generated from field: float score = 3;
     */
    _this21.score = 0;
    proto3.util.initPartial(data, _this21);
    return _this21;
  }
  _inherits(ConnectionQualityInfo, _Message21);
  return _createClass(ConnectionQualityInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ConnectionQualityInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ConnectionQualityInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ConnectionQualityInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ConnectionQualityInfo, a, b);
    }
  }]);
}(Message);
ConnectionQualityInfo.runtime = proto3;
ConnectionQualityInfo.typeName = "livekit.ConnectionQualityInfo";
ConnectionQualityInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "participant_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "quality",
    kind: "enum",
    T: proto3.getEnumType(ConnectionQuality)
  }, {
    no: 3,
    name: "score",
    kind: "scalar",
    T: 2 /* ScalarType.FLOAT */
  }];
});
/**
 * @generated from message livekit.ConnectionQualityUpdate
 */
var ConnectionQualityUpdate = /*#__PURE__*/function (_Message22) {
  function ConnectionQualityUpdate(data) {
    var _this22;
    _classCallCheck(this, ConnectionQualityUpdate);
    _this22 = _callSuper(this, ConnectionQualityUpdate);
    /**
     * @generated from field: repeated livekit.ConnectionQualityInfo updates = 1;
     */
    _this22.updates = [];
    proto3.util.initPartial(data, _this22);
    return _this22;
  }
  _inherits(ConnectionQualityUpdate, _Message22);
  return _createClass(ConnectionQualityUpdate, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new ConnectionQualityUpdate().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new ConnectionQualityUpdate().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new ConnectionQualityUpdate().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(ConnectionQualityUpdate, a, b);
    }
  }]);
}(Message);
ConnectionQualityUpdate.runtime = proto3;
ConnectionQualityUpdate.typeName = "livekit.ConnectionQualityUpdate";
ConnectionQualityUpdate.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "updates",
    kind: "message",
    T: ConnectionQualityInfo,
    repeated: true
  }];
});
/**
 * @generated from message livekit.StreamStateInfo
 */
var StreamStateInfo = /*#__PURE__*/function (_Message23) {
  function StreamStateInfo(data) {
    var _this23;
    _classCallCheck(this, StreamStateInfo);
    _this23 = _callSuper(this, StreamStateInfo);
    /**
     * @generated from field: string participant_sid = 1;
     */
    _this23.participantSid = "";
    /**
     * @generated from field: string track_sid = 2;
     */
    _this23.trackSid = "";
    /**
     * @generated from field: livekit.StreamState state = 3;
     */
    _this23.state = StreamState.ACTIVE;
    proto3.util.initPartial(data, _this23);
    return _this23;
  }
  _inherits(StreamStateInfo, _Message23);
  return _createClass(StreamStateInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new StreamStateInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new StreamStateInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new StreamStateInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(StreamStateInfo, a, b);
    }
  }]);
}(Message);
StreamStateInfo.runtime = proto3;
StreamStateInfo.typeName = "livekit.StreamStateInfo";
StreamStateInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "participant_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "state",
    kind: "enum",
    T: proto3.getEnumType(StreamState)
  }];
});
/**
 * @generated from message livekit.StreamStateUpdate
 */
var StreamStateUpdate = /*#__PURE__*/function (_Message24) {
  function StreamStateUpdate(data) {
    var _this24;
    _classCallCheck(this, StreamStateUpdate);
    _this24 = _callSuper(this, StreamStateUpdate);
    /**
     * @generated from field: repeated livekit.StreamStateInfo stream_states = 1;
     */
    _this24.streamStates = [];
    proto3.util.initPartial(data, _this24);
    return _this24;
  }
  _inherits(StreamStateUpdate, _Message24);
  return _createClass(StreamStateUpdate, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new StreamStateUpdate().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new StreamStateUpdate().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new StreamStateUpdate().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(StreamStateUpdate, a, b);
    }
  }]);
}(Message);
StreamStateUpdate.runtime = proto3;
StreamStateUpdate.typeName = "livekit.StreamStateUpdate";
StreamStateUpdate.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "stream_states",
    kind: "message",
    T: StreamStateInfo,
    repeated: true
  }];
});
/**
 * @generated from message livekit.SubscribedQuality
 */
var SubscribedQuality = /*#__PURE__*/function (_Message25) {
  function SubscribedQuality(data) {
    var _this25;
    _classCallCheck(this, SubscribedQuality);
    _this25 = _callSuper(this, SubscribedQuality);
    /**
     * @generated from field: livekit.VideoQuality quality = 1;
     */
    _this25.quality = VideoQuality$1.LOW;
    /**
     * @generated from field: bool enabled = 2;
     */
    _this25.enabled = false;
    proto3.util.initPartial(data, _this25);
    return _this25;
  }
  _inherits(SubscribedQuality, _Message25);
  return _createClass(SubscribedQuality, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SubscribedQuality().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SubscribedQuality().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SubscribedQuality().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SubscribedQuality, a, b);
    }
  }]);
}(Message);
SubscribedQuality.runtime = proto3;
SubscribedQuality.typeName = "livekit.SubscribedQuality";
SubscribedQuality.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "quality",
    kind: "enum",
    T: proto3.getEnumType(VideoQuality$1)
  }, {
    no: 2,
    name: "enabled",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.SubscribedCodec
 */
var SubscribedCodec = /*#__PURE__*/function (_Message26) {
  function SubscribedCodec(data) {
    var _this26;
    _classCallCheck(this, SubscribedCodec);
    _this26 = _callSuper(this, SubscribedCodec);
    /**
     * @generated from field: string codec = 1;
     */
    _this26.codec = "";
    /**
     * @generated from field: repeated livekit.SubscribedQuality qualities = 2;
     */
    _this26.qualities = [];
    proto3.util.initPartial(data, _this26);
    return _this26;
  }
  _inherits(SubscribedCodec, _Message26);
  return _createClass(SubscribedCodec, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SubscribedCodec().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SubscribedCodec().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SubscribedCodec().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SubscribedCodec, a, b);
    }
  }]);
}(Message);
SubscribedCodec.runtime = proto3;
SubscribedCodec.typeName = "livekit.SubscribedCodec";
SubscribedCodec.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "codec",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "qualities",
    kind: "message",
    T: SubscribedQuality,
    repeated: true
  }];
});
/**
 * @generated from message livekit.SubscribedQualityUpdate
 */
var SubscribedQualityUpdate = /*#__PURE__*/function (_Message27) {
  function SubscribedQualityUpdate(data) {
    var _this27;
    _classCallCheck(this, SubscribedQualityUpdate);
    _this27 = _callSuper(this, SubscribedQualityUpdate);
    /**
     * @generated from field: string track_sid = 1;
     */
    _this27.trackSid = "";
    /**
     * @generated from field: repeated livekit.SubscribedQuality subscribed_qualities = 2;
     */
    _this27.subscribedQualities = [];
    /**
     * @generated from field: repeated livekit.SubscribedCodec subscribed_codecs = 3;
     */
    _this27.subscribedCodecs = [];
    proto3.util.initPartial(data, _this27);
    return _this27;
  }
  _inherits(SubscribedQualityUpdate, _Message27);
  return _createClass(SubscribedQualityUpdate, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SubscribedQualityUpdate().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SubscribedQualityUpdate().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SubscribedQualityUpdate().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SubscribedQualityUpdate, a, b);
    }
  }]);
}(Message);
SubscribedQualityUpdate.runtime = proto3;
SubscribedQualityUpdate.typeName = "livekit.SubscribedQualityUpdate";
SubscribedQualityUpdate.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "subscribed_qualities",
    kind: "message",
    T: SubscribedQuality,
    repeated: true
  }, {
    no: 3,
    name: "subscribed_codecs",
    kind: "message",
    T: SubscribedCodec,
    repeated: true
  }];
});
/**
 * @generated from message livekit.TrackPermission
 */
var TrackPermission = /*#__PURE__*/function (_Message28) {
  function TrackPermission(data) {
    var _this28;
    _classCallCheck(this, TrackPermission);
    _this28 = _callSuper(this, TrackPermission);
    /**
     * permission could be granted either by participant sid or identity
     *
     * @generated from field: string participant_sid = 1;
     */
    _this28.participantSid = "";
    /**
     * @generated from field: bool all_tracks = 2;
     */
    _this28.allTracks = false;
    /**
     * @generated from field: repeated string track_sids = 3;
     */
    _this28.trackSids = [];
    /**
     * @generated from field: string participant_identity = 4;
     */
    _this28.participantIdentity = "";
    proto3.util.initPartial(data, _this28);
    return _this28;
  }
  _inherits(TrackPermission, _Message28);
  return _createClass(TrackPermission, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TrackPermission().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TrackPermission().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TrackPermission().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TrackPermission, a, b);
    }
  }]);
}(Message);
TrackPermission.runtime = proto3;
TrackPermission.typeName = "livekit.TrackPermission";
TrackPermission.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "participant_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "all_tracks",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 3,
    name: "track_sids",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }, {
    no: 4,
    name: "participant_identity",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.SubscriptionPermission
 */
var SubscriptionPermission = /*#__PURE__*/function (_Message29) {
  function SubscriptionPermission(data) {
    var _this29;
    _classCallCheck(this, SubscriptionPermission);
    _this29 = _callSuper(this, SubscriptionPermission);
    /**
     * @generated from field: bool all_participants = 1;
     */
    _this29.allParticipants = false;
    /**
     * @generated from field: repeated livekit.TrackPermission track_permissions = 2;
     */
    _this29.trackPermissions = [];
    proto3.util.initPartial(data, _this29);
    return _this29;
  }
  _inherits(SubscriptionPermission, _Message29);
  return _createClass(SubscriptionPermission, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SubscriptionPermission().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SubscriptionPermission().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SubscriptionPermission().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SubscriptionPermission, a, b);
    }
  }]);
}(Message);
SubscriptionPermission.runtime = proto3;
SubscriptionPermission.typeName = "livekit.SubscriptionPermission";
SubscriptionPermission.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "all_participants",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }, {
    no: 2,
    name: "track_permissions",
    kind: "message",
    T: TrackPermission,
    repeated: true
  }];
});
/**
 * @generated from message livekit.SubscriptionPermissionUpdate
 */
var SubscriptionPermissionUpdate = /*#__PURE__*/function (_Message30) {
  function SubscriptionPermissionUpdate(data) {
    var _this30;
    _classCallCheck(this, SubscriptionPermissionUpdate);
    _this30 = _callSuper(this, SubscriptionPermissionUpdate);
    /**
     * @generated from field: string participant_sid = 1;
     */
    _this30.participantSid = "";
    /**
     * @generated from field: string track_sid = 2;
     */
    _this30.trackSid = "";
    /**
     * @generated from field: bool allowed = 3;
     */
    _this30.allowed = false;
    proto3.util.initPartial(data, _this30);
    return _this30;
  }
  _inherits(SubscriptionPermissionUpdate, _Message30);
  return _createClass(SubscriptionPermissionUpdate, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SubscriptionPermissionUpdate().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SubscriptionPermissionUpdate().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SubscriptionPermissionUpdate().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SubscriptionPermissionUpdate, a, b);
    }
  }]);
}(Message);
SubscriptionPermissionUpdate.runtime = proto3;
SubscriptionPermissionUpdate.typeName = "livekit.SubscriptionPermissionUpdate";
SubscriptionPermissionUpdate.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "participant_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "allowed",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.SyncState
 */
var SyncState = /*#__PURE__*/function (_Message31) {
  function SyncState(data) {
    var _this31;
    _classCallCheck(this, SyncState);
    _this31 = _callSuper(this, SyncState);
    /**
     * @generated from field: repeated livekit.TrackPublishedResponse publish_tracks = 3;
     */
    _this31.publishTracks = [];
    /**
     * @generated from field: repeated livekit.DataChannelInfo data_channels = 4;
     */
    _this31.dataChannels = [];
    /**
     * @generated from field: repeated string track_sids_disabled = 6;
     */
    _this31.trackSidsDisabled = [];
    proto3.util.initPartial(data, _this31);
    return _this31;
  }
  _inherits(SyncState, _Message31);
  return _createClass(SyncState, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SyncState().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SyncState().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SyncState().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SyncState, a, b);
    }
  }]);
}(Message);
SyncState.runtime = proto3;
SyncState.typeName = "livekit.SyncState";
SyncState.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "answer",
    kind: "message",
    T: SessionDescription
  }, {
    no: 2,
    name: "subscription",
    kind: "message",
    T: UpdateSubscription
  }, {
    no: 3,
    name: "publish_tracks",
    kind: "message",
    T: TrackPublishedResponse,
    repeated: true
  }, {
    no: 4,
    name: "data_channels",
    kind: "message",
    T: DataChannelInfo,
    repeated: true
  }, {
    no: 5,
    name: "offer",
    kind: "message",
    T: SessionDescription
  }, {
    no: 6,
    name: "track_sids_disabled",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */,
    repeated: true
  }];
});
/**
 * @generated from message livekit.DataChannelInfo
 */
var DataChannelInfo = /*#__PURE__*/function (_Message32) {
  function DataChannelInfo(data) {
    var _this32;
    _classCallCheck(this, DataChannelInfo);
    _this32 = _callSuper(this, DataChannelInfo);
    /**
     * @generated from field: string label = 1;
     */
    _this32.label = "";
    /**
     * @generated from field: uint32 id = 2;
     */
    _this32.id = 0;
    /**
     * @generated from field: livekit.SignalTarget target = 3;
     */
    _this32.target = SignalTarget.PUBLISHER;
    proto3.util.initPartial(data, _this32);
    return _this32;
  }
  _inherits(DataChannelInfo, _Message32);
  return _createClass(DataChannelInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DataChannelInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DataChannelInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DataChannelInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DataChannelInfo, a, b);
    }
  }]);
}(Message);
DataChannelInfo.runtime = proto3;
DataChannelInfo.typeName = "livekit.DataChannelInfo";
DataChannelInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "label",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "id",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 3,
    name: "target",
    kind: "enum",
    T: proto3.getEnumType(SignalTarget)
  }];
});
/**
 * @generated from message livekit.SimulateScenario
 */
var SimulateScenario = /*#__PURE__*/function (_Message33) {
  function SimulateScenario(data) {
    var _this33;
    _classCallCheck(this, SimulateScenario);
    _this33 = _callSuper(this, SimulateScenario);
    /**
     * @generated from oneof livekit.SimulateScenario.scenario
     */
    _this33.scenario = {
      "case": undefined
    };
    proto3.util.initPartial(data, _this33);
    return _this33;
  }
  _inherits(SimulateScenario, _Message33);
  return _createClass(SimulateScenario, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SimulateScenario().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SimulateScenario().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SimulateScenario().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SimulateScenario, a, b);
    }
  }]);
}(Message);
SimulateScenario.runtime = proto3;
SimulateScenario.typeName = "livekit.SimulateScenario";
SimulateScenario.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "speaker_update",
    kind: "scalar",
    T: 5 /* ScalarType.INT32 */,
    oneof: "scenario"
  }, {
    no: 2,
    name: "node_failure",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */,
    oneof: "scenario"
  }, {
    no: 3,
    name: "migration",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */,
    oneof: "scenario"
  }, {
    no: 4,
    name: "server_leave",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */,
    oneof: "scenario"
  }, {
    no: 5,
    name: "switch_candidate_protocol",
    kind: "enum",
    T: proto3.getEnumType(CandidateProtocol),
    oneof: "scenario"
  }, {
    no: 6,
    name: "subscriber_bandwidth",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */,
    oneof: "scenario"
  }, {
    no: 7,
    name: "disconnect_signal_on_resume",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */,
    oneof: "scenario"
  }, {
    no: 8,
    name: "disconnect_signal_on_resume_no_messages",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */,
    oneof: "scenario"
  }, {
    no: 9,
    name: "leave_request_full_reconnect",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */,
    oneof: "scenario"
  }];
});
/**
 * @generated from message livekit.Ping
 */
var Ping = /*#__PURE__*/function (_Message34) {
  function Ping(data) {
    var _this34;
    _classCallCheck(this, Ping);
    _this34 = _callSuper(this, Ping);
    /**
     * @generated from field: int64 timestamp = 1;
     */
    _this34.timestamp = protoInt64.zero;
    /**
     * rtt in milliseconds calculated by client
     *
     * @generated from field: int64 rtt = 2;
     */
    _this34.rtt = protoInt64.zero;
    proto3.util.initPartial(data, _this34);
    return _this34;
  }
  _inherits(Ping, _Message34);
  return _createClass(Ping, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new Ping().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new Ping().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new Ping().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(Ping, a, b);
    }
  }]);
}(Message);
Ping.runtime = proto3;
Ping.typeName = "livekit.Ping";
Ping.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "timestamp",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 2,
    name: "rtt",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }];
});
/**
 * @generated from message livekit.Pong
 */
var Pong = /*#__PURE__*/function (_Message35) {
  function Pong(data) {
    var _this35;
    _classCallCheck(this, Pong);
    _this35 = _callSuper(this, Pong);
    /**
     * timestamp field of last received ping request
     *
     * @generated from field: int64 last_ping_timestamp = 1;
     */
    _this35.lastPingTimestamp = protoInt64.zero;
    /**
     * @generated from field: int64 timestamp = 2;
     */
    _this35.timestamp = protoInt64.zero;
    proto3.util.initPartial(data, _this35);
    return _this35;
  }
  _inherits(Pong, _Message35);
  return _createClass(Pong, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new Pong().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new Pong().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new Pong().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(Pong, a, b);
    }
  }]);
}(Message);
Pong.runtime = proto3;
Pong.typeName = "livekit.Pong";
Pong.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "last_ping_timestamp",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 2,
    name: "timestamp",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }];
});
/**
 * @generated from message livekit.RegionSettings
 */
var RegionSettings = /*#__PURE__*/function (_Message36) {
  function RegionSettings(data) {
    var _this36;
    _classCallCheck(this, RegionSettings);
    _this36 = _callSuper(this, RegionSettings);
    /**
     * @generated from field: repeated livekit.RegionInfo regions = 1;
     */
    _this36.regions = [];
    proto3.util.initPartial(data, _this36);
    return _this36;
  }
  _inherits(RegionSettings, _Message36);
  return _createClass(RegionSettings, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RegionSettings().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RegionSettings().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RegionSettings().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RegionSettings, a, b);
    }
  }]);
}(Message);
RegionSettings.runtime = proto3;
RegionSettings.typeName = "livekit.RegionSettings";
RegionSettings.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "regions",
    kind: "message",
    T: RegionInfo,
    repeated: true
  }];
});
/**
 * @generated from message livekit.RegionInfo
 */
var RegionInfo = /*#__PURE__*/function (_Message37) {
  function RegionInfo(data) {
    var _this37;
    _classCallCheck(this, RegionInfo);
    _this37 = _callSuper(this, RegionInfo);
    /**
     * @generated from field: string region = 1;
     */
    _this37.region = "";
    /**
     * @generated from field: string url = 2;
     */
    _this37.url = "";
    /**
     * @generated from field: int64 distance = 3;
     */
    _this37.distance = protoInt64.zero;
    proto3.util.initPartial(data, _this37);
    return _this37;
  }
  _inherits(RegionInfo, _Message37);
  return _createClass(RegionInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RegionInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RegionInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RegionInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RegionInfo, a, b);
    }
  }]);
}(Message);
RegionInfo.runtime = proto3;
RegionInfo.typeName = "livekit.RegionInfo";
RegionInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "region",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "url",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "distance",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }];
});
/**
 * @generated from message livekit.SubscriptionResponse
 */
var SubscriptionResponse = /*#__PURE__*/function (_Message38) {
  function SubscriptionResponse(data) {
    var _this38;
    _classCallCheck(this, SubscriptionResponse);
    _this38 = _callSuper(this, SubscriptionResponse);
    /**
     * @generated from field: string track_sid = 1;
     */
    _this38.trackSid = "";
    /**
     * @generated from field: livekit.SubscriptionError err = 2;
     */
    _this38.err = SubscriptionError.SE_UNKNOWN;
    proto3.util.initPartial(data, _this38);
    return _this38;
  }
  _inherits(SubscriptionResponse, _Message38);
  return _createClass(SubscriptionResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new SubscriptionResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new SubscriptionResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new SubscriptionResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(SubscriptionResponse, a, b);
    }
  }]);
}(Message);
SubscriptionResponse.runtime = proto3;
SubscriptionResponse.typeName = "livekit.SubscriptionResponse";
SubscriptionResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "err",
    kind: "enum",
    T: proto3.getEnumType(SubscriptionError)
  }];
});
/**
 * @generated from message livekit.RequestResponse
 */
var RequestResponse = /*#__PURE__*/function (_Message39) {
  function RequestResponse(data) {
    var _this39;
    _classCallCheck(this, RequestResponse);
    _this39 = _callSuper(this, RequestResponse);
    /**
     * @generated from field: uint32 request_id = 1;
     */
    _this39.requestId = 0;
    /**
     * @generated from field: livekit.RequestResponse.Reason reason = 2;
     */
    _this39.reason = RequestResponse_Reason.OK;
    /**
     * @generated from field: string message = 3;
     */
    _this39.message = "";
    proto3.util.initPartial(data, _this39);
    return _this39;
  }
  _inherits(RequestResponse, _Message39);
  return _createClass(RequestResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new RequestResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new RequestResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new RequestResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(RequestResponse, a, b);
    }
  }]);
}(Message);
RequestResponse.runtime = proto3;
RequestResponse.typeName = "livekit.RequestResponse";
RequestResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "request_id",
    kind: "scalar",
    T: 13 /* ScalarType.UINT32 */
  }, {
    no: 2,
    name: "reason",
    kind: "enum",
    T: proto3.getEnumType(RequestResponse_Reason)
  }, {
    no: 3,
    name: "message",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from enum livekit.RequestResponse.Reason
 */
var RequestResponse_Reason;
(function (RequestResponse_Reason) {
  /**
   * @generated from enum value: OK = 0;
   */
  RequestResponse_Reason[RequestResponse_Reason["OK"] = 0] = "OK";
  /**
   * @generated from enum value: NOT_FOUND = 1;
   */
  RequestResponse_Reason[RequestResponse_Reason["NOT_FOUND"] = 1] = "NOT_FOUND";
  /**
   * @generated from enum value: NOT_ALLOWED = 2;
   */
  RequestResponse_Reason[RequestResponse_Reason["NOT_ALLOWED"] = 2] = "NOT_ALLOWED";
  /**
   * @generated from enum value: LIMIT_EXCEEDED = 3;
   */
  RequestResponse_Reason[RequestResponse_Reason["LIMIT_EXCEEDED"] = 3] = "LIMIT_EXCEEDED";
})(RequestResponse_Reason || (RequestResponse_Reason = {}));
// Retrieve enum metadata with: proto3.getEnumType(RequestResponse_Reason)
proto3.util.setEnumType(RequestResponse_Reason, "livekit.RequestResponse.Reason", [{
  no: 0,
  name: "OK"
}, {
  no: 1,
  name: "NOT_FOUND"
}, {
  no: 2,
  name: "NOT_ALLOWED"
}, {
  no: 3,
  name: "LIMIT_EXCEEDED"
}]);
/**
 * @generated from message livekit.TrackSubscribed
 */
var TrackSubscribed = /*#__PURE__*/function (_Message40) {
  function TrackSubscribed(data) {
    var _this40;
    _classCallCheck(this, TrackSubscribed);
    _this40 = _callSuper(this, TrackSubscribed);
    /**
     * @generated from field: string track_sid = 1;
     */
    _this40.trackSid = "";
    proto3.util.initPartial(data, _this40);
    return _this40;
  }
  _inherits(TrackSubscribed, _Message40);
  return _createClass(TrackSubscribed, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new TrackSubscribed().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new TrackSubscribed().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new TrackSubscribed().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(TrackSubscribed, a, b);
    }
  }]);
}(Message);
TrackSubscribed.runtime = proto3;
TrackSubscribed.typeName = "livekit.TrackSubscribed";
TrackSubscribed.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "track_sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from message livekit.HealthCheck
 */
var HealthCheck = /*#__PURE__*/function (_Message41) {
  function HealthCheck(data) {
    var _this41;
    _classCallCheck(this, HealthCheck);
    _this41 = _callSuper(this, HealthCheck);
    /**
     * @generated from field: string sid = 1;
     */
    _this41.sid = "";
    /**
     * @generated from field: string room_name = 2;
     */
    _this41.roomName = "";
    /**
     * @generated from field: string egress_id = 3;
     */
    _this41.egressId = "";
    /**
     * @generated from field: string node_id = 4;
     */
    _this41.nodeId = "";
    /**
     * Unix timestamp in milliseconds
     *
     * @generated from field: int64 timestamp = 5;
     */
    _this41.timestamp = protoInt64.zero;
    /**
     * Connection ID
     *
     * @generated from field: string conn_id = 6;
     */
    _this41.connId = "";
    /**
     * New fields for error handling
     *
     * @generated from field: string error_message = 7;
     */
    _this41.errorMessage = "";
    /**
     * @generated from field: bool is_normal_closure = 8;
     */
    _this41.isNormalClosure = false;
    proto3.util.initPartial(data, _this41);
    return _this41;
  }
  _inherits(HealthCheck, _Message41);
  return _createClass(HealthCheck, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new HealthCheck().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new HealthCheck().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new HealthCheck().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(HealthCheck, a, b);
    }
  }]);
}(Message);
HealthCheck.runtime = proto3;
HealthCheck.typeName = "livekit.HealthCheck";
HealthCheck.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sid",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 2,
    name: "room_name",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "egress_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "node_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "timestamp",
    kind: "scalar",
    T: 3 /* ScalarType.INT64 */
  }, {
    no: 6,
    name: "conn_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 7,
    name: "error_message",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 8,
    name: "is_normal_closure",
    kind: "scalar",
    T: 8 /* ScalarType.BOOL */
  }];
});
/**
 * @generated from message livekit.HealthCheckResponse
 */
var HealthCheckResponse = /*#__PURE__*/function (_Message42) {
  function HealthCheckResponse(data) {
    var _this42;
    _classCallCheck(this, HealthCheckResponse);
    _this42 = _callSuper(this, HealthCheckResponse);
    /**
     * Connection ID generated by LiveKit
     *
     * @generated from field: string conn_id = 1;
     */
    _this42.connId = "";
    proto3.util.initPartial(data, _this42);
    return _this42;
  }
  _inherits(HealthCheckResponse, _Message42);
  return _createClass(HealthCheckResponse, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new HealthCheckResponse().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new HealthCheckResponse().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new HealthCheckResponse().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(HealthCheckResponse, a, b);
    }
  }]);
}(Message);
HealthCheckResponse.runtime = proto3;
HealthCheckResponse.typeName = "livekit.HealthCheckResponse";
HealthCheckResponse.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "conn_id",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * details about the device
 *
 * @generated from message livekit.DeviceInfo
 */
var DeviceInfo = /*#__PURE__*/function (_Message43) {
  function DeviceInfo(data) {
    var _this43;
    _classCallCheck(this, DeviceInfo);
    _this43 = _callSuper(this, DeviceInfo);
    /**
     * @generated from field: livekit.DeviceInfo.SDK sdk = 1;
     */
    _this43.sdk = DeviceInfo_SDK.UNKNOWN;
    /**
     * @generated from field: string os = 2;
     */
    _this43.os = "";
    /**
     * @generated from field: string deviceId = 3;
     */
    _this43.deviceId = "";
    /**
     * @generated from field: string date = 4;
     */
    _this43.date = "";
    /**
     * @generated from field: string ipaddress = 5;
     */
    _this43.ipaddress = "";
    /**
     * @generated from field: string nw_signal_strength = 6;
     */
    _this43.nwSignalStrength = "";
    proto3.util.initPartial(data, _this43);
    return _this43;
  }
  _inherits(DeviceInfo, _Message43);
  return _createClass(DeviceInfo, null, [{
    key: "fromBinary",
    value: function fromBinary(bytes, options) {
      return new DeviceInfo().fromBinary(bytes, options);
    }
  }, {
    key: "fromJson",
    value: function fromJson(jsonValue, options) {
      return new DeviceInfo().fromJson(jsonValue, options);
    }
  }, {
    key: "fromJsonString",
    value: function fromJsonString(jsonString, options) {
      return new DeviceInfo().fromJsonString(jsonString, options);
    }
  }, {
    key: "equals",
    value: function equals(a, b) {
      return proto3.util.equals(DeviceInfo, a, b);
    }
  }]);
}(Message);
DeviceInfo.runtime = proto3;
DeviceInfo.typeName = "livekit.DeviceInfo";
DeviceInfo.fields = proto3.util.newFieldList(function () {
  return [{
    no: 1,
    name: "sdk",
    kind: "enum",
    T: proto3.getEnumType(DeviceInfo_SDK)
  }, {
    no: 2,
    name: "os",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 3,
    name: "deviceId",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 4,
    name: "date",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 5,
    name: "ipaddress",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }, {
    no: 6,
    name: "nw_signal_strength",
    kind: "scalar",
    T: 9 /* ScalarType.STRING */
  }];
});
/**
 * @generated from enum livekit.DeviceInfo.SDK
 */
var DeviceInfo_SDK;
(function (DeviceInfo_SDK) {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["UNKNOWN"] = 0] = "UNKNOWN";
  /**
   * @generated from enum value: JS = 1;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["JS"] = 1] = "JS";
  /**
   * @generated from enum value: SWIFT = 2;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["SWIFT"] = 2] = "SWIFT";
  /**
   * @generated from enum value: ANDROID = 3;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["ANDROID"] = 3] = "ANDROID";
  /**
   * @generated from enum value: FLUTTER = 4;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["FLUTTER"] = 4] = "FLUTTER";
  /**
   * @generated from enum value: GO = 5;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["GO"] = 5] = "GO";
  /**
   * @generated from enum value: UNITY = 6;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["UNITY"] = 6] = "UNITY";
  /**
   * @generated from enum value: REACT_NATIVE = 7;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["REACT_NATIVE"] = 7] = "REACT_NATIVE";
  /**
   * @generated from enum value: RUST = 8;
   */
  DeviceInfo_SDK[DeviceInfo_SDK["RUST"] = 8] = "RUST";
})(DeviceInfo_SDK || (DeviceInfo_SDK = {}));
// Retrieve enum metadata with: proto3.getEnumType(DeviceInfo_SDK)
proto3.util.setEnumType(DeviceInfo_SDK, "livekit.DeviceInfo.SDK", [{
  no: 0,
  name: "UNKNOWN"
}, {
  no: 1,
  name: "JS"
}, {
  no: 2,
  name: "SWIFT"
}, {
  no: 3,
  name: "ANDROID"
}, {
  no: 4,
  name: "FLUTTER"
}, {
  no: 5,
  name: "GO"
}, {
  no: 6,
  name: "UNITY"
}, {
  no: 7,
  name: "REACT_NATIVE"
}, {
  no: 8,
  name: "RUST"
}]);

var events = {exports: {}};

var R = (typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}
function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};
function EventEmitter() {
  EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + _typeof(listener));
  }
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function get() {
    return defaultMaxListeners;
  },
  set: function set(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});
EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }
  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};
function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0) er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }
  var handler = events[type];
  if (handler === undefined) return false;
  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }
  return true;
};
function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }
  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }
  return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};
function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}
function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
};

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;
  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;
    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }
    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }
  return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this;

  // not listening for removeListener, no need to emit
  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;
    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }
  listeners = events[type];
  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }
  return this;
};
function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};
EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;
  if (events !== undefined) {
    var evlistener = events[type];
    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }
  return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i) copy[i] = arr[i];
  return copy;
}
function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];
  list.pop();
}
function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}
function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }
    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + _typeof(emitter));
  }
}
var eventsExports = events.exports;

/**
 * Events are the primary way LiveKit notifies your application of changes.
 *
 * The following are events emitted by [[Room]], listen to room events like
 *
 * ```typescript
 * room.on(RoomEvent.TrackPublished, (track, publication, participant) => {})
 * ```
 */
var RoomEvent;
(function (RoomEvent) {
  /**
   * When the connection to the server has been established
   */
  RoomEvent["Connected"] = "connected";
  /**
   * When the connection to the server has been interrupted and it's attempting
   * to reconnect.
   */
  RoomEvent["Reconnecting"] = "reconnecting";
  /**
  * When the signal connection to the server has been interrupted. This isn't noticeable to users most of the time.
  * It will resolve with a `RoomEvent.Reconnected` once the signal connection has been re-established.
  * If media fails additionally it an additional `RoomEvent.Reconnecting` will be emitted.
  */
  RoomEvent["SignalReconnecting"] = "signalReconnecting";
  /**
   * Fires when a reconnection has been successful.
   */
  RoomEvent["Reconnected"] = "reconnected";
  /**
   * When disconnected from room. This fires when room.disconnect() is called or
   * when an unrecoverable connection issue had occured.
   *
   * DisconnectReason can be used to determine why the participant was disconnected. Notable reasons are
   * - DUPLICATE_IDENTITY: another client with the same identity has joined the room
   * - PARTICIPANT_REMOVED: participant was removed by RemoveParticipant API
   * - ROOM_DELETED: the room has ended via DeleteRoom API
   *
   * args: ([[DisconnectReason]])
   * when an unrecoverable connection issue had occured.
   *
   * DisconnectReason can be used to determine why the participant was disconnected. Notable reasons are
   * - DUPLICATE_IDENTITY: another client with the same identity has joined the room
   * - PARTICIPANT_REMOVED: participant was removed by RemoveParticipant API
   * - ROOM_DELETED: the room has ended via DeleteRoom API
   *
   * args: ([[DisconnectReason]])
   */
  RoomEvent["Disconnected"] = "disconnected";
  /**
   * Whenever the connection state of the room changes
   *
   * args: ([[ConnectionState]])
   */
  RoomEvent["ConnectionStateChanged"] = "connectionStateChanged";
  /**
   * When input or output devices on the machine have changed.
   */
  RoomEvent["MediaDevicesChanged"] = "mediaDevicesChanged";
  /**
   * When a [[RemoteParticipant]] joins *after* the local
   * participant. It will not emit events for participants that are already
   * in the room
   *
   * args: ([[RemoteParticipant]])
   */
  RoomEvent["ParticipantConnected"] = "participantConnected";
  /**
   * When a [[RemoteParticipant]] leaves *after* the local
   * participant has joined.
   *
   * args: ([[RemoteParticipant]])
   */
  RoomEvent["ParticipantDisconnected"] = "participantDisconnected";
  /**
   * When a new track is published to room *after* the local
   * participant has joined. It will not fire for tracks that are already published.
   *
   * A track published doesn't mean the participant has subscribed to it. It's
   * simply reflecting the state of the room.
   *
   * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])
   */
  RoomEvent["TrackPublished"] = "trackPublished";
  /**
   * The [[LocalParticipant]] has subscribed to a new track. This event will **always**
   * fire as long as new tracks are ready for use.
   *
   * args: ([[RemoteTrack]], [[RemoteTrackPublication]], [[RemoteParticipant]])
   */
  RoomEvent["TrackSubscribed"] = "trackSubscribed";
  /**
   * Could not subscribe to a track
   *
   * args: (track sid, [[RemoteParticipant]])
   */
  RoomEvent["TrackSubscriptionFailed"] = "trackSubscriptionFailed";
  /**
   * A [[RemoteParticipant]] has unpublished a track
   *
   * args: ([[RemoteTrackPublication]], [[RemoteParticipant]])
   */
  RoomEvent["TrackUnpublished"] = "trackUnpublished";
  /**
   * A subscribed track is no longer available. Clients should listen to this
   * event and ensure they detach tracks.
   *
   * args: ([[Track]], [[RemoteTrackPublication]], [[RemoteParticipant]])
   */
  RoomEvent["TrackUnsubscribed"] = "trackUnsubscribed";
  /**
   * A track that was muted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]
   *
   * args: ([[TrackPublication]], [[Participant]])
   */
  RoomEvent["TrackMuted"] = "trackMuted";
  /**
   * A track that was unmuted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]
   *
   * args: ([[TrackPublication]], [[Participant]])
   */
  RoomEvent["TrackUnmuted"] = "trackUnmuted";
  /**
   * A local track was published successfully. This event is helpful to know
   * when to update your local UI with the newly published track.
   *
   * args: ([[LocalTrackPublication]], [[LocalParticipant]])
   */
  RoomEvent["LocalTrackPublished"] = "localTrackPublished";
  /**
   * A local track was unpublished. This event is helpful to know when to remove
   * the local track from your UI.
   *
   * When a user stops sharing their screen by pressing "End" on the browser UI,
   * this event will also fire.
   *
   * args: ([[LocalTrackPublication]], [[LocalParticipant]])
   */
  RoomEvent["LocalTrackUnpublished"] = "localTrackUnpublished";
  /**
   * When a local audio track is published the SDK checks whether there is complete silence
   * on that track and emits the LocalAudioSilenceDetected event in that case.
   * This allows for applications to show UI informing users that they might have to
   * reset their audio hardware or check for proper device connectivity.
   */
  RoomEvent["LocalAudioSilenceDetected"] = "localAudioSilenceDetected";
  /**
   * Active speakers changed. List of speakers are ordered by their audio level.
   * loudest speakers first. This will include the LocalParticipant too.
   *
   * Speaker updates are sent only to the publishing participant and their subscribers.
   *
   * args: (Array<[[Participant]]>)
   */
  RoomEvent["ActiveSpeakersChanged"] = "activeSpeakersChanged";
  /**
   * Participant metadata is a simple way for app-specific state to be pushed to
   * all users.
   * When RoomService.UpdateParticipantMetadata is called to change a participant's
   * state, *all*  participants in the room will fire this event.
   *
   * args: (prevMetadata: string, [[Participant]])
   *
   */
  RoomEvent["ParticipantMetadataChanged"] = "participantMetadataChanged";
  /**
   * Participant's display name changed
   *
   * args: (name: string, [[Participant]])
   *
   */
  RoomEvent["ParticipantNameChanged"] = "participantNameChanged";
  /**
  * Participant attributes is an app-specific key value state to be pushed to
  * all users.
  * When a participant's attributes changed, this event will be emitted with the changed attributes and the participant
  * args: (changedAttributes: [[Record<string, string]], participant: [[Participant]])
  */
  RoomEvent["ParticipantAttributesChanged"] = "participantAttributesChanged";
  /**
   * Room metadata is a simple way for app-specific state to be pushed to
   * all users.
   * When RoomService.UpdateRoomMetadata is called to change a room's state,
   * *all*  participants in the room will fire this event.
   *
   * args: (string)
   */
  RoomEvent["RoomMetadataChanged"] = "roomMetadataChanged";
  /**
   * Data received from another participant.
   * Data packets provides the ability to use LiveKit to send/receive arbitrary payloads.
   * All participants in the room will receive the messages sent to the room.
   *
   * args: (payload: Uint8Array, participant: [[Participant]], kind: [[DataPacket_Kind]], topic?: string)
   */
  RoomEvent["DataReceived"] = "dataReceived";
  /**
   * SIP DTMF tones received from another participant.
   *
   * args: (participant: [[Participant]], dtmf: [[DataPacket_Kind]])
   */
  RoomEvent["SipDTMFReceived"] = "sipDTMFReceived";
  /**
   * Transcription received from a participant's track.
   * @beta
   */
  RoomEvent["TranscriptionReceived"] = "transcriptionReceived";
  /**
   * Connection quality was changed for a Participant. It'll receive updates
   * from the local participant, as well as any [[RemoteParticipant]]s that we are
   * subscribed to.
   *
   * args: (connectionQuality: [[ConnectionQuality]], participant: [[Participant]])
   */
  RoomEvent["ConnectionQualityChanged"] = "connectionQualityChanged";
  /**
   * StreamState indicates if a subscribed (remote) track has been paused by the SFU
   * (typically this happens because of subscriber's bandwidth constraints)
   *
   * When bandwidth conditions allow, the track will be resumed automatically.
   * TrackStreamStateChanged will also be emitted when that happens.
   *
   * args: (pub: [[RemoteTrackPublication]], streamState: [[Track.StreamState]],
   *        participant: [[RemoteParticipant]])
   */
  RoomEvent["TrackStreamStateChanged"] = "trackStreamStateChanged";
  /**
   * One of subscribed tracks have changed its permissions for the current
   * participant. If permission was revoked, then the track will no longer
   * be subscribed. If permission was granted, a TrackSubscribed event will
   * be emitted.
   *
   * args: (pub: [[RemoteTrackPublication]],
   *        status: [[TrackPublication.PermissionStatus]],
   *        status: [[TrackPublication.PermissionStatus]],
   *        participant: [[RemoteParticipant]])
   */
  RoomEvent["TrackSubscriptionPermissionChanged"] = "trackSubscriptionPermissionChanged";
  /**
   * One of subscribed tracks have changed its status for the current
   * participant.
   *
   * args: (pub: [[RemoteTrackPublication]],
   *        status: [[TrackPublication.SubscriptionStatus]],
   *        participant: [[RemoteParticipant]])
   */
  RoomEvent["TrackSubscriptionStatusChanged"] = "trackSubscriptionStatusChanged";
  /**
   * LiveKit will attempt to autoplay all audio tracks when you attach them to
   * audio elements. However, if that fails, we'll notify you via AudioPlaybackStatusChanged.
   * `Room.canPlaybackAudio` will indicate if audio playback is permitted.
   */
  RoomEvent["AudioPlaybackStatusChanged"] = "audioPlaybackChanged";
  /**
   * LiveKit will attempt to autoplay all video tracks when you attach them to
   * a video element. However, if that fails, we'll notify you via VideoPlaybackStatusChanged.
   * Calling `room.startVideo()` in a user gesture event handler will resume the video playback.
   */
  RoomEvent["VideoPlaybackStatusChanged"] = "videoPlaybackChanged";
  /**
   * When we have encountered an error while attempting to create a track.
   * The errors take place in getUserMedia().
   * Use MediaDeviceFailure.getFailure(error) to get the reason of failure.
   * [[LocalParticipant.lastCameraError]] and [[LocalParticipant.lastMicrophoneError]]
   * will indicate if it had an error while creating the audio or video track respectively.
   *
   * args: (error: Error)
   */
  RoomEvent["MediaDevicesError"] = "mediaDevicesError";
  /**
   *   * A participant's permission has changed.
   * args: (prevPermissions: [[ParticipantPermission]], participant: [[Participant]])
   */
  RoomEvent["ParticipantPermissionsChanged"] = "participantPermissionsChanged";
  /**
   * Signal connected, can publish tracks.
   */
  RoomEvent["SignalConnected"] = "signalConnected";
  /**
   * Recording of a room has started/stopped. Room.isRecording will be updated too.
   * args: (isRecording: boolean)
   */
  RoomEvent["RecordingStatusChanged"] = "recordingStatusChanged";
  RoomEvent["ParticipantEncryptionStatusChanged"] = "participantEncryptionStatusChanged";
  RoomEvent["EncryptionError"] = "encryptionError";
  /**
   * Emits whenever the current buffer status of a data channel changes
   * args: (isLow: boolean, kind: [[DataPacket_Kind]])
   */
  RoomEvent["DCBufferStatusChanged"] = "dcBufferStatusChanged";
  /**
   * Triggered by a call to room.switchActiveDevice
   * args: (kind: MediaDeviceKind, deviceId: string)
   */
  RoomEvent["ActiveDeviceChanged"] = "activeDeviceChanged";
  RoomEvent["ChatMessage"] = "chatMessage";
  RoomEvent["ReconnectPrimaryDelay"] = "reconnectPrimaryDelay";
  RoomEvent["ReconnectSecondaryDelay"] = "reconnectSecondaryDelay";
  RoomEvent["ReconnectICEDelay"] = "reconnectICEDelay";
  /**
   * fired when the first remote participant has subscribed to the localParticipant's track
   */
  RoomEvent["LocalTrackSubscribed"] = "localTrackSubscribed";
  /**
   * fired when the client receives connection metrics from other participants
   */
  RoomEvent["MetricsReceived"] = "metricsReceived";
})(RoomEvent || (RoomEvent = {}));
var ParticipantEvent;
(function (ParticipantEvent) {
  /**
   * When a new track is published to room *after* the local
   * participant has joined. It will not fire for tracks that are already published.
   *
   * A track published doesn't mean the participant has subscribed to it. It's
   * simply reflecting the state of the room.
   *
   * args: ([[RemoteTrackPublication]])
   */
  ParticipantEvent["TrackPublished"] = "trackPublished";
  /**
   * Successfully subscribed to the [[RemoteParticipant]]'s track.
   * This event will **always** fire as long as new tracks are ready for use.
   *
   * args: ([[RemoteTrack]], [[RemoteTrackPublication]])
   */
  ParticipantEvent["TrackSubscribed"] = "trackSubscribed";
  /**
   * Could not subscribe to a track
   *
   * args: (track sid)
   */
  ParticipantEvent["TrackSubscriptionFailed"] = "trackSubscriptionFailed";
  /**
   * A [[RemoteParticipant]] has unpublished a track
   *
   * args: ([[RemoteTrackPublication]])
   */
  ParticipantEvent["TrackUnpublished"] = "trackUnpublished";
  /**
   * A subscribed track is no longer available. Clients should listen to this
   * event and ensure they detach tracks.
   *
   * args: ([[RemoteTrack]], [[RemoteTrackPublication]])
   */
  ParticipantEvent["TrackUnsubscribed"] = "trackUnsubscribed";
  /**
   * A track that was muted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]
   *
   * args: ([[TrackPublication]])
   */
  ParticipantEvent["TrackMuted"] = "trackMuted";
  /**
   * A track that was unmuted, fires on both [[RemoteParticipant]]s and [[LocalParticipant]]
   *
   * args: ([[TrackPublication]])
   */
  ParticipantEvent["TrackUnmuted"] = "trackUnmuted";
  /**
   * A local track was published successfully. This event is helpful to know
   * when to update your local UI with the newly published track.
   *
   * args: ([[LocalTrackPublication]])
   */
  ParticipantEvent["LocalTrackPublished"] = "localTrackPublished";
  /**
   * A local track was unpublished. This event is helpful to know when to remove
   * the local track from your UI.
   *
   * When a user stops sharing their screen by pressing "End" on the browser UI,
   * this event will also fire.
   *
   * args: ([[LocalTrackPublication]])
   */
  ParticipantEvent["LocalTrackUnpublished"] = "localTrackUnpublished";
  /**
   * Participant metadata is a simple way for app-specific state to be pushed to
   * all users.
   * When RoomService.UpdateParticipantMetadata is called to change a participant's
   * state, *all*  participants in the room will fire this event.
   * To access the current metadata, see [[Participant.metadata]].
   *
   * args: (prevMetadata: string)
   *
   */
  ParticipantEvent["ParticipantMetadataChanged"] = "participantMetadataChanged";
  /**
   * Participant's display name changed
   *
   * args: (name: string, [[Participant]])
   *
   */
  ParticipantEvent["ParticipantNameChanged"] = "participantNameChanged";
  /**
   * Data received from this participant as sender.
   * Data packets provides the ability to use LiveKit to send/receive arbitrary payloads.
   * All participants in the room will receive the messages sent to the room.
   *
   * args: (payload: Uint8Array, kind: [[DataPacket_Kind]])
   */
  ParticipantEvent["DataReceived"] = "dataReceived";
  /**
   * SIP DTMF tones received from this participant as sender.
   *
   * args: (dtmf: [[DataPacket_Kind]])
   */
  ParticipantEvent["SipDTMFReceived"] = "sipDTMFReceived";
  /**
   * Transcription received from this participant as data source.
   * @beta
   */
  ParticipantEvent["TranscriptionReceived"] = "transcriptionReceived";
  /**
   * Has speaking status changed for the current participant
   *
   * args: (speaking: boolean)
   */
  ParticipantEvent["IsSpeakingChanged"] = "isSpeakingChanged";
  /**
   * Connection quality was changed for a Participant. It'll receive updates
   * from the local participant, as well as any [[RemoteParticipant]]s that we are
   * subscribed to.
   *
   * args: (connectionQuality: [[ConnectionQuality]])
   */
  ParticipantEvent["ConnectionQualityChanged"] = "connectionQualityChanged";
  /**
   * StreamState indicates if a subscribed track has been paused by the SFU
   * (typically this happens because of subscriber's bandwidth constraints)
   *
   * When bandwidth conditions allow, the track will be resumed automatically.
   * TrackStreamStateChanged will also be emitted when that happens.
   *
   * args: (pub: [[RemoteTrackPublication]], streamState: [[Track.StreamState]])
   */
  ParticipantEvent["TrackStreamStateChanged"] = "trackStreamStateChanged";
  /**
   * One of subscribed tracks have changed its permissions for the current
   * participant. If permission was revoked, then the track will no longer
   * be subscribed. If permission was granted, a TrackSubscribed event will
   * be emitted.
   *
   * args: (pub: [[RemoteTrackPublication]],
   *        status: [[TrackPublication.SubscriptionStatus]])
   */
  ParticipantEvent["TrackSubscriptionPermissionChanged"] = "trackSubscriptionPermissionChanged";
  /**
   * One of the remote participants publications has changed its subscription status.
   *
   */
  ParticipantEvent["TrackSubscriptionStatusChanged"] = "trackSubscriptionStatusChanged";
  // fired only on LocalParticipant
  /** @internal */
  ParticipantEvent["MediaDevicesError"] = "mediaDevicesError";
  // fired only on LocalParticipant
  /** @internal */
  ParticipantEvent["AudioStreamAcquired"] = "audioStreamAcquired";
  /**
   *  * A participant's permission has changed.
   * args: (prevPermissions: [[ParticipantPermission]])
   */
  ParticipantEvent["ParticipantPermissionsChanged"] = "participantPermissionsChanged";
  /** @internal */
  ParticipantEvent["PCTrackAdded"] = "pcTrackAdded";
  /**
   * Participant attributes is an app-specific key value state to be pushed to
   * all users.
   * When a participant's attributes changed, this event will be emitted with the changed attributes
   * * args: (changedAttributes: [[Record<string, string]])
   */
  ParticipantEvent["AttributesChanged"] = "attributesChanged";
  /** only emitted on local participant */
  ParticipantEvent["ChatMessage"] = "chatMessage";
  /**
   * fired on local participant only, when the first remote participant has subscribed to the track specified in the payload
   */
  ParticipantEvent["LocalTrackSubscribed"] = "localTrackSubscribed";
})(ParticipantEvent || (ParticipantEvent = {}));
/** @internal */
var EngineEvent;
(function (EngineEvent) {
  EngineEvent["TransportsCreated"] = "transportsCreated";
  EngineEvent["Connected"] = "connected";
  EngineEvent["Disconnected"] = "disconnected";
  EngineEvent["Resuming"] = "resuming";
  EngineEvent["Resumed"] = "resumed";
  EngineEvent["Restarting"] = "restarting";
  EngineEvent["Restarted"] = "restarted";
  EngineEvent["SignalResumed"] = "signalResumed";
  EngineEvent["SignalRestarted"] = "signalRestarted";
  EngineEvent["Closing"] = "closing";
  EngineEvent["MediaTrackAdded"] = "mediaTrackAdded";
  EngineEvent["ActiveSpeakersUpdate"] = "activeSpeakersUpdate";
  EngineEvent["DataPacketReceived"] = "dataPacketReceived";
  EngineEvent["PrimaryDelay"] = "primaryDelay";
  EngineEvent["SecondaryDelay"] = "secondaryDelay";
  EngineEvent["TranscriptionReceived"] = "transcriptionReceived";
  EngineEvent["RTPVideoMapUpdate"] = "rtpVideoMapUpdate";
  EngineEvent["DCBufferStatusChanged"] = "dcBufferStatusChanged";
  EngineEvent["ParticipantUpdate"] = "participantUpdate";
  EngineEvent["RoomUpdate"] = "roomUpdate";
  EngineEvent["SpeakersChanged"] = "speakersChanged";
  EngineEvent["StreamStateChanged"] = "streamStateChanged";
  EngineEvent["ConnectionQualityUpdate"] = "connectionQualityUpdate";
  EngineEvent["SubscriptionError"] = "subscriptionError";
  EngineEvent["SubscriptionPermissionUpdate"] = "subscriptionPermissionUpdate";
  EngineEvent["RemoteMute"] = "remoteMute";
  EngineEvent["SubscribedQualityUpdate"] = "subscribedQualityUpdate";
  EngineEvent["LocalTrackUnpublished"] = "localTrackUnpublished";
  EngineEvent["LocalTrackSubscribed"] = "localTrackSubscribed";
  EngineEvent["Offline"] = "offline";
  EngineEvent["SignalRequestResponse"] = "signalRequestResponse";
})(EngineEvent || (EngineEvent = {}));
var TrackEvent;
(function (TrackEvent) {
  TrackEvent["Message"] = "message";
  TrackEvent["Muted"] = "muted";
  TrackEvent["Unmuted"] = "unmuted";
  /**
   * Only fires on LocalTracks
   */
  TrackEvent["Restarted"] = "restarted";
  TrackEvent["Ended"] = "ended";
  TrackEvent["Subscribed"] = "subscribed";
  TrackEvent["Unsubscribed"] = "unsubscribed";
  /** @internal */
  TrackEvent["UpdateSettings"] = "updateSettings";
  /** @internal */
  TrackEvent["UpdateSubscription"] = "updateSubscription";
  /** @internal */
  TrackEvent["AudioPlaybackStarted"] = "audioPlaybackStarted";
  /** @internal */
  TrackEvent["AudioPlaybackFailed"] = "audioPlaybackFailed";
  /**
   * @internal
   * Only fires on LocalAudioTrack instances
   */
  TrackEvent["AudioSilenceDetected"] = "audioSilenceDetected";
  /** @internal */
  TrackEvent["VisibilityChanged"] = "visibilityChanged";
  /** @internal */
  TrackEvent["VideoDimensionsChanged"] = "videoDimensionsChanged";
  /** @internal */
  TrackEvent["VideoPlaybackStarted"] = "videoPlaybackStarted";
  /** @internal */
  TrackEvent["VideoPlaybackFailed"] = "videoPlaybackFailed";
  /** @internal */
  TrackEvent["ElementAttached"] = "elementAttached";
  /** @internal */
  TrackEvent["ElementDetached"] = "elementDetached";
  /**
   * @internal
   * Only fires on LocalTracks
   */
  TrackEvent["UpstreamPaused"] = "upstreamPaused";
  /**
   * @internal
   * Only fires on LocalTracks
   */
  TrackEvent["UpstreamResumed"] = "upstreamResumed";
  /**
   * @internal
   * Fires on RemoteTrackPublication
   */
  TrackEvent["SubscriptionPermissionChanged"] = "subscriptionPermissionChanged";
  /**
   * Fires on RemoteTrackPublication
   */
  TrackEvent["SubscriptionStatusChanged"] = "subscriptionStatusChanged";
  /**
   * Fires on RemoteTrackPublication
   */
  TrackEvent["SubscriptionFailed"] = "subscriptionFailed";
  /**
   * @internal
   */
  TrackEvent["TrackProcessorUpdate"] = "trackProcessorUpdate";
  /**
   * @internal
   */
  TrackEvent["AudioTrackFeatureUpdate"] = "audioTrackFeatureUpdate";
  /**
   * @beta
   */
  TrackEvent["TranscriptionReceived"] = "transcriptionReceived";
  /**
   * @experimental
   */
  TrackEvent["TimeSyncUpdate"] = "timeSyncUpdate";
})(TrackEvent || (TrackEvent = {}));

var BACKGROUND_REACTION_DELAY = 5000;
// keep old audio elements when detached, we would re-use them since on iOS
// Safari tracks which audio elements have been "blessed" by the user.
var recycledElements = [];
var VideoQuality;
(function (VideoQuality) {
  VideoQuality[VideoQuality["LOW"] = 0] = "LOW";
  VideoQuality[VideoQuality["MEDIUM"] = 1] = "MEDIUM";
  VideoQuality[VideoQuality["HIGH"] = 2] = "HIGH";
})(VideoQuality || (VideoQuality = {}));
var Track = /*#__PURE__*/function (_EventEmitter) {
  function Track(mediaTrack, kind) {
    var _this;
    var loggerOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    _classCallCheck(this, Track);
    var _a;
    _this = _callSuper(this, Track);
    _this.attachedElements = [];
    _this.isMuted = false;
    /**
     * indicates current state of stream, it'll indicate `paused` if the track
     * has been paused by congestion controller
     */
    _this.streamState = Track.StreamState.Active;
    _this.isInBackground = false;
    _this._currentBitrate = 0;
    _this.log = livekitLogger;
    _this.appVisibilityChangedListener = function () {
      if (_this.backgroundTimeout) {
        clearTimeout(_this.backgroundTimeout);
      }
      // delay app visibility update if it goes to hidden
      // update immediately if it comes back to focus
      if (document.visibilityState === 'hidden') {
        _this.backgroundTimeout = setTimeout(function () {
          return _this.handleAppVisibilityChanged();
        }, BACKGROUND_REACTION_DELAY);
      } else {
        _this.handleAppVisibilityChanged();
      }
    };
    _this.log = getLogger((_a = loggerOptions.loggerName) !== null && _a !== void 0 ? _a : LoggerNames.Track);
    _this.loggerContextCb = loggerOptions.loggerContextCb;
    _this.setMaxListeners(100);
    _this.kind = kind;
    _this._mediaStreamTrack = mediaTrack;
    _this._mediaStreamID = mediaTrack.id;
    _this.source = Track.Source.Unknown;
    return _this;
  }
  _inherits(Track, _EventEmitter);
  return _createClass(Track, [{
    key: "logContext",
    get: function get() {
      var _a;
      return Object.assign(Object.assign({}, (_a = this.loggerContextCb) === null || _a === void 0 ? void 0 : _a.call(this)), getLogContextFromTrack(this));
    }
    /** current receive bits per second */
  }, {
    key: "currentBitrate",
    get: function get() {
      return this._currentBitrate;
    }
  }, {
    key: "mediaStreamTrack",
    get: function get() {
      return this._mediaStreamTrack;
    }
    /**
     * @internal
     * used for keep mediaStream's first id, since it's id might change
     * if we disable/enable a track
     */
  }, {
    key: "mediaStreamID",
    get: function get() {
      return this._mediaStreamID;
    }
  }, {
    key: "attach",
    value: function attach(element) {
      var _this2 = this;
      var elementType = 'audio';
      if (this.kind === Track.Kind.Video) {
        elementType = 'video';
      }
      if (this.attachedElements.length === 0 && this.kind === Track.Kind.Video) {
        this.addAppVisibilityListener();
      }
      if (!element) {
        if (elementType === 'audio') {
          recycledElements.forEach(function (e) {
            if (e.parentElement === null && !element) {
              element = e;
            }
          });
          if (element) {
            // remove it from pool
            recycledElements.splice(recycledElements.indexOf(element), 1);
          }
        }
        if (!element) {
          element = document.createElement(elementType);
        }
      }
      if (!this.attachedElements.includes(element)) {
        this.attachedElements.push(element);
      }
      // even if we believe it's already attached to the element, it's possible
      // the element's srcObject was set to something else out of band.
      // we'll want to re-attach it in that case
      attachToElement(this.mediaStreamTrack, element);
      // handle auto playback failures
      var allMediaStreamTracks = element.srcObject.getTracks();
      var hasAudio = allMediaStreamTracks.some(function (tr) {
        return tr.kind === 'audio';
      });
      // manually play media to detect auto playback status
      element.play().then(function () {
        _this2.emit(hasAudio ? TrackEvent.AudioPlaybackStarted : TrackEvent.VideoPlaybackStarted);
      })["catch"](function (e) {
        if (e.name === 'NotAllowedError') {
          _this2.emit(hasAudio ? TrackEvent.AudioPlaybackFailed : TrackEvent.VideoPlaybackFailed, e);
        } else if (e.name === 'AbortError') {
          // commonly triggered by another `play` request, only log for debugging purposes
          livekitLogger.debug("".concat(hasAudio ? 'audio' : 'video', " playback aborted, likely due to new play request"));
        } else {
          livekitLogger.warn("could not playback ".concat(hasAudio ? 'audio' : 'video'), e);
        }
        // If audio playback isn't allowed make sure we still play back the video
        if (hasAudio && element && allMediaStreamTracks.some(function (tr) {
          return tr.kind === 'video';
        }) && e.name === 'NotAllowedError') {
          element.muted = true;
          element.play()["catch"](function () {
            // catch for Safari, exceeded options at this point to automatically play the media element
          });
        }
      });
      this.emit(TrackEvent.ElementAttached, element);
      return element;
    }
  }, {
    key: "detach",
    value: function detach(element) {
      var _this3 = this;
      try {
        // detach from a single element
        if (element) {
          detachTrack(this.mediaStreamTrack, element);
          var idx = this.attachedElements.indexOf(element);
          if (idx >= 0) {
            this.attachedElements.splice(idx, 1);
            this.recycleElement(element);
            this.emit(TrackEvent.ElementDetached, element);
          }
          return element;
        }
        var detached = [];
        this.attachedElements.forEach(function (elm) {
          detachTrack(_this3.mediaStreamTrack, elm);
          detached.push(elm);
          _this3.recycleElement(elm);
          _this3.emit(TrackEvent.ElementDetached, elm);
        });
        // remove all tracks
        this.attachedElements = [];
        return detached;
      } finally {
        if (this.attachedElements.length === 0) {
          this.removeAppVisibilityListener();
        }
      }
    }
  }, {
    key: "stop",
    value: function stop() {
      this.stopMonitor();
      this._mediaStreamTrack.stop();
    }
  }, {
    key: "enable",
    value: function enable() {
      this._mediaStreamTrack.enabled = true;
    }
  }, {
    key: "disable",
    value: function disable() {
      this._mediaStreamTrack.enabled = false;
    }
    /* @internal */
  }, {
    key: "stopMonitor",
    value: function stopMonitor() {
      if (this.monitorInterval) {
        clearInterval(this.monitorInterval);
      }
      if (this.timeSyncHandle) {
        cancelAnimationFrame(this.timeSyncHandle);
      }
    }
    /** @internal */
  }, {
    key: "updateLoggerOptions",
    value: function updateLoggerOptions(loggerOptions) {
      if (loggerOptions.loggerName) {
        this.log = getLogger(loggerOptions.loggerName);
      }
      if (loggerOptions.loggerContextCb) {
        this.loggerContextCb = loggerOptions.loggerContextCb;
      }
    }
  }, {
    key: "recycleElement",
    value: function recycleElement(element) {
      if (element instanceof HTMLAudioElement) {
        // we only need to re-use a single element
        var shouldCache = true;
        element.pause();
        recycledElements.forEach(function (e) {
          if (!e.parentElement) {
            shouldCache = false;
          }
        });
        if (shouldCache) {
          recycledElements.push(element);
        }
      }
    }
  }, {
    key: "handleAppVisibilityChanged",
    value: function handleAppVisibilityChanged() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee() {
        var _this4 = this;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              this.isInBackground = document.visibilityState === 'hidden';
              if (!this.isInBackground && this.kind === Track.Kind.Video) {
                setTimeout(function () {
                  return _this4.attachedElements.forEach(function (el) {
                    return el.play()["catch"](function () {
                      /** catch clause necessary for Safari */
                    });
                  });
                }, 0);
              }
            case 1:
              return _context.a(2);
          }
        }, _callee, this);
      }));
    }
  }, {
    key: "addAppVisibilityListener",
    value: function addAppVisibilityListener() {
      if (isWeb()) {
        this.isInBackground = document.visibilityState === 'hidden';
        document.addEventListener('visibilitychange', this.appVisibilityChangedListener);
      } else {
        this.isInBackground = false;
      }
    }
  }, {
    key: "removeAppVisibilityListener",
    value: function removeAppVisibilityListener() {
      if (isWeb()) {
        document.removeEventListener('visibilitychange', this.appVisibilityChangedListener);
      }
    }
  }]);
}(eventsExports.EventEmitter);
function attachToElement(track, element) {
  var mediaStream;
  if (element.srcObject instanceof MediaStream) {
    mediaStream = element.srcObject;
  } else {
    mediaStream = new MediaStream();
  }
  // check if track matches existing track
  var existingTracks;
  if (track.kind === 'audio') {
    existingTracks = mediaStream.getAudioTracks();
  } else {
    existingTracks = mediaStream.getVideoTracks();
  }
  if (!existingTracks.includes(track)) {
    existingTracks.forEach(function (et) {
      mediaStream.removeTrack(et);
    });
    mediaStream.addTrack(track);
  }
  if (!isSafari() || !(element instanceof HTMLVideoElement)) {
    // when in low power mode (applies to both macOS and iOS), Safari will show a play/pause overlay
    // when a video starts that has the `autoplay` attribute is set.
    // we work around this by _not_ setting the autoplay attribute on safari and instead call `setTimeout(() => el.play(),0)` further down
    element.autoplay = true;
  }
  // In case there are no audio tracks present on the mediastream, we set the element as muted to ensure autoplay works
  element.muted = mediaStream.getAudioTracks().length === 0;
  if (element instanceof HTMLVideoElement) {
    element.playsInline = true;
  }
  // avoid flicker
  if (element.srcObject !== mediaStream) {
    element.srcObject = mediaStream;
    if ((isSafari() || isFireFox()) && element instanceof HTMLVideoElement) {
      // Firefox also has a timing issue where video doesn't actually get attached unless
      // performed out-of-band
      // Safari 15 has a bug where in certain layouts, video element renders
      // black until the page is resized or other changes take place.
      // Resetting the src triggers it to render.
      // https://developer.apple.com/forums/thread/690523
      setTimeout(function () {
        element.srcObject = mediaStream;
        // Safari 15 sometimes fails to start a video
        // when the window is backgrounded before the first frame is drawn
        // manually calling play here seems to fix that
        element.play()["catch"](function () {
          /** do nothing */
        });
      }, 0);
    }
  }
}
/** @internal */
function detachTrack(track, element) {
  if (element.srcObject instanceof MediaStream) {
    var mediaStream = element.srcObject;
    mediaStream.removeTrack(track);
    if (mediaStream.getTracks().length > 0) {
      element.srcObject = mediaStream;
    } else {
      element.srcObject = null;
    }
  }
}
(function (Track) {
  var Kind;
  (function (Kind) {
    Kind["Audio"] = "audio";
    Kind["Video"] = "video";
    Kind["Unknown"] = "unknown";
  })(Kind = Track.Kind || (Track.Kind = {}));
  var Source;
  (function (Source) {
    Source["Camera"] = "camera";
    Source["Microphone"] = "microphone";
    Source["ScreenShare"] = "screen_share";
    Source["ScreenShareAudio"] = "screen_share_audio";
    Source["Unknown"] = "unknown";
  })(Source = Track.Source || (Track.Source = {}));
  var StreamState$1;
  (function (StreamState) {
    StreamState["Active"] = "active";
    StreamState["Paused"] = "paused";
    StreamState["Unknown"] = "unknown";
  })(StreamState$1 = Track.StreamState || (Track.StreamState = {}));
  /** @internal */
  function kindToProto(k) {
    switch (k) {
      case Kind.Audio:
        return TrackType.AUDIO;
      case Kind.Video:
        return TrackType.VIDEO;
      default:
        // FIXME this was UNRECOGNIZED before
        return TrackType.DATA;
    }
  }
  Track.kindToProto = kindToProto;
  /** @internal */
  function kindFromProto(t) {
    switch (t) {
      case TrackType.AUDIO:
        return Kind.Audio;
      case TrackType.VIDEO:
        return Kind.Video;
      default:
        return Kind.Unknown;
    }
  }
  Track.kindFromProto = kindFromProto;
  /** @internal */
  function sourceToProto(s) {
    switch (s) {
      case Source.Camera:
        return TrackSource.CAMERA;
      case Source.Microphone:
        return TrackSource.MICROPHONE;
      case Source.ScreenShare:
        return TrackSource.SCREEN_SHARE;
      case Source.ScreenShareAudio:
        return TrackSource.SCREEN_SHARE_AUDIO;
      default:
        return TrackSource.UNKNOWN;
    }
  }
  Track.sourceToProto = sourceToProto;
  /** @internal */
  function sourceFromProto(s) {
    switch (s) {
      case TrackSource.CAMERA:
        return Source.Camera;
      case TrackSource.MICROPHONE:
        return Source.Microphone;
      case TrackSource.SCREEN_SHARE:
        return Source.ScreenShare;
      case TrackSource.SCREEN_SHARE_AUDIO:
        return Source.ScreenShareAudio;
      default:
        return Source.Unknown;
    }
  }
  Track.sourceFromProto = sourceFromProto;
  /** @internal */
  function streamStateFromProto(s) {
    switch (s) {
      case StreamState.ACTIVE:
        return StreamState$1.Active;
      case StreamState.PAUSED:
        return StreamState$1.Paused;
      default:
        return StreamState$1.Unknown;
    }
  }
  Track.streamStateFromProto = streamStateFromProto;
})(Track || (Track = {}));

function getLogContextFromTrack(track) {
  if (track instanceof Track) {
    return {
      trackID: track.sid,
      source: track.source,
      muted: track.isMuted,
      enabled: track.mediaStreamTrack.enabled,
      kind: track.kind,
      streamID: track.mediaStreamID,
      streamTrackID: track.mediaStreamTrack.id
    };
  } else {
    return {
      trackID: track.trackSid,
      enabled: track.isEnabled,
      muted: track.isMuted,
      trackInfo: Object.assign({
        mimeType: track.mimeType,
        name: track.trackName,
        encrypted: track.isEncrypted,
        kind: track.kind,
        source: track.source
      }, track.track ? getLogContextFromTrack(track.track) : {})
    };
  }
}

function isFireFox() {
  var _a;
  return ((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.name) === 'Firefox';
}
function isSafari() {
  var _a;
  return ((_a = getBrowser()) === null || _a === void 0 ? void 0 : _a.name) === 'Safari';
}
function isWeb() {
  return typeof document !== 'undefined';
}
/**
 * @internal
 */
var Mutex = /*#__PURE__*/function () {
  function Mutex() {
    _classCallCheck(this, Mutex);
    this._locking = Promise.resolve();
    this._locks = 0;
  }
  return _createClass(Mutex, [{
    key: "isLocked",
    value: function isLocked() {
      return this._locks > 0;
    }
  }, {
    key: "lock",
    value: function lock() {
      var _this3 = this;
      this._locks += 1;
      var unlockNext;
      var willLock = new Promise(function (resolve) {
        return unlockNext = function unlockNext() {
          _this3._locks -= 1;
          resolve();
        };
      });
      var willUnlock = this._locking.then(function () {
        return unlockNext;
      });
      this._locking = this._locking.then(function () {
        return willLock;
      });
      return willUnlock;
    }
  }]);
}();

var QueueTaskStatus;
(function (QueueTaskStatus) {
  QueueTaskStatus[QueueTaskStatus["WAITING"] = 0] = "WAITING";
  QueueTaskStatus[QueueTaskStatus["RUNNING"] = 1] = "RUNNING";
  QueueTaskStatus[QueueTaskStatus["COMPLETED"] = 2] = "COMPLETED";
})(QueueTaskStatus || (QueueTaskStatus = {}));
var AsyncQueue = /*#__PURE__*/function () {
  function AsyncQueue() {
    _classCallCheck(this, AsyncQueue);
    this.pendingTasks = new Map();
    this.taskMutex = new Mutex();
    this.nextTaskIndex = 0;
  }
  return _createClass(AsyncQueue, [{
    key: "run",
    value: function run(task) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee() {
        var taskInfo, unlock;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              taskInfo = {
                id: this.nextTaskIndex++,
                enqueuedAt: Date.now(),
                status: QueueTaskStatus.WAITING
              };
              this.pendingTasks.set(taskInfo.id, taskInfo);
              _context.n = 1;
              return this.taskMutex.lock();
            case 1:
              unlock = _context.v;
              _context.p = 2;
              taskInfo.executedAt = Date.now();
              taskInfo.status = QueueTaskStatus.RUNNING;
              _context.n = 3;
              return task();
            case 3:
              return _context.a(2, _context.v);
            case 4:
              _context.p = 4;
              taskInfo.status = QueueTaskStatus.COMPLETED;
              this.pendingTasks["delete"](taskInfo.id);
              unlock();
              return _context.f(4);
            case 5:
              return _context.a(2);
          }
        }, _callee, this, [[2,, 4, 5]]);
      }));
    }
  }, {
    key: "flush",
    value: function flush() {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee3() {
        var _this = this;
        return _regenerator().w(function (_context3) {
          while (1) switch (_context3.n) {
            case 0:
              return _context3.a(2, this.run(function () {
                return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee2() {
                  return _regenerator().w(function (_context2) {
                    while (1) switch (_context2.n) {
                      case 0:
                        return _context2.a(2);
                    }
                  }, _callee2);
                }));
              }));
          }
        }, _callee3, this);
      }));
    }
  }, {
    key: "snapshot",
    value: function snapshot() {
      return Array.from(this.pendingTasks.values());
    }
  }]);
}();

var ENCRYPTION_ALGORITHM = 'AES-GCM';
// How many consecutive frames can fail decrypting before a particular key gets marked as invalid
var DECRYPTION_FAILURE_TOLERANCE = 10;
// We copy the first bytes of the VP8 payload unencrypted.
// For keyframes this is 10 bytes, for non-keyframes (delta) 3. See
//   https://tools.ietf.org/html/rfc6386#section-9.1
// This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)
// and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures
// instead of being unable to decode).
// This is a bit for show and we might want to reduce to 1 unconditionally in the final version.
//
// For audio (where frame.type is not set) we do not encrypt the opus TOC byte:
//   https://tools.ietf.org/html/rfc6716#section-3.1
var UNENCRYPTED_BYTES = {
  key: 10,
  delta: 3,
  audio: 1,
  // frame.type is not set on audio, so this is set manually
  empty: 0
};
/* We use a 12 byte bit IV. This is signalled in plain together with the
 packet. See https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters */
var IV_LENGTH = 12;
var SALT = 'LKFrameEncryptionKey';
var KEY_PROVIDER_DEFAULTS = {
  sharedKey: false,
  ratchetSalt: SALT,
  ratchetWindowSize: 8,
  failureTolerance: DECRYPTION_FAILURE_TOLERANCE,
  keyringSize: 16
};
var MAX_SIF_COUNT = 100;
var MAX_SIF_DURATION = 2000;

var LivekitError = /*#__PURE__*/function (_Error) {
  function LivekitError(code, message) {
    var _this;
    _classCallCheck(this, LivekitError);
    _this = _callSuper(this, LivekitError, [message || 'an error has occured']);
    _this.code = code;
    return _this;
  }
  _inherits(LivekitError, _Error);
  return _createClass(LivekitError);
}(/*#__PURE__*/_wrapNativeSuper(Error));
var MediaDeviceFailure;
(function (MediaDeviceFailure) {
  // user rejected permissions
  MediaDeviceFailure["PermissionDenied"] = "PermissionDenied";
  // device is not available
  MediaDeviceFailure["NotFound"] = "NotFound";
  // device is in use. On Windows, only a single tab may get access to a device at a time.
  MediaDeviceFailure["DeviceInUse"] = "DeviceInUse";
  MediaDeviceFailure["Other"] = "Other";
})(MediaDeviceFailure || (MediaDeviceFailure = {}));
(function (MediaDeviceFailure) {
  function getFailure(error) {
    if (error && 'name' in error) {
      if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {
        return MediaDeviceFailure.NotFound;
      }
      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {
        return MediaDeviceFailure.PermissionDenied;
      }
      if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {
        return MediaDeviceFailure.DeviceInUse;
      }
      return MediaDeviceFailure.Other;
    }
  }
  MediaDeviceFailure.getFailure = getFailure;
})(MediaDeviceFailure || (MediaDeviceFailure = {}));

var CryptorErrorReason;
(function (CryptorErrorReason) {
  CryptorErrorReason[CryptorErrorReason["InvalidKey"] = 0] = "InvalidKey";
  CryptorErrorReason[CryptorErrorReason["MissingKey"] = 1] = "MissingKey";
  CryptorErrorReason[CryptorErrorReason["InternalError"] = 2] = "InternalError";
})(CryptorErrorReason || (CryptorErrorReason = {}));
var CryptorError = /*#__PURE__*/function (_LivekitError) {
  function CryptorError(message) {
    var _this;
    var reason = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CryptorErrorReason.InternalError;
    var participantIdentity = arguments.length > 2 ? arguments[2] : undefined;
    _classCallCheck(this, CryptorError);
    _this = _callSuper(this, CryptorError, [40, message]);
    _this.reason = reason;
    _this.participantIdentity = participantIdentity;
    return _this;
  }
  _inherits(CryptorError, _LivekitError);
  return _createClass(CryptorError);
}(LivekitError);

var KeyProviderEvent;
(function (KeyProviderEvent) {
  KeyProviderEvent["SetKey"] = "setKey";
  KeyProviderEvent["RatchetRequest"] = "ratchetRequest";
  KeyProviderEvent["KeyRatcheted"] = "keyRatcheted";
})(KeyProviderEvent || (KeyProviderEvent = {}));
var KeyHandlerEvent;
(function (KeyHandlerEvent) {
  KeyHandlerEvent["KeyRatcheted"] = "keyRatcheted";
})(KeyHandlerEvent || (KeyHandlerEvent = {}));
var EncryptionEvent;
(function (EncryptionEvent) {
  EncryptionEvent["ParticipantEncryptionStatusChanged"] = "participantEncryptionStatusChanged";
  EncryptionEvent["EncryptionError"] = "encryptionError";
})(EncryptionEvent || (EncryptionEvent = {}));
var CryptorEvent;
(function (CryptorEvent) {
  CryptorEvent["Error"] = "cryptorError";
})(CryptorEvent || (CryptorEvent = {}));

function isVideoFrame(frame) {
  return 'type' in frame;
}
function importKey(keyBytes_1) {
  return __awaiter(this, arguments, void 0, function (keyBytes) {
    var algorithm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      name: ENCRYPTION_ALGORITHM
    };
    var usage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'encrypt';
    return /*#__PURE__*/_regenerator().m(function _callee() {
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            return _context.a(2, crypto.subtle.importKey('raw', keyBytes, algorithm, false, usage === 'derive' ? ['deriveBits', 'deriveKey'] : ['encrypt', 'decrypt']));
        }
      }, _callee);
    })();
  });
}
function getAlgoOptions(algorithmName, salt) {
  var textEncoder = new TextEncoder();
  var encodedSalt = textEncoder.encode(salt);
  switch (algorithmName) {
    case 'HKDF':
      return {
        name: 'HKDF',
        salt: encodedSalt,
        hash: 'SHA-256',
        info: new ArrayBuffer(128)
      };
    case 'PBKDF2':
      {
        return {
          name: 'PBKDF2',
          salt: encodedSalt,
          hash: 'SHA-256',
          iterations: 100000
        };
      }
    default:
      throw new Error("algorithm ".concat(algorithmName, " is currently unsupported"));
  }
}
/**
 * Derives a set of keys from the master key.
 * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1
 */
function deriveKeys(material, salt) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee4() {
    var algorithmOptions, encryptionKey;
    return _regenerator().w(function (_context4) {
      while (1) switch (_context4.n) {
        case 0:
          algorithmOptions = getAlgoOptions(material.algorithm.name, salt); // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF
          // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams
          _context4.n = 1;
          return crypto.subtle.deriveKey(algorithmOptions, material, {
            name: ENCRYPTION_ALGORITHM,
            length: 128
          }, false, ['encrypt', 'decrypt']);
        case 1:
          encryptionKey = _context4.v;
          return _context4.a(2, {
            material: material,
            encryptionKey: encryptionKey
          });
      }
    }, _callee4);
  }));
}
/**
 * Ratchets a key. See
 * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1
 */
function ratchet(material, salt) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee5() {
    var algorithmOptions;
    return _regenerator().w(function (_context5) {
      while (1) switch (_context5.n) {
        case 0:
          algorithmOptions = getAlgoOptions(material.algorithm.name, salt); // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits
          return _context5.a(2, crypto.subtle.deriveBits(algorithmOptions, material, 256));
      }
    }, _callee5);
  }));
}
function needsRbspUnescaping(frameData) {
  for (var i = 0; i < frameData.length - 3; i++) {
    if (frameData[i] == 0 && frameData[i + 1] == 0 && frameData[i + 2] == 3) return true;
  }
  return false;
}
function parseRbsp(stream) {
  var dataOut = [];
  var length = stream.length;
  for (var i = 0; i < stream.length;) {
    // Be careful about over/underflow here. byte_length_ - 3 can underflow, and
    // i + 3 can overflow, but byte_length_ - i can't, because i < byte_length_
    // above, and that expression will produce the number of bytes left in
    // the stream including the byte at i.
    if (length - i >= 3 && !stream[i] && !stream[i + 1] && stream[i + 2] == 3) {
      // Two rbsp bytes.
      dataOut.push(stream[i++]);
      dataOut.push(stream[i++]);
      // Skip the emulation byte.
      i++;
    } else {
      // Single rbsp byte.
      dataOut.push(stream[i++]);
    }
  }
  return new Uint8Array(dataOut);
}
var kZerosInStartSequence = 2;
var kEmulationByte = 3;
function writeRbsp(data_in) {
  var dataOut = [];
  var numConsecutiveZeros = 0;
  for (var i = 0; i < data_in.length; ++i) {
    var _byte = data_in[i];
    if (_byte <= kEmulationByte && numConsecutiveZeros >= kZerosInStartSequence) {
      // Need to escape.
      dataOut.push(kEmulationByte);
      numConsecutiveZeros = 0;
    }
    dataOut.push(_byte);
    if (_byte == 0) {
      ++numConsecutiveZeros;
    } else {
      numConsecutiveZeros = 0;
    }
  }
  return new Uint8Array(dataOut);
}

var SifGuard = /*#__PURE__*/function () {
  function SifGuard() {
    _classCallCheck(this, SifGuard);
    this.consecutiveSifCount = 0;
    this.lastSifReceivedAt = 0;
    this.userFramesSinceSif = 0;
  }
  return _createClass(SifGuard, [{
    key: "recordSif",
    value: function recordSif() {
      var _a;
      this.consecutiveSifCount += 1;
      (_a = this.sifSequenceStartedAt) !== null && _a !== void 0 ? _a : this.sifSequenceStartedAt = Date.now();
      this.lastSifReceivedAt = Date.now();
    }
  }, {
    key: "recordUserFrame",
    value: function recordUserFrame() {
      if (this.sifSequenceStartedAt === undefined) {
        return;
      } else {
        this.userFramesSinceSif += 1;
      }
      if (
      // reset if we received more user frames than SIFs
      this.userFramesSinceSif > this.consecutiveSifCount ||
      // also reset if we got a new user frame and the latest SIF frame hasn't been updated in a while
      Date.now() - this.lastSifReceivedAt > MAX_SIF_DURATION) {
        this.reset();
      }
    }
  }, {
    key: "isSifAllowed",
    value: function isSifAllowed() {
      return this.consecutiveSifCount < MAX_SIF_COUNT && (this.sifSequenceStartedAt === undefined || Date.now() - this.sifSequenceStartedAt < MAX_SIF_DURATION);
    }
  }, {
    key: "reset",
    value: function reset() {
      this.userFramesSinceSif = 0;
      this.consecutiveSifCount = 0;
      this.sifSequenceStartedAt = undefined;
    }
  }]);
}();

var encryptionEnabledMap = new Map();
var BaseFrameCryptor = /*#__PURE__*/function (_EventEmitter) {
  function BaseFrameCryptor() {
    _classCallCheck(this, BaseFrameCryptor);
    return _callSuper(this, BaseFrameCryptor, arguments);
  }
  _inherits(BaseFrameCryptor, _EventEmitter);
  return _createClass(BaseFrameCryptor, [{
    key: "encodeFunction",
    value: function encodeFunction(encodedFrame, controller) {
      throw Error('not implemented for subclass');
    }
  }, {
    key: "decodeFunction",
    value: function decodeFunction(encodedFrame, controller) {
      throw Error('not implemented for subclass');
    }
  }]);
}(eventsExports.EventEmitter);
/**
 * Cryptor is responsible for en-/decrypting media frames.
 * Each Cryptor instance is responsible for en-/decrypting a single mediaStreamTrack.
 */
var FrameCryptor = /*#__PURE__*/function (_BaseFrameCryptor) {
  function FrameCryptor(opts) {
    var _this;
    _classCallCheck(this, FrameCryptor);
    var _a;
    _this = _callSuper(this, FrameCryptor);
    _this.sendCounts = new Map();
    _this.keys = opts.keys;
    _this.participantIdentity = opts.participantIdentity;
    _this.rtpMap = new Map();
    _this.keyProviderOptions = opts.keyProviderOptions;
    _this.sifTrailer = (_a = opts.sifTrailer) !== null && _a !== void 0 ? _a : Uint8Array.from([]);
    _this.sifGuard = new SifGuard();
    return _this;
  }
  _inherits(FrameCryptor, _BaseFrameCryptor);
  return _createClass(FrameCryptor, [{
    key: "logContext",
    get: function get() {
      return {
        participant: this.participantIdentity,
        mediaTrackId: this.trackId,
        fallbackCodec: this.videoCodec
      };
    }
    /**
     * Assign a different participant to the cryptor.
     * useful for transceiver re-use
     * @param id
     * @param keys
     */
  }, {
    key: "setParticipant",
    value: function setParticipant(id, keys) {
      workerLogger.debug('setting new participant on cryptor', Object.assign(Object.assign({}, this.logContext), {
        participant: id
      }));
      if (this.participantIdentity) {
        workerLogger.error('cryptor has already a participant set, participant should have been unset before', Object.assign({}, this.logContext));
      }
      this.participantIdentity = id;
      this.keys = keys;
      this.sifGuard.reset();
    }
  }, {
    key: "unsetParticipant",
    value: function unsetParticipant() {
      workerLogger.debug('unsetting participant', this.logContext);
      this.participantIdentity = undefined;
    }
  }, {
    key: "isEnabled",
    value: function isEnabled() {
      if (this.participantIdentity) {
        return encryptionEnabledMap.get(this.participantIdentity);
      } else {
        return undefined;
      }
    }
  }, {
    key: "getParticipantIdentity",
    value: function getParticipantIdentity() {
      return this.participantIdentity;
    }
  }, {
    key: "getTrackId",
    value: function getTrackId() {
      return this.trackId;
    }
    /**
     * Update the video codec used by the mediaStreamTrack
     * @param codec
     */
  }, {
    key: "setVideoCodec",
    value: function setVideoCodec(codec) {
      this.videoCodec = codec;
    }
    /**
     * rtp payload type map used for figuring out codec of payload type when encoding
     * @param map
     */
  }, {
    key: "setRtpMap",
    value: function setRtpMap(map) {
      this.rtpMap = map;
    }
  }, {
    key: "setupTransform",
    value: function setupTransform(operation, readable, writable, trackId, codec) {
      var _this2 = this;
      if (codec) {
        workerLogger.info('setting codec on cryptor to', {
          codec: codec
        });
        this.videoCodec = codec;
      }
      workerLogger.debug('Setting up frame cryptor transform', Object.assign({
        operation: operation,
        passedTrackId: trackId,
        codec: codec
      }, this.logContext));
      var transformFn = operation === 'encode' ? this.encodeFunction : this.decodeFunction;
      var transformStream = new TransformStream({
        transform: transformFn.bind(this)
      });
      readable.pipeThrough(transformStream).pipeTo(writable)["catch"](function (e) {
        workerLogger.warn(e);
        _this2.emit(CryptorEvent.Error, e instanceof CryptorError ? e : new CryptorError(e.message, undefined, _this2.participantIdentity));
      });
      this.trackId = trackId;
    }
  }, {
    key: "setSifTrailer",
    value: function setSifTrailer(trailer) {
      workerLogger.debug('setting SIF trailer', Object.assign(Object.assign({}, this.logContext), {
        trailer: trailer
      }));
      this.sifTrailer = trailer;
    }
    /**
     * Function that will be injected in a stream and will encrypt the given encoded frames.
     *
     * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.
     * @param {TransformStreamDefaultController} controller - TransportStreamController.
     *
     * The VP8 payload descriptor described in
     * https://tools.ietf.org/html/rfc7741#section-4.2
     * is part of the RTP packet and not part of the frame and is not controllable by us.
     * This is fine as the SFU keeps having access to it for routing.
     *
     * The encrypted frame is formed as follows:
     * 1) Find unencrypted byte length, depending on the codec, frame type and kind.
     * 2) Form the GCM IV for the frame as described above.
     * 3) Encrypt the rest of the frame using AES-GCM.
     * 4) Allocate space for the encrypted frame.
     * 5) Copy the unencrypted bytes to the start of the encrypted frame.
     * 6) Append the ciphertext to the encrypted frame.
     * 7) Append the IV.
     * 8) Append a single byte for the key identifier.
     * 9) Enqueue the encrypted frame for sending.
     */
  }, {
    key: "encodeFunction",
    value: function encodeFunction(encodedFrame, controller) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee() {
        var _a, keySet, encryptionKey, keyIndex, iv, frameInfo, frameHeader, frameTrailer, cipherText, newDataWithoutHeader, newData, _t;
        return _regenerator().w(function (_context) {
          while (1) switch (_context.n) {
            case 0:
              if (!(!this.isEnabled() ||
              // skip for encryption for empty dtx frames
              encodedFrame.data.byteLength === 0)) {
                _context.n = 1;
                break;
              }
              return _context.a(2, controller.enqueue(encodedFrame));
            case 1:
              keySet = this.keys.getKeySet();
              if (keySet) {
                _context.n = 2;
                break;
              }
              this.emit(CryptorEvent.Error, new CryptorError("key set not found for ".concat(this.participantIdentity, " at index ").concat(this.keys.getCurrentKeyIndex()), CryptorErrorReason.MissingKey, this.participantIdentity));
              return _context.a(2, controller.enqueue(encodedFrame));
            case 2:
              encryptionKey = keySet.encryptionKey;
              keyIndex = this.keys.getCurrentKeyIndex();
              if (!encryptionKey) {
                _context.n = 6;
                break;
              }
              iv = this.makeIV((_a = encodedFrame.getMetadata().synchronizationSource) !== null && _a !== void 0 ? _a : -1, encodedFrame.timestamp);
              frameInfo = this.getUnencryptedBytes(encodedFrame); // Thіs is not encrypted and contains the VP8 payload descriptor or the Opus TOC byte.
              frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes); // Frame trailer contains the R|IV_LENGTH and key index
              frameTrailer = new Uint8Array(2);
              frameTrailer[0] = IV_LENGTH;
              frameTrailer[1] = keyIndex;
              // Construct frame trailer. Similar to the frame header described in
              // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2
              // but we put it at the end.
              //
              // ---------+-------------------------+-+---------+----
              // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |
              // ---------+-------------------------+-+---------+----
              _context.p = 3;
              _context.n = 4;
              return crypto.subtle.encrypt({
                name: ENCRYPTION_ALGORITHM,
                iv: iv,
                additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength)
              }, encryptionKey, new Uint8Array(encodedFrame.data, frameInfo.unencryptedBytes));
            case 4:
              cipherText = _context.v;
              newDataWithoutHeader = new Uint8Array(cipherText.byteLength + iv.byteLength + frameTrailer.byteLength);
              newDataWithoutHeader.set(new Uint8Array(cipherText)); // add ciphertext.
              newDataWithoutHeader.set(new Uint8Array(iv), cipherText.byteLength); // append IV.
              newDataWithoutHeader.set(frameTrailer, cipherText.byteLength + iv.byteLength); // append frame trailer.
              if (frameInfo.isH264) {
                newDataWithoutHeader = writeRbsp(newDataWithoutHeader);
              }
              newData = new Uint8Array(frameHeader.byteLength + newDataWithoutHeader.byteLength);
              newData.set(frameHeader);
              newData.set(newDataWithoutHeader, frameHeader.byteLength);
              encodedFrame.data = newData.buffer;
              return _context.a(2, controller.enqueue(encodedFrame));
            case 5:
              _context.p = 5;
              _t = _context.v;
              // TODO: surface this to the app.
              workerLogger.error(_t);
              _context.n = 7;
              break;
            case 6:
              workerLogger.debug('failed to encrypt, emitting error', this.logContext);
              this.emit(CryptorEvent.Error, new CryptorError("encryption key missing for encoding", CryptorErrorReason.MissingKey, this.participantIdentity));
            case 7:
              return _context.a(2);
          }
        }, _callee, this, [[3, 5]]);
      }));
    }
    /**
     * Function that will be injected in a stream and will decrypt the given encoded frames.
     *
     * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.
     * @param {TransformStreamDefaultController} controller - TransportStreamController.
     */
  }, {
    key: "decodeFunction",
    value: function decodeFunction(encodedFrame, controller) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee2() {
        var data, keyIndex, decodedFrame, _t2;
        return _regenerator().w(function (_context2) {
          while (1) switch (_context2.n) {
            case 0:
              if (!(!this.isEnabled() ||
              // skip for decryption for empty dtx frames
              encodedFrame.data.byteLength === 0)) {
                _context2.n = 1;
                break;
              }
              workerLogger.debug('skipping empty frame', this.logContext);
              this.sifGuard.recordUserFrame();
              return _context2.a(2, controller.enqueue(encodedFrame));
            case 1:
              if (!isFrameServerInjected(encodedFrame.data, this.sifTrailer)) {
                _context2.n = 4;
                break;
              }
              workerLogger.debug('enqueue SIF', this.logContext);
              this.sifGuard.recordSif();
              if (!this.sifGuard.isSifAllowed()) {
                _context2.n = 2;
                break;
              }
              encodedFrame.data = encodedFrame.data.slice(0, encodedFrame.data.byteLength - this.sifTrailer.byteLength);
              return _context2.a(2, controller.enqueue(encodedFrame));
            case 2:
              workerLogger.warn('SIF limit reached, dropping frame');
              return _context2.a(2);
            case 3:
              _context2.n = 5;
              break;
            case 4:
              this.sifGuard.recordUserFrame();
            case 5:
              data = new Uint8Array(encodedFrame.data);
              keyIndex = data[encodedFrame.data.byteLength - 1];
              if (!this.keys.hasInvalidKeyAtIndex(keyIndex)) {
                _context2.n = 6;
                break;
              }
              return _context2.a(2);
            case 6:
              if (!this.keys.getKeySet(keyIndex)) {
                _context2.n = 12;
                break;
              }
              _context2.p = 7;
              _context2.n = 8;
              return this.decryptFrame(encodedFrame, keyIndex);
            case 8:
              decodedFrame = _context2.v;
              this.keys.decryptionSuccess(keyIndex);
              if (!decodedFrame) {
                _context2.n = 9;
                break;
              }
              return _context2.a(2, controller.enqueue(decodedFrame));
            case 9:
              _context2.n = 11;
              break;
            case 10:
              _context2.p = 10;
              _t2 = _context2.v;
              if (_t2 instanceof CryptorError && _t2.reason === CryptorErrorReason.InvalidKey) {
                // emit an error if the key handler thinks we have a valid key
                if (this.keys.hasValidKey) {
                  this.emit(CryptorEvent.Error, _t2);
                  this.keys.decryptionFailure(keyIndex);
                }
              } else {
                workerLogger.warn('decoding frame failed', {
                  error: _t2
                });
              }
            case 11:
              _context2.n = 13;
              break;
            case 12:
              // emit an error if the key index is out of bounds but the key handler thinks we still have a valid key
              workerLogger.warn("skipping decryption due to missing key at index ".concat(keyIndex));
              this.emit(CryptorEvent.Error, new CryptorError("missing key at index ".concat(keyIndex, " for participant ").concat(this.participantIdentity), CryptorErrorReason.MissingKey, this.participantIdentity));
              this.keys.decryptionFailure(keyIndex);
            case 13:
              return _context2.a(2);
          }
        }, _callee2, this, [[7, 10]]);
      }));
    }
    /**
     * Function that will decrypt the given encoded frame. If the decryption fails, it will
     * ratchet the key for up to RATCHET_WINDOW_SIZE times.
     */
  }, {
    key: "decryptFrame",
    value: function decryptFrame(encodedFrame_1, keyIndex_1) {
      return __awaiter(this, arguments, void 0, function (encodedFrame, keyIndex) {
        var _this3 = this;
        var initialMaterial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
        var ratchetOpts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
          ratchetCount: 0
        };
        return /*#__PURE__*/_regenerator().m(function _callee3() {
          var _a, keySet, frameInfo, frameHeader, encryptedData, _newUint, frameTrailer, ivLength, iv, cipherTextStart, cipherTextLength, plainText, newData, newUint8, ratchetedKeySet, newMaterial, frame, _t3;
          return _regenerator().w(function (_context3) {
            while (1) switch (_context3.n) {
              case 0:
                keySet = _this3.keys.getKeySet(keyIndex);
                if (!(!ratchetOpts.encryptionKey && !keySet)) {
                  _context3.n = 1;
                  break;
                }
                throw new TypeError("no encryption key found for decryption of ".concat(_this3.participantIdentity));
              case 1:
                frameInfo = _this3.getUnencryptedBytes(encodedFrame); // Construct frame trailer. Similar to the frame header described in
                // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2
                // but we put it at the end.
                //
                // ---------+-------------------------+-+---------+----
                // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |
                // ---------+-------------------------+-+---------+----
                _context3.p = 2;
                frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes);
                encryptedData = new Uint8Array(encodedFrame.data, frameHeader.length, encodedFrame.data.byteLength - frameHeader.length);
                if (frameInfo.isH264 && needsRbspUnescaping(encryptedData)) {
                  encryptedData = parseRbsp(encryptedData);
                  _newUint = new Uint8Array(frameHeader.byteLength + encryptedData.byteLength);
                  _newUint.set(frameHeader);
                  _newUint.set(encryptedData, frameHeader.byteLength);
                  encodedFrame.data = _newUint.buffer;
                }
                frameTrailer = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - 2, 2);
                ivLength = frameTrailer[0];
                iv = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - ivLength - frameTrailer.byteLength, ivLength);
                cipherTextStart = frameHeader.byteLength;
                cipherTextLength = encodedFrame.data.byteLength - (frameHeader.byteLength + ivLength + frameTrailer.byteLength);
                _context3.n = 3;
                return crypto.subtle.decrypt({
                  name: ENCRYPTION_ALGORITHM,
                  iv: iv,
                  additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength)
                }, (_a = ratchetOpts.encryptionKey) !== null && _a !== void 0 ? _a : keySet.encryptionKey, new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength));
              case 3:
                plainText = _context3.v;
                newData = new ArrayBuffer(frameHeader.byteLength + plainText.byteLength);
                newUint8 = new Uint8Array(newData);
                newUint8.set(new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength));
                newUint8.set(new Uint8Array(plainText), frameHeader.byteLength);
                encodedFrame.data = newData;
                return _context3.a(2, encodedFrame);
              case 4:
                _context3.p = 4;
                _t3 = _context3.v;
                if (!(_this3.keyProviderOptions.ratchetWindowSize > 0)) {
                  _context3.n = 11;
                  break;
                }
                if (!(ratchetOpts.ratchetCount < _this3.keyProviderOptions.ratchetWindowSize)) {
                  _context3.n = 9;
                  break;
                }
                workerLogger.debug("ratcheting key attempt ".concat(ratchetOpts.ratchetCount, " of ").concat(_this3.keyProviderOptions.ratchetWindowSize, ", for kind ").concat(encodedFrame instanceof RTCEncodedAudioFrame ? 'audio' : 'video'));
                if (!((initialMaterial !== null && initialMaterial !== void 0 ? initialMaterial : keySet) === _this3.keys.getKeySet(keyIndex))) {
                  _context3.n = 7;
                  break;
                }
                _context3.n = 5;
                return _this3.keys.ratchetKey(keyIndex, false);
              case 5:
                newMaterial = _context3.v;
                _context3.n = 6;
                return deriveKeys(newMaterial, _this3.keyProviderOptions.ratchetSalt);
              case 6:
                ratchetedKeySet = _context3.v;
              case 7:
                _context3.n = 8;
                return _this3.decryptFrame(encodedFrame, keyIndex, initialMaterial || keySet, {
                  ratchetCount: ratchetOpts.ratchetCount + 1,
                  encryptionKey: ratchetedKeySet === null || ratchetedKeySet === void 0 ? void 0 : ratchetedKeySet.encryptionKey
                });
              case 8:
                frame = _context3.v;
                if (frame && ratchetedKeySet) {
                  // before updating the keys, make sure that the keySet used for this frame is still the same as the currently set key
                  // if it's not, a new key might have been set already, which we don't want to override
                  if ((initialMaterial !== null && initialMaterial !== void 0 ? initialMaterial : keySet) === _this3.keys.getKeySet(keyIndex)) {
                    _this3.keys.setKeySet(ratchetedKeySet, keyIndex, true);
                    // decryption was successful, set the new key index to reflect the ratcheted key set
                    _this3.keys.setCurrentKeyIndex(keyIndex);
                  }
                }
                return _context3.a(2, frame);
              case 9:
                /**
                 * Because we only set a new key once decryption has been successful,
                 * we can be sure that we don't need to reset the key to the initial material at this point
                 * as the key has not been updated on the keyHandler instance
                 */
                workerLogger.warn('maximum ratchet attempts exceeded');
                throw new CryptorError("valid key missing for participant ".concat(_this3.participantIdentity), CryptorErrorReason.InvalidKey, _this3.participantIdentity);
              case 10:
                _context3.n = 12;
                break;
              case 11:
                throw new CryptorError("Decryption failed: ".concat(_t3.message), CryptorErrorReason.InvalidKey, _this3.participantIdentity);
              case 12:
                return _context3.a(2);
            }
          }, _callee3, null, [[2, 4]]);
        })();
      });
    }
    /**
     * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to
     * https://tools.ietf.org/html/rfc7714#section-8.1
     * It concatenates
     * - the 32 bit synchronization source (SSRC) given on the encoded frame,
     * - the 32 bit rtp timestamp given on the encoded frame,
     * - a send counter that is specific to the SSRC. Starts at a random number.
     * The send counter is essentially the pictureId but we currently have to implement this ourselves.
     * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is
     * randomly generated and SFUs may not rewrite this is considered acceptable.
     * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in
     *   https://tools.ietf.org/html/rfc3711#section-4.1.1
     * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for
     * opus audio) every second. For video it rolls over roughly every 13 hours.
     * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)
     * every second. It will take a long time to roll over.
     *
     * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams
     */
  }, {
    key: "makeIV",
    value: function makeIV(synchronizationSource, timestamp) {
      var _a;
      var iv = new ArrayBuffer(IV_LENGTH);
      var ivView = new DataView(iv);
      // having to keep our own send count (similar to a picture id) is not ideal.
      if (!this.sendCounts.has(synchronizationSource)) {
        // Initialize with a random offset, similar to the RTP sequence number.
        this.sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xffff));
      }
      var sendCount = (_a = this.sendCounts.get(synchronizationSource)) !== null && _a !== void 0 ? _a : 0;
      ivView.setUint32(0, synchronizationSource);
      ivView.setUint32(4, timestamp);
      ivView.setUint32(8, timestamp - sendCount % 0xffff);
      this.sendCounts.set(synchronizationSource, sendCount + 1);
      return iv;
    }
  }, {
    key: "getUnencryptedBytes",
    value: function getUnencryptedBytes(frame) {
      var _a;
      var frameInfo = {
        unencryptedBytes: 0,
        isH264: false
      };
      if (isVideoFrame(frame)) {
        var detectedCodec = (_a = this.getVideoCodec(frame)) !== null && _a !== void 0 ? _a : this.videoCodec;
        if (detectedCodec !== this.detectedCodec) {
          workerLogger.debug('detected different codec', Object.assign({
            detectedCodec: detectedCodec,
            oldCodec: this.detectedCodec
          }, this.logContext));
          this.detectedCodec = detectedCodec;
        }
        if (detectedCodec === 'av1') {
          throw new Error("".concat(detectedCodec, " is not yet supported for end to end encryption"));
        }
        if (detectedCodec === 'vp8') {
          frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];
        } else if (detectedCodec === 'vp9') {
          frameInfo.unencryptedBytes = 0;
          return frameInfo;
        }
        var data = new Uint8Array(frame.data);
        try {
          var naluIndices = findNALUIndices(data);
          // if the detected codec is undefined we test whether it _looks_ like a h264 frame as a best guess
          frameInfo.isH264 = detectedCodec === 'h264' || naluIndices.some(function (naluIndex) {
            return [NALUType.SLICE_IDR, NALUType.SLICE_NON_IDR].includes(parseNALUType(data[naluIndex]));
          });
          if (frameInfo.isH264) {
            var _iterator = _createForOfIteratorHelper(naluIndices),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var index = _step.value;
                var type = parseNALUType(data[index]);
                switch (type) {
                  case NALUType.SLICE_IDR:
                  case NALUType.SLICE_NON_IDR:
                    frameInfo.unencryptedBytes = index + 2;
                    return frameInfo;
                  default:
                    break;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
            throw new TypeError('Could not find NALU');
          }
        } catch (e) {
          // no op, we just continue and fallback to vp8
        }
        frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];
        return frameInfo;
      } else {
        frameInfo.unencryptedBytes = UNENCRYPTED_BYTES.audio;
        return frameInfo;
      }
    }
    /**
     * inspects frame payloadtype if available and maps it to the codec specified in rtpMap
     */
  }, {
    key: "getVideoCodec",
    value: function getVideoCodec(frame) {
      if (this.rtpMap.size === 0) {
        return undefined;
      }
      var payloadType = frame.getMetadata().payloadType;
      var codec = payloadType ? this.rtpMap.get(payloadType) : undefined;
      return codec;
    }
  }]);
}(BaseFrameCryptor);
/**
 * Slice the NALUs present in the supplied buffer, assuming it is already byte-aligned
 * code adapted from https://github.com/medooze/h264-frame-parser/blob/main/lib/NalUnits.ts to return indices only
 */
function findNALUIndices(stream) {
  var result = [];
  var start = 0,
    pos = 0,
    searchLength = stream.length - 2;
  while (pos < searchLength) {
    // skip until end of current NALU
    while (pos < searchLength && !(stream[pos] === 0 && stream[pos + 1] === 0 && stream[pos + 2] === 1)) pos++;
    if (pos >= searchLength) pos = stream.length;
    // remove trailing zeros from current NALU
    var end = pos;
    while (end > start && stream[end - 1] === 0) end--;
    // save current NALU
    if (start === 0) {
      if (end !== start) throw TypeError('byte stream contains leading data');
    } else {
      result.push(start);
    }
    // begin new NALU
    start = pos = pos + 3;
  }
  return result;
}
function parseNALUType(startByte) {
  return startByte & kNaluTypeMask;
}
var kNaluTypeMask = 0x1f;
var NALUType;
(function (NALUType) {
  /** Coded slice of a non-IDR picture */
  NALUType[NALUType["SLICE_NON_IDR"] = 1] = "SLICE_NON_IDR";
  /** Coded slice data partition A */
  NALUType[NALUType["SLICE_PARTITION_A"] = 2] = "SLICE_PARTITION_A";
  /** Coded slice data partition B */
  NALUType[NALUType["SLICE_PARTITION_B"] = 3] = "SLICE_PARTITION_B";
  /** Coded slice data partition C */
  NALUType[NALUType["SLICE_PARTITION_C"] = 4] = "SLICE_PARTITION_C";
  /** Coded slice of an IDR picture */
  NALUType[NALUType["SLICE_IDR"] = 5] = "SLICE_IDR";
  /** Supplemental enhancement information */
  NALUType[NALUType["SEI"] = 6] = "SEI";
  /** Sequence parameter set */
  NALUType[NALUType["SPS"] = 7] = "SPS";
  /** Picture parameter set */
  NALUType[NALUType["PPS"] = 8] = "PPS";
  /** Access unit delimiter */
  NALUType[NALUType["AUD"] = 9] = "AUD";
  /** End of sequence */
  NALUType[NALUType["END_SEQ"] = 10] = "END_SEQ";
  /** End of stream */
  NALUType[NALUType["END_STREAM"] = 11] = "END_STREAM";
  /** Filler data */
  NALUType[NALUType["FILLER_DATA"] = 12] = "FILLER_DATA";
  /** Sequence parameter set extension */
  NALUType[NALUType["SPS_EXT"] = 13] = "SPS_EXT";
  /** Prefix NAL unit */
  NALUType[NALUType["PREFIX_NALU"] = 14] = "PREFIX_NALU";
  /** Subset sequence parameter set */
  NALUType[NALUType["SUBSET_SPS"] = 15] = "SUBSET_SPS";
  /** Depth parameter set */
  NALUType[NALUType["DPS"] = 16] = "DPS";
  // 17, 18 reserved
  /** Coded slice of an auxiliary coded picture without partitioning */
  NALUType[NALUType["SLICE_AUX"] = 19] = "SLICE_AUX";
  /** Coded slice extension */
  NALUType[NALUType["SLICE_EXT"] = 20] = "SLICE_EXT";
  /** Coded slice extension for a depth view component or a 3D-AVC texture view component */
  NALUType[NALUType["SLICE_LAYER_EXT"] = 21] = "SLICE_LAYER_EXT";
  // 22, 23 reserved
})(NALUType || (NALUType = {}));
/**
 * we use a magic frame trailer to detect whether a frame is injected
 * by the livekit server and thus to be treated as unencrypted
 * @internal
 */
function isFrameServerInjected(frameData, trailerBytes) {
  if (trailerBytes.byteLength === 0) {
    return false;
  }
  var frameTrailer = new Uint8Array(frameData.slice(frameData.byteLength - trailerBytes.byteLength));
  return trailerBytes.every(function (value, index) {
    return value === frameTrailer[index];
  });
}

// TODO ParticipantKeyHandlers currently don't get destroyed on participant disconnect
// we could do this by having a separate worker message on participant disconnected.
/**
 * ParticipantKeyHandler is responsible for providing a cryptor instance with the
 * en-/decryption key of a participant. It assumes that all tracks of a specific participant
 * are encrypted with the same key.
 * Additionally it exposes a method to ratchet a key which can be used by the cryptor either automatically
 * if decryption fails or can be triggered manually on both sender and receiver side.
 *
 */
var ParticipantKeyHandler = /*#__PURE__*/function (_EventEmitter) {
  function ParticipantKeyHandler(participantIdentity, keyProviderOptions) {
    var _this;
    _classCallCheck(this, ParticipantKeyHandler);
    _this = _callSuper(this, ParticipantKeyHandler);
    _this.currentKeyIndex = 0;
    if (keyProviderOptions.keyringSize < 1 || keyProviderOptions.keyringSize > 256) {
      throw new TypeError('Keyring size needs to be between 1 and 256');
    }
    _this.cryptoKeyRing = new Array(keyProviderOptions.keyringSize).fill(undefined);
    _this.decryptionFailureCounts = new Array(keyProviderOptions.keyringSize).fill(0);
    _this.keyProviderOptions = keyProviderOptions;
    _this.ratchetPromiseMap = new Map();
    _this.participantIdentity = participantIdentity;
    return _this;
  }
  /**
   * Returns true if the key at the given index is marked as invalid.
   *
   * @param keyIndex the index of the key
   */
  _inherits(ParticipantKeyHandler, _EventEmitter);
  return _createClass(ParticipantKeyHandler, [{
    key: "hasValidKey",
    get:
    /**
     * true if the current key has not been marked as invalid
     */
    function get() {
      return !this.hasInvalidKeyAtIndex(this.currentKeyIndex);
    }
  }, {
    key: "hasInvalidKeyAtIndex",
    value: function hasInvalidKeyAtIndex(keyIndex) {
      return this.keyProviderOptions.failureTolerance >= 0 && this.decryptionFailureCounts[keyIndex] > this.keyProviderOptions.failureTolerance;
    }
    /**
     * Informs the key handler that a decryption failure occurred for an encryption key.
     * @internal
     * @param keyIndex the key index for which the failure occurred. Defaults to the current key index.
     */
  }, {
    key: "decryptionFailure",
    value: function decryptionFailure() {
      var keyIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentKeyIndex;
      if (this.keyProviderOptions.failureTolerance < 0) {
        return;
      }
      this.decryptionFailureCounts[keyIndex] += 1;
      if (this.decryptionFailureCounts[keyIndex] > this.keyProviderOptions.failureTolerance) {
        workerLogger.warn("key for ".concat(this.participantIdentity, " at index ").concat(keyIndex, " is being marked as invalid"));
      }
    }
    /**
     * Informs the key handler that a frame was successfully decrypted using an encryption key.
     * @internal
     * @param keyIndex the key index for which the success occurred. Defaults to the current key index.
     */
  }, {
    key: "decryptionSuccess",
    value: function decryptionSuccess() {
      var keyIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currentKeyIndex;
      this.resetKeyStatus(keyIndex);
    }
    /**
     * Call this after user initiated ratchet or a new key has been set in order to make sure to mark potentially
     * invalid keys as valid again
     *
     * @param keyIndex the index of the key. Defaults to the current key index.
     */
  }, {
    key: "resetKeyStatus",
    value: function resetKeyStatus(keyIndex) {
      if (keyIndex === undefined) {
        this.decryptionFailureCounts.fill(0);
      } else {
        this.decryptionFailureCounts[keyIndex] = 0;
      }
    }
    /**
     * Ratchets the current key (or the one at keyIndex if provided) and
     * returns the ratcheted material
     * if `setKey` is true (default), it will also set the ratcheted key directly on the crypto key ring
     * @param keyIndex
     * @param setKey
     */
  }, {
    key: "ratchetKey",
    value: function ratchetKey(keyIndex) {
      var _this2 = this;
      var setKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var currentKeyIndex = keyIndex !== null && keyIndex !== void 0 ? keyIndex : this.getCurrentKeyIndex();
      var existingPromise = this.ratchetPromiseMap.get(currentKeyIndex);
      if (typeof existingPromise !== 'undefined') {
        return existingPromise;
      }
      var ratchetPromise = new Promise(function (resolve, reject) {
        return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee() {
          var keySet, currentMaterial, newMaterial, _t, _t2, _t3, _t4;
          return _regenerator().w(function (_context) {
            while (1) switch (_context.n) {
              case 0:
                _context.p = 0;
                keySet = this.getKeySet(currentKeyIndex);
                if (keySet) {
                  _context.n = 1;
                  break;
                }
                throw new TypeError("Cannot ratchet key without a valid keyset of participant ".concat(this.participantIdentity));
              case 1:
                currentMaterial = keySet.material;
                _t = importKey;
                _context.n = 2;
                return ratchet(currentMaterial, this.keyProviderOptions.ratchetSalt);
              case 2:
                _t2 = _context.v;
                _t3 = currentMaterial.algorithm.name;
                _context.n = 3;
                return _t(_t2, _t3, 'derive');
              case 3:
                newMaterial = _context.v;
                if (!setKey) {
                  _context.n = 5;
                  break;
                }
                _context.n = 4;
                return this.setKeyFromMaterial(newMaterial, currentKeyIndex, true);
              case 4:
                this.emit(KeyHandlerEvent.KeyRatcheted, newMaterial, this.participantIdentity, currentKeyIndex);
              case 5:
                resolve(newMaterial);
                _context.n = 7;
                break;
              case 6:
                _context.p = 6;
                _t4 = _context.v;
                reject(_t4);
              case 7:
                _context.p = 7;
                this.ratchetPromiseMap["delete"](currentKeyIndex);
                return _context.f(7);
              case 8:
                return _context.a(2);
            }
          }, _callee, this, [[0, 6, 7, 8]]);
        }));
      });
      this.ratchetPromiseMap.set(currentKeyIndex, ratchetPromise);
      return ratchetPromise;
    }
    /**
     * takes in a key material with `deriveBits` and `deriveKey` set as key usages
     * and derives encryption keys from the material and sets it on the key ring buffer
     * together with the material
     * also resets the valid key property and updates the currentKeyIndex
     */
  }, {
    key: "setKey",
    value: function setKey(material_1) {
      return __awaiter(this, arguments, void 0, function (material) {
        var _this3 = this;
        var keyIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        return /*#__PURE__*/_regenerator().m(function _callee2() {
          return _regenerator().w(function (_context2) {
            while (1) switch (_context2.n) {
              case 0:
                _context2.n = 1;
                return _this3.setKeyFromMaterial(material, keyIndex);
              case 1:
                _this3.resetKeyStatus(keyIndex);
              case 2:
                return _context2.a(2);
            }
          }, _callee2);
        })();
      });
    }
    /**
     * takes in a key material with `deriveBits` and `deriveKey` set as key usages
     * and derives encryption keys from the material and sets it on the key ring buffers
     * together with the material
     * also updates the currentKeyIndex
     */
  }, {
    key: "setKeyFromMaterial",
    value: function setKeyFromMaterial(material_1, keyIndex_1) {
      return __awaiter(this, arguments, void 0, function (material, keyIndex) {
        var _this4 = this;
        var emitRatchetEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        return /*#__PURE__*/_regenerator().m(function _callee3() {
          var keySet, newIndex;
          return _regenerator().w(function (_context3) {
            while (1) switch (_context3.n) {
              case 0:
                _context3.n = 1;
                return deriveKeys(material, _this4.keyProviderOptions.ratchetSalt);
              case 1:
                keySet = _context3.v;
                newIndex = keyIndex >= 0 ? keyIndex % _this4.cryptoKeyRing.length : _this4.currentKeyIndex;
                workerLogger.debug("setting new key with index ".concat(keyIndex), {
                  usage: material.usages,
                  algorithm: material.algorithm,
                  ratchetSalt: _this4.keyProviderOptions.ratchetSalt
                });
                _this4.setKeySet(keySet, newIndex, emitRatchetEvent);
                if (newIndex >= 0) _this4.currentKeyIndex = newIndex;
              case 2:
                return _context3.a(2);
            }
          }, _callee3);
        })();
      });
    }
  }, {
    key: "setKeySet",
    value: function setKeySet(keySet, keyIndex) {
      var emitRatchetEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      this.cryptoKeyRing[keyIndex % this.cryptoKeyRing.length] = keySet;
      if (emitRatchetEvent) {
        this.emit(KeyHandlerEvent.KeyRatcheted, keySet.material, this.participantIdentity, keyIndex);
      }
    }
  }, {
    key: "setCurrentKeyIndex",
    value: function setCurrentKeyIndex(index) {
      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee4() {
        return _regenerator().w(function (_context4) {
          while (1) switch (_context4.n) {
            case 0:
              this.currentKeyIndex = index % this.cryptoKeyRing.length;
              this.resetKeyStatus(index);
            case 1:
              return _context4.a(2);
          }
        }, _callee4, this);
      }));
    }
  }, {
    key: "getCurrentKeyIndex",
    value: function getCurrentKeyIndex() {
      return this.currentKeyIndex;
    }
    /**
     * returns currently used KeySet or the one at `keyIndex` if provided
     * @param keyIndex
     * @returns
     */
  }, {
    key: "getKeySet",
    value: function getKeySet(keyIndex) {
      return this.cryptoKeyRing[keyIndex !== null && keyIndex !== void 0 ? keyIndex : this.currentKeyIndex];
    }
  }]);
}(eventsExports.EventEmitter);

var participantCryptors = [];
var participantKeys = new Map();
var sharedKeyHandler;
var messageQueue = new AsyncQueue();
var isEncryptionEnabled = false;
var useSharedKey = false;
var sifTrailer;
var keyProviderOptions = KEY_PROVIDER_DEFAULTS;
var rtpMap = new Map();
workerLogger.setDefaultLevel('info');
onmessage = function onmessage(ev) {
  messageQueue.run(function () {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee() {
      var _ev$data, kind, data, ackMsg, cryptor, pubCryptor, _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            _ev$data = ev.data, kind = _ev$data.kind, data = _ev$data.data;
            _t = kind;
            _context.n = _t === 'init' ? 1 : _t === 'enable' ? 2 : _t === 'decode' ? 3 : _t === 'encode' ? 4 : _t === 'setKey' ? 5 : _t === 'removeTransform' ? 11 : _t === 'updateCodec' ? 12 : _t === 'setRTPMap' ? 13 : _t === 'ratchetRequest' ? 14 : _t === 'setSifTrailer' ? 15 : 16;
            break;
          case 1:
            workerLogger.setLevel(data.loglevel);
            workerLogger.info('worker initialized');
            keyProviderOptions = data.keyProviderOptions;
            useSharedKey = !!data.keyProviderOptions.sharedKey;
            // acknowledge init successful
            ackMsg = {
              kind: 'initAck',
              data: {
                enabled: isEncryptionEnabled
              }
            };
            postMessage(ackMsg);
            return _context.a(3, 17);
          case 2:
            setEncryptionEnabled(data.enabled, data.participantIdentity);
            workerLogger.info("updated e2ee enabled status for ".concat(data.participantIdentity, " to ").concat(data.enabled));
            // acknowledge enable call successful
            postMessage(ev.data);
            return _context.a(3, 17);
          case 3:
            cryptor = getTrackCryptor(data.participantIdentity, data.trackId);
            cryptor.setupTransform(kind, data.readableStream, data.writableStream, data.trackId, data.codec);
            return _context.a(3, 17);
          case 4:
            pubCryptor = getTrackCryptor(data.participantIdentity, data.trackId);
            pubCryptor.setupTransform(kind, data.readableStream, data.writableStream, data.trackId, data.codec);
            return _context.a(3, 17);
          case 5:
            if (!useSharedKey) {
              _context.n = 7;
              break;
            }
            _context.n = 6;
            return setSharedKey(data.key, data.keyIndex);
          case 6:
            _context.n = 10;
            break;
          case 7:
            if (!data.participantIdentity) {
              _context.n = 9;
              break;
            }
            workerLogger.info("set participant sender key ".concat(data.participantIdentity, " index ").concat(data.keyIndex));
            _context.n = 8;
            return getParticipantKeyHandler(data.participantIdentity).setKey(data.key, data.keyIndex);
          case 8:
            _context.n = 10;
            break;
          case 9:
            workerLogger.error('no participant Id was provided and shared key usage is disabled');
          case 10:
            return _context.a(3, 17);
          case 11:
            unsetCryptorParticipant(data.trackId, data.participantIdentity);
            return _context.a(3, 17);
          case 12:
            getTrackCryptor(data.participantIdentity, data.trackId).setVideoCodec(data.codec);
            return _context.a(3, 17);
          case 13:
            // this is only used for the local participant
            rtpMap = data.map;
            participantCryptors.forEach(function (cr) {
              if (cr.getParticipantIdentity() === data.participantIdentity) {
                cr.setRtpMap(data.map);
              }
            });
            return _context.a(3, 17);
          case 14:
            handleRatchetRequest(data);
            return _context.a(3, 17);
          case 15:
            handleSifTrailer(data.trailer);
            return _context.a(3, 17);
          case 16:
            return _context.a(3, 17);
          case 17:
            return _context.a(2);
        }
      }, _callee);
    }));
  });
};
function handleRatchetRequest(data) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee2() {
    var keyHandler, _keyHandler;
    return _regenerator().w(function (_context2) {
      while (1) switch (_context2.n) {
        case 0:
          if (!useSharedKey) {
            _context2.n = 2;
            break;
          }
          keyHandler = getSharedKeyHandler();
          _context2.n = 1;
          return keyHandler.ratchetKey(data.keyIndex);
        case 1:
          keyHandler.resetKeyStatus();
          _context2.n = 5;
          break;
        case 2:
          if (!data.participantIdentity) {
            _context2.n = 4;
            break;
          }
          _keyHandler = getParticipantKeyHandler(data.participantIdentity);
          _context2.n = 3;
          return _keyHandler.ratchetKey(data.keyIndex);
        case 3:
          _keyHandler.resetKeyStatus();
          _context2.n = 5;
          break;
        case 4:
          workerLogger.error('no participant Id was provided for ratchet request and shared key usage is disabled');
        case 5:
          return _context2.a(2);
      }
    }, _callee2);
  }));
}
function getTrackCryptor(participantIdentity, trackId) {
  var cryptors = participantCryptors.filter(function (c) {
    return c.getTrackId() === trackId;
  });
  if (cryptors.length > 1) {
    var debugInfo = cryptors.map(function (c) {
      return {
        participant: c.getParticipantIdentity()
      };
    }).join(',');
    workerLogger.error("Found multiple cryptors for the same trackID ".concat(trackId, ". target participant: ").concat(participantIdentity, " "), {
      participants: debugInfo
    });
  }
  var cryptor = cryptors[0];
  if (!cryptor) {
    workerLogger.info('creating new cryptor for', {
      participantIdentity: participantIdentity
    });
    if (!keyProviderOptions) {
      throw Error('Missing keyProvider options');
    }
    cryptor = new FrameCryptor({
      participantIdentity: participantIdentity,
      keys: getParticipantKeyHandler(participantIdentity),
      keyProviderOptions: keyProviderOptions,
      sifTrailer: sifTrailer
    });
    cryptor.setRtpMap(rtpMap);
    setupCryptorErrorEvents(cryptor);
    participantCryptors.push(cryptor);
  } else if (participantIdentity !== cryptor.getParticipantIdentity()) {
    // assign new participant id to track cryptor and pass in correct key handler
    cryptor.setParticipant(participantIdentity, getParticipantKeyHandler(participantIdentity));
  }
  return cryptor;
}
function getParticipantKeyHandler(participantIdentity) {
  if (useSharedKey) {
    return getSharedKeyHandler();
  }
  var keys = participantKeys.get(participantIdentity);
  if (!keys) {
    keys = new ParticipantKeyHandler(participantIdentity, keyProviderOptions);
    keys.on(KeyHandlerEvent.KeyRatcheted, emitRatchetedKeys);
    participantKeys.set(participantIdentity, keys);
  }
  return keys;
}
function getSharedKeyHandler() {
  if (!sharedKeyHandler) {
    workerLogger.debug('creating new shared key handler');
    sharedKeyHandler = new ParticipantKeyHandler('shared-key', keyProviderOptions);
  }
  return sharedKeyHandler;
}
function unsetCryptorParticipant(trackId, participantIdentity) {
  var cryptors = participantCryptors.filter(function (c) {
    return c.getParticipantIdentity() === participantIdentity && c.getTrackId() === trackId;
  });
  if (cryptors.length > 1) {
    workerLogger.error('Found multiple cryptors for the same participant and trackID combination', {
      trackId: trackId,
      participantIdentity: participantIdentity
    });
  }
  var cryptor = cryptors[0];
  if (!cryptor) {
    workerLogger.warn('Could not unset participant on cryptor', {
      trackId: trackId,
      participantIdentity: participantIdentity
    });
  } else {
    cryptor.unsetParticipant();
  }
}
function setEncryptionEnabled(enable, participantIdentity) {
  workerLogger.debug("setting encryption enabled for all tracks of ".concat(participantIdentity), {
    enable: enable
  });
  encryptionEnabledMap.set(participantIdentity, enable);
}
function setSharedKey(key, index) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator().m(function _callee3() {
    return _regenerator().w(function (_context3) {
      while (1) switch (_context3.n) {
        case 0:
          workerLogger.info('set shared key', {
            index: index
          });
          _context3.n = 1;
          return getSharedKeyHandler().setKey(key, index);
        case 1:
          return _context3.a(2);
      }
    }, _callee3);
  }));
}
function setupCryptorErrorEvents(cryptor) {
  cryptor.on(CryptorEvent.Error, function (error) {
    var msg = {
      kind: 'error',
      data: {
        error: new Error("".concat(CryptorErrorReason[error.reason], ": ").concat(error.message))
      }
    };
    postMessage(msg);
  });
}
function emitRatchetedKeys(material, participantIdentity, keyIndex) {
  var msg = {
    kind: "ratchetKey",
    data: {
      participantIdentity: participantIdentity,
      keyIndex: keyIndex,
      material: material
    }
  };
  postMessage(msg);
}
function handleSifTrailer(trailer) {
  sifTrailer = trailer;
  participantCryptors.forEach(function (c) {
    c.setSifTrailer(trailer);
  });
}
// Operations using RTCRtpScriptTransform.
// @ts-ignore
if (self.RTCTransformEvent) {
  workerLogger.debug('setup transform event');
  // @ts-ignore
  self.onrtctransform = function (event) {
    // @ts-ignore .transformer property is part of RTCTransformEvent
    var transformer = event.transformer;
    workerLogger.debug('transformer', transformer);
    // @ts-ignore monkey patching non standard flag
    transformer.handled = true;
    var _transformer$options = transformer.options,
      kind = _transformer$options.kind,
      participantIdentity = _transformer$options.participantIdentity,
      trackId = _transformer$options.trackId,
      codec = _transformer$options.codec;
    var cryptor = getTrackCryptor(participantIdentity, trackId);
    workerLogger.debug('transform', {
      codec: codec
    });
    cryptor.setupTransform(kind, transformer.readable, transformer.writable, trackId, codec);
  };
}
//# sourceMappingURL=ecprt-client-sdk.e2ee.worker.mjs.map
