import { AudioDenoiser } from "../AudioDenoiser";
/**
 * DeepFilterProcessor implements the AudioDenoiser interface and provides
 * functionality for denoising audio frames using the DeepFilter algorithm.
 */
export default class DeepFilterProcessor implements AudioDenoiser {
    /**
     * DeepFilter context object needed to perform the audio processing.
     */
    private context?;
    /**
     * State flag, check if the instance was initialized.
     */
    private initialized;
    /**
     * WASM bindgen instance
     */
    private wasm;
    /**
     * Pre-loaded WASM data passed from main thread
     */
    private wasmJsCode?;
    private wasmBinary?;
    private modelData?;
    private attenLim;
    private postFilterBeta;
    /**
     * Constructor - accepts pre-loaded WASM data
     */
    constructor(wasmJsCode?: string, wasmBinary?: Uint8Array, modelData?: Uint8Array, attenLim?: number, postFilterBeta?: number);
    /**
     * Initialize the processor with pre-loaded WASM data in the AudioWorklet context.
     */
    initialize(): Promise<void>;
    /**
     * Get the sample length expected by the DeepFilter processor.
     * @returns {number}
     */
    getSampleLength(): number;
    /**
     * Release resources associated with the DeepFilter context.
     * @returns {void}
     */
    destroy(): void;
    /**
     * Process an audio frame using the DeepFilter algorithm.
     * @param {Float32Array} pcmFrame - Input audio frame
     * @returns {number} - Status code (0 for success)
     */
    processAudioFrame(pcmFrame: Float32Array): number;
    /**
     * Set the attenuation limit in dB.
     * @param {number} limDb - Attenuation limit in dB
     * @returns {void}
     */
    setAttenLim(limDb: number): void;
    /**
     * Set post filter beta. A beta of 0 disables the post filter.
     * Suitable range between 0.05 and 0.
     * @param {number} beta - Post filter beta
     * @returns {void}
     */
    setPostFilterBeta(beta: number): void;
}
