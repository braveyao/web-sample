import { AudioDenoiser } from "../AudioDenoiser";
/**
 * Constant. Rnnoise default sample size, samples of different size won't work.
 */
export declare const RNNOISE_SAMPLE_LENGTH = 480;
export default class RnnoiseProcessor implements AudioDenoiser {
    /**
     * Rnnoise context object needed to perform the audio processing.
     */
    private context?;
    /**
     * State flag, check if the instance was destroyed.
     */
    private destroyed;
    /**
     * WASM interface through which calls to rnnoise are made.
     */
    private wasmInterface;
    /**
     * WASM dynamic memory buffer used as input for rnnoise processing method.
     */
    private wasmPcmInput;
    /**
     * The Float32Array index representing the start point in the wasm heap of the wasmPcmInput buffer.
     */
    private wasmPcmInputF32Index;
    /**
     * Constructor.
     */
    constructor();
    /**
     * Initialize the processor in the AudioWorklet context.
     */
    initialize(): Promise<void>;
    /**
     * Release resources associated with the wasm context. If something goes downhill here
     * i.e. Exception is thrown, there is nothing much we can do.
     *
     * @returns {void}
     */
    private releaseWasmResources;
    /**
     * Rnnoise can only operate on a certain PCM array size.
     *
     * @returns {number} - The PCM sample array size as required by rnnoise.
     */
    getSampleLength(): number;
    /**
     * Release any resources required by the rnnoise context this needs to be called
     * before destroying any context that uses the processor.
     *
     * @returns {void}
     */
    destroy(): void;
    /**
     * Process an audio frame, optionally denoising the input pcmFrame and returning the Voice Activity Detection score
     * for a raw Float32 PCM sample Array.
     * The size of the array must be of exactly 480 samples, this constraint comes from the rnnoise library.
     *
     * @param {Float32Array} pcmFrame - Array containing 32 bit PCM samples. Parameter is also used as output.
     * @returns {Float} Contains VAD score in the interval 0 - 1 i.e. 0.90 .
     */
    processAudioFrame(pcmFrame: Float32Array): number;
}
