import { AudioDenoiser } from "../AudioDenoiser";

/**
 * DeepFilterProcessor implements the AudioDenoiser interface and provides
 * functionality for denoising audio frames using the DeepFilter algorithm.
 */
export default class DeepFilterProcessor implements AudioDenoiser {
    /**
     * DeepFilter context object needed to perform the audio processing.
     */
    private context?: number;

    /**
     * State flag, check if the instance was initialized.
     */
    private initialized = false;
    
    /**
     * WASM bindgen instance
     */
    private wasm: any;

    /**
     * Pre-loaded WASM data passed from main thread
     */
    private wasmJsCode?: string;
    private wasmBinary?: Uint8Array;
    private modelData?: Uint8Array;

    private attenLim!: number;
    private postFilterBeta!: number;

    /**
     * Constructor - accepts pre-loaded WASM data
     */
    constructor(wasmJsCode?: string, wasmBinary?: Uint8Array, modelData?: Uint8Array, attenLim?: number, postFilterBeta?: number) {
        this.wasmJsCode = wasmJsCode;
        this.wasmBinary = wasmBinary;
        this.modelData = modelData;
        this.attenLim = attenLim ?? 80.0; // Default attenuation limit in dB
        this.postFilterBeta = postFilterBeta ?? 0.0; // Default post filter beta
    }
    
    /**
     * Initialize the processor with pre-loaded WASM data in the AudioWorklet context.
     */
    async initialize(): Promise<void> {
        try {
            // Check if we have pre-loaded WASM data
            if (!this.wasmJsCode || !this.wasmBinary || !this.modelData) {
                throw new Error("WASM data not pre-loaded. DeepFilterProcessor requires WASM files to be loaded in main thread.");
            }
            
            // Evaluate the WASM JavaScript code to set up wasm_bindgen globally
            (0, eval)(`${this.wasmJsCode}\nglobalThis.wasm_bindgen = wasm_bindgen;`);
            if (!(globalThis as any).wasm_bindgen) {
                throw new Error("wasm_bindgen not available after evaluation");
            }
            
            // Initialize WASM module with pre-loaded binary
            await (globalThis as any).wasm_bindgen(this.wasmBinary);
            this.wasm = (globalThis as any).wasm_bindgen;            
           
            // Create the DeepFilter state with pre-loaded model data and attenuation limit
            // Note: df_create expects Uint8Array and will decompress the tar.gz internally
            this.context = this.wasm.df_create(this.modelData, this.attenLim);

            if (!this.context) {
                throw new Error("df_create returned null/undefined context");
            }

            this.initialized = true;

            if (this.postFilterBeta > 0) {
                this.wasm.df_set_post_filter_beta(this.context, this.postFilterBeta);
            }
        } catch (error) {
            this.destroy();
            throw error;
        }
    }

    /**
     * Get the sample length expected by the DeepFilter processor.
     * @returns {number}
     */
    getSampleLength(): number {
        if (!this.initialized || !this.context) {
            throw new Error("DeepFilterProcessor not initialized");
        }
        return this.wasm.df_get_frame_length(this.context);
    }

    /**
     * Release resources associated with the DeepFilter context.
     * @returns {void}
     */
    destroy(): void {
        if (this.initialized && this.context) {
            // Note: df_create returns a numeric context ID, not a DFState object
            // There is no df_destroy() function in the WASM module
            // The WASM module uses automatic cleanup via FinalizationRegistry
        }

        this.initialized = false;
        this.context = undefined;
        this.wasm = undefined;
    }

    /**
     * Process an audio frame using the DeepFilter algorithm.
     * @param {Float32Array} pcmFrame - Input audio frame
     * @returns {number} - Status code (0 for success)
     */
    processAudioFrame(pcmFrame: Float32Array) : number {
        if (!this.initialized || !this.context) {
            throw new Error("DeepFilterProcessor not initialized");
        }

        let processedFrame = this.wasm.df_process_frame(this.context, pcmFrame);
        pcmFrame.set(processedFrame);

        return 0; // Return 0 to indicate success
    }

    /**
     * Set the attenuation limit in dB.
     * @param {number} limDb - Attenuation limit in dB
     * @returns {void}
     */
    setAttenLim(limDb: number): void {
        if (!this.initialized || !this.context) {
            throw new Error("DeepFilterProcessor not initialized");
        }

        this.wasm.df_set_atten_lim(this.context, limDb);
    }

    /**
     * Set post filter beta. A beta of 0 disables the post filter.
     * Suitable range between 0.05 and 0.
     * @param {number} beta - Post filter beta
     * @returns {void}
     */
    setPostFilterBeta(beta: number): void {
        if (!this.initialized || !this.context) {
            throw new Error("DeepFilterProcessor not initialized");
        }

        this.wasm.df_set_post_filter_beta(this.context, beta);
    }
}
